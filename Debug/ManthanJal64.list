
ManthanJal64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001748  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005674  08005674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005674  08005674  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005674  08005674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08005688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08005688  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c59f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c99  00000000  00000000  0002c5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002e270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017deb  00000000  00000000  0002f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b72  00000000  00000000  000477b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000836d9  00000000  00000000  00050325  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d39fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  000d3a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f14 	.word	0x08003f14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003f14 	.word	0x08003f14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <pgm_read_glyph_ptr>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
  return gfxFont->glyph + c;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	4413      	add	r3, r2
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <pgm_read_bitmap_ptr>:

uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  return gfxFont->bitmap;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
	...

08000984 <gfx_setCursor>:
  @brief  Set text cursor location
  @param  x    X coordinate in pixels
  @param  y    Y coordinate in pixels
*/
/**********************************************************************/
void gfx_setCursor(int16_t x, int16_t y) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	80fb      	strh	r3, [r7, #6]
 8000990:	4613      	mov	r3, r2
 8000992:	80bb      	strh	r3, [r7, #4]
  cursor_x = x;
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <gfx_setCursor+0x28>)
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	8013      	strh	r3, [r2, #0]
  cursor_y = y;
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <gfx_setCursor+0x2c>)
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	8013      	strh	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000068 	.word	0x20000068
 80009b0:	20000030 	.word	0x20000030

080009b4 <gfx_setTextColor>:
   @param   c   16-bit 5-6-5 Color to draw text with
   @note    For 'transparent' background, background and foreground
            are set to same color rather than using a separate flag.
 */
 /**********************************************************************/
 void gfx_setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <gfx_setTextColor+0x24>)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	8013      	strh	r3, [r2, #0]
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <gfx_setTextColor+0x24>)
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <gfx_setTextColor+0x28>)
 80009ca:	801a      	strh	r2, [r3, #0]
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000070 	.word	0x20000070
 80009dc:	20000074 	.word	0x20000074

080009e0 <gfx_init>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
void gfx_init(int16_t w, int16_t h) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	460a      	mov	r2, r1
 80009ea:	80fb      	strh	r3, [r7, #6]
 80009ec:	4613      	mov	r3, r2
 80009ee:	80bb      	strh	r3, [r7, #4]
  _width = w;
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <gfx_init+0x6c>)
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	8013      	strh	r3, [r2, #0]
  _height = h;
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <gfx_init+0x70>)
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	8013      	strh	r3, [r2, #0]
  rotation = 0;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <gfx_init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  cursor_y = cursor_x = 0;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <gfx_init+0x78>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	801a      	strh	r2, [r3, #0]
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <gfx_init+0x78>)
 8000a0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <gfx_init+0x7c>)
 8000a10:	801a      	strh	r2, [r3, #0]
  textsize_x = textsize_y = 1;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <gfx_init+0x80>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <gfx_init+0x80>)
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <gfx_init+0x84>)
 8000a1e:	701a      	strb	r2, [r3, #0]
  textcolor = textbgcolor = 0xFFFF;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <gfx_init+0x88>)
 8000a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a26:	801a      	strh	r2, [r3, #0]
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <gfx_init+0x88>)
 8000a2a:	881a      	ldrh	r2, [r3, #0]
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <gfx_init+0x8c>)
 8000a2e:	801a      	strh	r2, [r3, #0]
  wrap = true;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <gfx_init+0x90>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
  _cp437 = false;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <gfx_init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
  gfxFont = 0;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <gfx_init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000064 	.word	0x20000064
 8000a50:	2000006c 	.word	0x2000006c
 8000a54:	2000004e 	.word	0x2000004e
 8000a58:	20000068 	.word	0x20000068
 8000a5c:	20000030 	.word	0x20000030
 8000a60:	20000073 	.word	0x20000073
 8000a64:	2000003c 	.word	0x2000003c
 8000a68:	20000070 	.word	0x20000070
 8000a6c:	20000074 	.word	0x20000074
 8000a70:	2000006a 	.word	0x2000006a
 8000a74:	20000052 	.word	0x20000052
 8000a78:	20000038 	.word	0x20000038

08000a7c <gfx_writeLine>:
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4604      	mov	r4, r0
 8000a84:	4608      	mov	r0, r1
 8000a86:	4611      	mov	r1, r2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	807b      	strh	r3, [r7, #2]
 8000a96:	4613      	mov	r3, r2
 8000a98:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000a9a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000aa8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000aac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	1acb      	subs	r3, r1, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	429a      	cmp	r2, r3
 8000abe:	bfcc      	ite	gt
 8000ac0:	2301      	movgt	r3, #1
 8000ac2:	2300      	movle	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8000ac8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00b      	beq.n	8000ae8 <gfx_writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	833b      	strh	r3, [r7, #24]
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	80fb      	strh	r3, [r7, #6]
 8000ad8:	8b3b      	ldrh	r3, [r7, #24]
 8000ada:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	82fb      	strh	r3, [r7, #22]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	807b      	strh	r3, [r7, #2]
 8000ae4:	8afb      	ldrh	r3, [r7, #22]
 8000ae6:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000ae8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000aec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dd0b      	ble.n	8000b0c <gfx_writeLine+0x90>
    _swap_int16_t(x0, x1);
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	82bb      	strh	r3, [r7, #20]
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	8abb      	ldrh	r3, [r7, #20]
 8000afe:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	827b      	strh	r3, [r7, #18]
 8000b04:	883b      	ldrh	r3, [r7, #0]
 8000b06:	80bb      	strh	r3, [r7, #4]
 8000b08:	8a7b      	ldrh	r3, [r7, #18]
 8000b0a:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000b16:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bfb8      	it	lt
 8000b24:	425b      	neglt	r3, r3
 8000b26:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000b28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b2c:	0fda      	lsrs	r2, r3, #31
 8000b2e:	4413      	add	r3, r2
 8000b30:	105b      	asrs	r3, r3, #1
 8000b32:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000b34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b38:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	da02      	bge.n	8000b46 <gfx_writeLine+0xca>
    ystep = 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	83bb      	strh	r3, [r7, #28]
 8000b44:	e031      	b.n	8000baa <gfx_writeLine+0x12e>
  } else {
    ystep = -1;
 8000b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4a:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 8000b4c:	e02d      	b.n	8000baa <gfx_writeLine+0x12e>
    if (steep) {
 8000b4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <gfx_writeLine+0xec>
    	gfx_writePixel(y0, x0, color);
 8000b56:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b58:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f832 	bl	8000bca <gfx_writePixel>
 8000b66:	e007      	b.n	8000b78 <gfx_writeLine+0xfc>
    } else {
    	gfx_writePixel(x0, y0, color);
 8000b68:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f829 	bl	8000bca <gfx_writePixel>
    }
    err -= dy;
 8000b78:	8bfa      	ldrh	r2, [r7, #30]
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8000b82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da09      	bge.n	8000b9e <gfx_writeLine+0x122>
      y0 += ystep;
 8000b8a:	88ba      	ldrh	r2, [r7, #4]
 8000b8c:	8bbb      	ldrh	r3, [r7, #28]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000b94:	8bfa      	ldrh	r2, [r7, #30]
 8000b96:	8a3b      	ldrh	r3, [r7, #16]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 8000b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	ddcb      	ble.n	8000b4e <gfx_writeLine+0xd2>
    }
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}

08000bbe <gfx_startWrite>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void gfx_startWrite() {}
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <gfx_writePixel>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writePixel(int16_t x, int16_t y, uint16_t color) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80fb      	strh	r3, [r7, #6]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	80bb      	strh	r3, [r7, #4]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	807b      	strh	r3, [r7, #2]
	Draw_Pixe(x, y, color);
 8000bdc:	887a      	ldrh	r2, [r7, #2]
 8000bde:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f914 	bl	8001e14 <Draw_Pixe>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <gfx_writeFastVLine>:
    @param    y   Top-most y coordinate
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
	gfx_drawFastVLine(x, y, h, color);
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c18:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c1c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c20:	f000 f846 	bl	8000cb0 <gfx_drawFastVLine>
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}

08000c2c <gfx_writeFastHLine>:
    @param    y   Left-most y coordinate
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
 8000c46:	4613      	mov	r3, r2
 8000c48:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
	gfx_drawFastHLine(x, y, w, color);
 8000c4a:	883b      	ldrh	r3, [r7, #0]
 8000c4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c54:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c58:	f000 f853 	bl	8000d02 <gfx_drawFastHLine>
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <gfx_writeFillRect>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	4603      	mov	r3, r0
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if desired!
	Fill_Rect(x, y, w, h, color);
 8000c82:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000c86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c92:	8b3b      	ldrh	r3, [r7, #24]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	4623      	mov	r3, r4
 8000c98:	f001 f8ec 	bl	8001e74 <Fill_Rect>
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <gfx_endWrite>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void gfx_endWrite() {}
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <gfx_drawFastVLine>:
    @param    y   Top-most y coordinate
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	80fb      	strh	r3, [r7, #6]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80bb      	strh	r3, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	807b      	strh	r3, [r7, #2]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	803b      	strh	r3, [r7, #0]
	gfx_startWrite();
 8000cce:	f7ff ff76 	bl	8000bbe <gfx_startWrite>
    gfx_writeLine(x, y, x, y + h - 1, color);
 8000cd2:	88ba      	ldrh	r2, [r7, #4]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b21c      	sxth	r4, r3
 8000ce0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ce4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ce8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000cec:	883b      	ldrh	r3, [r7, #0]
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	4623      	mov	r3, r4
 8000cf2:	f7ff fec3 	bl	8000a7c <gfx_writeLine>
    gfx_endWrite();
 8000cf6:	f7ff ffd5 	bl	8000ca4 <gfx_endWrite>
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}

08000d02 <gfx_drawFastHLine>:
    @param    y   Left-most y coordinate
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8000d02:	b590      	push	{r4, r7, lr}
 8000d04:	b085      	sub	sp, #20
 8000d06:	af02      	add	r7, sp, #8
 8000d08:	4604      	mov	r4, r0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4623      	mov	r3, r4
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	4603      	mov	r3, r0
 8000d16:	80bb      	strh	r3, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	803b      	strh	r3, [r7, #0]
    gfx_startWrite();
 8000d20:	f7ff ff4d 	bl	8000bbe <gfx_startWrite>
    gfx_writeLine(x, y, x + w - 1, y, color);
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000d36:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4623      	mov	r3, r4
 8000d44:	f7ff fe9a 	bl	8000a7c <gfx_writeLine>
    gfx_endWrite();
 8000d48:	f7ff ffac 	bl	8000ca4 <gfx_endWrite>
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}

08000d54 <gfx_fillScreen>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillScreen(uint16_t color) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
	Fill_Rect(0, 0, _width, _height, color);
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <gfx_fillScreen+0x2c>)
 8000d60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <gfx_fillScreen+0x30>)
 8000d66:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	2100      	movs	r1, #0
 8000d72:	2000      	movs	r0, #0
 8000d74:	f001 f87e 	bl	8001e74 <Fill_Rect>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000064 	.word	0x20000064
 8000d84:	2000006c 	.word	0x2000006c

08000d88 <gfx_drawCircleHelper>:
    @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of
   the circle we're doing
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4623      	mov	r3, r4
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	807b      	strh	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	707b      	strb	r3, [r7, #1]
  int16_t f = 1 - r;
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	f1c3 0301 	rsb	r3, r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	461a      	mov	r2, r3
 8000db8:	03d2      	lsls	r2, r2, #15
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	81fb      	strh	r3, [r7, #14]

  while (x < y) {
 8000dca:	e0a5      	b.n	8000f18 <gfx_drawCircleHelper+0x190>
    if (f >= 0) {
 8000dcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0e      	blt.n	8000df2 <gfx_drawCircleHelper+0x6a>
      y--;
 8000dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000de0:	8a7b      	ldrh	r3, [r7, #18]
 8000de2:	3302      	adds	r3, #2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000de8:	8afa      	ldrh	r2, [r7, #22]
 8000dea:	8a7b      	ldrh	r3, [r7, #18]
 8000dec:	4413      	add	r3, r2
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000df2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000dfe:	8abb      	ldrh	r3, [r7, #20]
 8000e00:	3302      	adds	r3, #2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000e06:	8afa      	ldrh	r2, [r7, #22]
 8000e08:	8abb      	ldrh	r3, [r7, #20]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8000e10:	787b      	ldrb	r3, [r7, #1]
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d01b      	beq.n	8000e52 <gfx_drawCircleHelper+0xca>
    	gfx_writePixel(x0 + x, y0 + y, color);
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	8a3b      	ldrh	r3, [r7, #16]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	b218      	sxth	r0, r3
 8000e24:	88ba      	ldrh	r2, [r7, #4]
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff feca 	bl	8000bca <gfx_writePixel>
    	gfx_writePixel(x0 + y, y0 + x, color);
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b218      	sxth	r0, r3
 8000e40:	88ba      	ldrh	r2, [r7, #4]
 8000e42:	8a3b      	ldrh	r3, [r7, #16]
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff febc 	bl	8000bca <gfx_writePixel>
    }
    if (cornername & 0x2) {
 8000e52:	787b      	ldrb	r3, [r7, #1]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d01b      	beq.n	8000e94 <gfx_drawCircleHelper+0x10c>
    	gfx_writePixel(x0 + x, y0 - y, color);
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	8a3b      	ldrh	r3, [r7, #16]
 8000e60:	4413      	add	r3, r2
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	b218      	sxth	r0, r3
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fea9 	bl	8000bca <gfx_writePixel>
    	gfx_writePixel(x0 + y, y0 - x, color);
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b218      	sxth	r0, r3
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	8a3b      	ldrh	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fe9b 	bl	8000bca <gfx_writePixel>
    }
    if (cornername & 0x8) {
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d01b      	beq.n	8000ed6 <gfx_drawCircleHelper+0x14e>
    	gfx_writePixel(x0 - y, y0 + x, color);
 8000e9e:	88fa      	ldrh	r2, [r7, #6]
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b218      	sxth	r0, r3
 8000ea8:	88ba      	ldrh	r2, [r7, #4]
 8000eaa:	8a3b      	ldrh	r3, [r7, #16]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fe88 	bl	8000bca <gfx_writePixel>
    	gfx_writePixel(x0 - x, y0 + y, color);
 8000eba:	88fa      	ldrh	r2, [r7, #6]
 8000ebc:	8a3b      	ldrh	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b218      	sxth	r0, r3
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fe7a 	bl	8000bca <gfx_writePixel>
    }
    if (cornername & 0x1) {
 8000ed6:	787b      	ldrb	r3, [r7, #1]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d01b      	beq.n	8000f18 <gfx_drawCircleHelper+0x190>
    	gfx_writePixel(x0 - y, y0 - x, color);
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b218      	sxth	r0, r3
 8000eea:	88ba      	ldrh	r2, [r7, #4]
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fe67 	bl	8000bca <gfx_writePixel>
    	gfx_writePixel(x0 - x, y0 - y, color);
 8000efc:	88fa      	ldrh	r2, [r7, #6]
 8000efe:	8a3b      	ldrh	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b218      	sxth	r0, r3
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fe59 	bl	8000bca <gfx_writePixel>
  while (x < y) {
 8000f18:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f6ff af53 	blt.w	8000dcc <gfx_drawCircleHelper+0x44>
    }
  }
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}

08000f2e <gfx_fillCircleHelper>:
    @param  corners  Mask bits indicating which quarters we're doing
    @param  delta    Offset from center-point, used for round-rects
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b087      	sub	sp, #28
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4604      	mov	r4, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4611      	mov	r1, r2
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4623      	mov	r3, r4
 8000f3e:	80fb      	strh	r3, [r7, #6]
 8000f40:	4603      	mov	r3, r0
 8000f42:	80bb      	strh	r3, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	f1c3 0301 	rsb	r3, r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	03d2      	lsls	r2, r2, #15
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8000f70:	8a3b      	ldrh	r3, [r7, #16]
 8000f72:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8000f78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8000f84:	e096      	b.n	80010b4 <gfx_fillCircleHelper+0x186>
    if (f >= 0) {
 8000f86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0e      	blt.n	8000fac <gfx_fillCircleHelper+0x7e>
      y--;
 8000f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000f9a:	8a7b      	ldrh	r3, [r7, #18]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000fa2:	8afa      	ldrh	r2, [r7, #22]
 8000fa4:	8a7b      	ldrh	r3, [r7, #18]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000fac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000fb8:	8abb      	ldrh	r3, [r7, #20]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000fc0:	8afa      	ldrh	r2, [r7, #22]
 8000fc2:	8abb      	ldrh	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	82fb      	strh	r3, [r7, #22]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8000fca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000fce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da31      	bge.n	800103c <gfx_fillCircleHelper+0x10e>
      if (corners & 1)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d013      	beq.n	800100a <gfx_fillCircleHelper+0xdc>
    	  gfx_writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	8a3b      	ldrh	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b218      	sxth	r0, r3
 8000fec:	88ba      	ldrh	r2, [r7, #4]
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b219      	sxth	r1, r3
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ffe:	4413      	add	r3, r2
 8001000:	b29b      	uxth	r3, r3
 8001002:	b21a      	sxth	r2, r3
 8001004:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001006:	f7ff fdf5 	bl	8000bf4 <gfx_writeFastVLine>
      if (corners & 2)
 800100a:	787b      	ldrb	r3, [r7, #1]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <gfx_fillCircleHelper+0x10e>
    	  gfx_writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	8a3b      	ldrh	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	b218      	sxth	r0, r3
 800101e:	88ba      	ldrh	r2, [r7, #4]
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	b29b      	uxth	r3, r3
 8001026:	b219      	sxth	r1, r3
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	b29a      	uxth	r2, r3
 800102e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	b21a      	sxth	r2, r3
 8001036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001038:	f7ff fddc 	bl	8000bf4 <gfx_writeFastVLine>
    }
    if (y != py) {
 800103c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001040:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001044:	429a      	cmp	r2, r3
 8001046:	d033      	beq.n	80010b0 <gfx_fillCircleHelper+0x182>
      if (corners & 1)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d013      	beq.n	800107a <gfx_fillCircleHelper+0x14c>
    	  gfx_writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001052:	88fa      	ldrh	r2, [r7, #6]
 8001054:	897b      	ldrh	r3, [r7, #10]
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	b218      	sxth	r0, r3
 800105c:	88ba      	ldrh	r2, [r7, #4]
 800105e:	89bb      	ldrh	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	b219      	sxth	r1, r3
 8001066:	89bb      	ldrh	r3, [r7, #12]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	b21a      	sxth	r2, r3
 8001074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001076:	f7ff fdbd 	bl	8000bf4 <gfx_writeFastVLine>
      if (corners & 2)
 800107a:	787b      	ldrb	r3, [r7, #1]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <gfx_fillCircleHelper+0x17e>
    	  gfx_writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001084:	88fa      	ldrh	r2, [r7, #6]
 8001086:	897b      	ldrh	r3, [r7, #10]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	b218      	sxth	r0, r3
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	89bb      	ldrh	r3, [r7, #12]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	b219      	sxth	r1, r3
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010a0:	4413      	add	r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010a8:	f7ff fda4 	bl	8000bf4 <gfx_writeFastVLine>
      py = y;
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 80010b0:	8a3b      	ldrh	r3, [r7, #16]
 80010b2:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 80010b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f6ff af62 	blt.w	8000f86 <gfx_fillCircleHelper+0x58>
  }
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}

080010ca <gfx_drawRoundRect>:
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 80010ca:	b590      	push	{r4, r7, lr}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af02      	add	r7, sp, #8
 80010d0:	4604      	mov	r4, r0
 80010d2:	4608      	mov	r0, r1
 80010d4:	4611      	mov	r1, r2
 80010d6:	461a      	mov	r2, r3
 80010d8:	4623      	mov	r3, r4
 80010da:	80fb      	strh	r3, [r7, #6]
 80010dc:	4603      	mov	r3, r0
 80010de:	80bb      	strh	r3, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80010e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	bfa8      	it	ge
 80010f4:	4613      	movge	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	0fda      	lsrs	r2, r3, #31
 80010fa:	4413      	add	r3, r2
 80010fc:	105b      	asrs	r3, r3, #1
 80010fe:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 8001100:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001104:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001108:	429a      	cmp	r2, r3
 800110a:	dd01      	ble.n	8001110 <gfx_drawRoundRect+0x46>
    r = max_radius;
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	843b      	strh	r3, [r7, #32]
  // smarter version
  gfx_startWrite();
 8001110:	f7ff fd55 	bl	8000bbe <gfx_startWrite>
  gfx_writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	8c3b      	ldrh	r3, [r7, #32]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	b218      	sxth	r0, r3
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800112e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001132:	f7ff fd7b 	bl	8000c2c <gfx_writeFastHLine>
  gfx_writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	8c3b      	ldrh	r3, [r7, #32]
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	b218      	sxth	r0, r3
 8001140:	88ba      	ldrh	r2, [r7, #4]
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	3b01      	subs	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	b219      	sxth	r1, r3
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	8c3b      	ldrh	r3, [r7, #32]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21a      	sxth	r2, r3
 800115c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800115e:	f7ff fd65 	bl	8000c2c <gfx_writeFastHLine>
  gfx_writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 8001162:	88ba      	ldrh	r2, [r7, #4]
 8001164:	8c3b      	ldrh	r3, [r7, #32]
 8001166:	4413      	add	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	b219      	sxth	r1, r3
 800116c:	883a      	ldrh	r2, [r7, #0]
 800116e:	8c3b      	ldrh	r3, [r7, #32]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	b29b      	uxth	r3, r3
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	b21a      	sxth	r2, r3
 800117a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800117c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001180:	f7ff fd38 	bl	8000bf4 <gfx_writeFastVLine>
  gfx_writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	3b01      	subs	r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	b218      	sxth	r0, r3
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	8c3b      	ldrh	r3, [r7, #32]
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	b219      	sxth	r1, r3
 800119c:	883a      	ldrh	r2, [r7, #0]
 800119e:	8c3b      	ldrh	r3, [r7, #32]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011ac:	f7ff fd22 	bl	8000bf4 <gfx_writeFastVLine>
  // draw four corners
  gfx_drawCircleHelper(x + r, y + r, r, 1, color);
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	8c3b      	ldrh	r3, [r7, #32]
 80011b4:	4413      	add	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	b218      	sxth	r0, r3
 80011ba:	88ba      	ldrh	r2, [r7, #4]
 80011bc:	8c3b      	ldrh	r3, [r7, #32]
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b219      	sxth	r1, r3
 80011c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80011c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	f7ff fddb 	bl	8000d88 <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	4413      	add	r3, r2
 80011d8:	b29a      	uxth	r2, r3
 80011da:	8c3b      	ldrh	r3, [r7, #32]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b218      	sxth	r0, r3
 80011e6:	88ba      	ldrh	r2, [r7, #4]
 80011e8:	8c3b      	ldrh	r3, [r7, #32]
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b219      	sxth	r1, r3
 80011f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80011f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2302      	movs	r3, #2
 80011fa:	f7ff fdc5 	bl	8000d88 <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4413      	add	r3, r2
 8001204:	b29a      	uxth	r2, r3
 8001206:	8c3b      	ldrh	r3, [r7, #32]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	3b01      	subs	r3, #1
 800120e:	b29b      	uxth	r3, r3
 8001210:	b218      	sxth	r0, r3
 8001212:	88ba      	ldrh	r2, [r7, #4]
 8001214:	883b      	ldrh	r3, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	b29a      	uxth	r2, r3
 800121a:	8c3b      	ldrh	r3, [r7, #32]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	3b01      	subs	r3, #1
 8001222:	b29b      	uxth	r3, r3
 8001224:	b219      	sxth	r1, r3
 8001226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800122a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2304      	movs	r3, #4
 8001230:	f7ff fdaa 	bl	8000d88 <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8001234:	88fa      	ldrh	r2, [r7, #6]
 8001236:	8c3b      	ldrh	r3, [r7, #32]
 8001238:	4413      	add	r3, r2
 800123a:	b29b      	uxth	r3, r3
 800123c:	b218      	sxth	r0, r3
 800123e:	88ba      	ldrh	r2, [r7, #4]
 8001240:	883b      	ldrh	r3, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	8c3b      	ldrh	r3, [r7, #32]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	b219      	sxth	r1, r3
 8001252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2308      	movs	r3, #8
 800125c:	f7ff fd94 	bl	8000d88 <gfx_drawCircleHelper>
  gfx_endWrite();
 8001260:	f7ff fd20 	bl	8000ca4 <gfx_endWrite>
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bd90      	pop	{r4, r7, pc}

0800126c <gfx_fillRoundRect>:
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void gfx_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af02      	add	r7, sp, #8
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	4603      	mov	r3, r0
 8001280:	80bb      	strh	r3, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]
 8001286:	4613      	mov	r3, r2
 8001288:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800128a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800128e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001292:	4293      	cmp	r3, r2
 8001294:	bfa8      	it	ge
 8001296:	4613      	movge	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	0fda      	lsrs	r2, r3, #31
 800129c:	4413      	add	r3, r2
 800129e:	105b      	asrs	r3, r3, #1
 80012a0:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 80012a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80012a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dd01      	ble.n	80012b2 <gfx_fillRoundRect+0x46>
    r = max_radius;
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	843b      	strh	r3, [r7, #32]
  // smarter version
  gfx_startWrite();
 80012b2:	f7ff fc84 	bl	8000bbe <gfx_startWrite>
  gfx_writeFillRect(x + r, y, w - 2 * r, h, color);
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	8c3b      	ldrh	r3, [r7, #32]
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b218      	sxth	r0, r3
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	8c3b      	ldrh	r3, [r7, #32]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 80012d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4623      	mov	r3, r4
 80012dc:	f7ff fcc2 	bl	8000c64 <gfx_writeFillRect>
  // draw four corners
  gfx_fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	4413      	add	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8c3b      	ldrh	r3, [r7, #32]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b218      	sxth	r0, r3
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	8c3b      	ldrh	r3, [r7, #32]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b219      	sxth	r1, r3
 80012fe:	883a      	ldrh	r2, [r7, #0]
 8001300:	8c3b      	ldrh	r3, [r7, #32]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21b      	sxth	r3, r3
 8001310:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001314:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001316:	9201      	str	r2, [sp, #4]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	4622      	mov	r2, r4
 800131e:	f7ff fe06 	bl	8000f2e <gfx_fillCircleHelper>
  gfx_fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001322:	88fa      	ldrh	r2, [r7, #6]
 8001324:	8c3b      	ldrh	r3, [r7, #32]
 8001326:	4413      	add	r3, r2
 8001328:	b29b      	uxth	r3, r3
 800132a:	b218      	sxth	r0, r3
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	8c3b      	ldrh	r3, [r7, #32]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	b219      	sxth	r1, r3
 8001336:	883a      	ldrh	r2, [r7, #0]
 8001338:	8c3b      	ldrh	r3, [r7, #32]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b01      	subs	r3, #1
 8001344:	b29b      	uxth	r3, r3
 8001346:	b21b      	sxth	r3, r3
 8001348:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800134c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800134e:	9201      	str	r2, [sp, #4]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2302      	movs	r3, #2
 8001354:	4622      	mov	r2, r4
 8001356:	f7ff fdea 	bl	8000f2e <gfx_fillCircleHelper>
  gfx_endWrite();
 800135a:	f7ff fca3 	bl	8000ca4 <gfx_endWrite>
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
	...

08001368 <gfx_drawChar1>:
   no background)
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void gfx_drawChar1(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08d      	sub	sp, #52	; 0x34
 800136c:	af02      	add	r7, sp, #8
 800136e:	4604      	mov	r4, r0
 8001370:	4608      	mov	r0, r1
 8001372:	4611      	mov	r1, r2
 8001374:	461a      	mov	r2, r3
 8001376:	4623      	mov	r3, r4
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	4603      	mov	r3, r0
 800137c:	80bb      	strh	r3, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
 8001382:	4613      	mov	r3, r2
 8001384:	803b      	strh	r3, [r7, #0]

  if (!gfxFont) { // 'Classic' built-in font
 8001386:	4bb8      	ldr	r3, [pc, #736]	; (8001668 <gfx_drawChar1+0x300>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 8126 	bne.w	80015dc <gfx_drawChar1+0x274>

    if ((x >= _width) ||              // Clip right
 8001390:	4bb6      	ldr	r3, [pc, #728]	; (800166c <gfx_drawChar1+0x304>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	f280 81ec 	bge.w	8001778 <gfx_drawChar1+0x410>
        (y >= _height) ||             // Clip bottom
 80013a0:	4bb3      	ldr	r3, [pc, #716]	; (8001670 <gfx_drawChar1+0x308>)
 80013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    if ((x >= _width) ||              // Clip right
 80013a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f280 81e4 	bge.w	8001778 <gfx_drawChar1+0x410>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80013b0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013b4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	440b      	add	r3, r1
 80013c2:	3b01      	subs	r3, #1
        (y >= _height) ||             // Clip bottom
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f2c0 81d7 	blt.w	8001778 <gfx_drawChar1+0x410>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 80013ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f2c0 81cd 	blt.w	8001778 <gfx_drawChar1+0x410>
      return;

    if (!_cp437 && (c >= 176))
 80013de:	4ba5      	ldr	r3, [pc, #660]	; (8001674 <gfx_drawChar1+0x30c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	f083 0301 	eor.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <gfx_drawChar1+0x90>
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2baf      	cmp	r3, #175	; 0xaf
 80013f0:	d902      	bls.n	80013f8 <gfx_drawChar1+0x90>
      c++; // Handle 'classic' charset behavior
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	3301      	adds	r3, #1
 80013f6:	70fb      	strb	r3, [r7, #3]

    gfx_startWrite();
 80013f8:	f7ff fbe1 	bl	8000bbe <gfx_startWrite>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001402:	e0b1      	b.n	8001568 <gfx_drawChar1+0x200>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	441a      	add	r2, r3
 800140c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001410:	4413      	add	r3, r2
 8001412:	4a99      	ldr	r2, [pc, #612]	; (8001678 <gfx_drawChar1+0x310>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800141a:	2300      	movs	r3, #0
 800141c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001420:	e096      	b.n	8001550 <gfx_drawChar1+0x1e8>
        if (line & 1) {
 8001422:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <gfx_drawChar1+0x148>
          if (size_x == 1 && size_y == 1)
 800142e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d116      	bne.n	8001464 <gfx_drawChar1+0xfc>
 8001436:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800143a:	2b01      	cmp	r3, #1
 800143c:	d112      	bne.n	8001464 <gfx_drawChar1+0xfc>
        	  gfx_writePixel(x + i, y + j, color);
 800143e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001442:	b29a      	uxth	r2, r3
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4413      	add	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	b218      	sxth	r0, r3
 800144c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001450:	b29a      	uxth	r2, r3
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21b      	sxth	r3, r3
 800145a:	883a      	ldrh	r2, [r7, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbb4 	bl	8000bca <gfx_writePixel>
 8001462:	e069      	b.n	8001538 <gfx_drawChar1+0x1d0>
          else
        	  gfx_writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8001464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001468:	b29b      	uxth	r3, r3
 800146a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800146e:	b292      	uxth	r2, r2
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	b29a      	uxth	r2, r3
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4413      	add	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	b218      	sxth	r0, r3
 800147e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001482:	b29b      	uxth	r3, r3
 8001484:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001488:	b292      	uxth	r2, r2
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	b29a      	uxth	r2, r3
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	b29b      	uxth	r3, r3
 8001496:	b219      	sxth	r1, r3
 8001498:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800149c:	b21a      	sxth	r2, r3
 800149e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014a2:	b21c      	sxth	r4, r3
 80014a4:	883b      	ldrh	r3, [r7, #0]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4623      	mov	r3, r4
 80014aa:	f7ff fbdb 	bl	8000c64 <gfx_writeFillRect>
 80014ae:	e043      	b.n	8001538 <gfx_drawChar1+0x1d0>
                          color);
        } else if (bg != color) {
 80014b0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80014b2:	883b      	ldrh	r3, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d03f      	beq.n	8001538 <gfx_drawChar1+0x1d0>
          if (size_x == 1 && size_y == 1)
 80014b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d116      	bne.n	80014ee <gfx_drawChar1+0x186>
 80014c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d112      	bne.n	80014ee <gfx_drawChar1+0x186>
        	  gfx_writePixel(x + i, y + j, bg);
 80014c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b218      	sxth	r0, r3
 80014d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb6f 	bl	8000bca <gfx_writePixel>
 80014ec:	e024      	b.n	8001538 <gfx_drawChar1+0x1d0>
          else
        	  gfx_writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80014ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80014f8:	b292      	uxth	r2, r2
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	b29a      	uxth	r2, r3
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	b218      	sxth	r0, r3
 8001508:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800150c:	b29b      	uxth	r3, r3
 800150e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001512:	b292      	uxth	r2, r2
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	b29a      	uxth	r2, r3
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	b219      	sxth	r1, r3
 8001522:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001526:	b21a      	sxth	r2, r3
 8001528:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800152c:	b21c      	sxth	r4, r3
 800152e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4623      	mov	r3, r4
 8001534:	f7ff fb96 	bl	8000c64 <gfx_writeFillRect>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001538:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001546:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001550:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001554:	2b07      	cmp	r3, #7
 8001556:	f77f af64 	ble.w	8001422 <gfx_drawChar1+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800155a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800156c:	2b04      	cmp	r3, #4
 800156e:	f77f af49 	ble.w	8001404 <gfx_drawChar1+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8001572:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001574:	883b      	ldrh	r3, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d02d      	beq.n	80015d6 <gfx_drawChar1+0x26e>
      if (size_x == 1 && size_y == 1)
 800157a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800157e:	2b01      	cmp	r3, #1
 8001580:	d10e      	bne.n	80015a0 <gfx_drawChar1+0x238>
 8001582:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10a      	bne.n	80015a0 <gfx_drawChar1+0x238>
    	  gfx_writeFastVLine(x + 5, y, 8, bg);
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	3305      	adds	r3, #5
 800158e:	b29b      	uxth	r3, r3
 8001590:	b218      	sxth	r0, r3
 8001592:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001594:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001598:	2208      	movs	r2, #8
 800159a:	f7ff fb2b 	bl	8000bf4 <gfx_writeFastVLine>
 800159e:	e01a      	b.n	80015d6 <gfx_drawChar1+0x26e>
      else
    	  gfx_writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80015a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b218      	sxth	r0, r3
 80015b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b21c      	sxth	r4, r3
 80015c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4623      	mov	r3, r4
 80015d2:	f7ff fb47 	bl	8000c64 <gfx_writeFillRect>
    }
    gfx_endWrite();
 80015d6:	f7ff fb65 	bl	8000ca4 <gfx_endWrite>
 80015da:	e0ce      	b.n	800177a <gfx_drawChar1+0x412>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <gfx_drawChar1+0x300>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3308      	adds	r3, #8
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	70fb      	strb	r3, [r7, #3]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <gfx_drawChar1+0x300>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f9aa 	bl	800094c <pgm_read_glyph_ptr>
 80015f8:	6178      	str	r0, [r7, #20]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <gfx_drawChar1+0x300>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f9b4 	bl	800096c <pgm_read_bitmap_ptr>
 8001604:	6138      	str	r0, [r7, #16]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	847b      	strh	r3, [r7, #34]	; 0x22
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	73bb      	strb	r3, [r7, #14]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3305      	adds	r3, #5
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	737b      	strb	r3, [r7, #13]
           yo = pgm_read_byte(&glyph->yOffset);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3306      	adds	r3, #6
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	733b      	strb	r3, [r7, #12]
    uint8_t xx, yy, bits = 0, bit = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
 800162c:	2300      	movs	r3, #0
 800162e:	77bb      	strb	r3, [r7, #30]
    int16_t xo16 = 0, yo16 = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	83bb      	strh	r3, [r7, #28]
 8001634:	2300      	movs	r3, #0
 8001636:	837b      	strh	r3, [r7, #26]

    if (size_x > 1 || size_y > 1) {
 8001638:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d803      	bhi.n	8001648 <gfx_drawChar1+0x2e0>
 8001640:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001644:	2b01      	cmp	r3, #1
 8001646:	d905      	bls.n	8001654 <gfx_drawChar1+0x2ec>
      xo16 = xo;
 8001648:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800164c:	83bb      	strh	r3, [r7, #28]
      yo16 = yo;
 800164e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001652:	837b      	strh	r3, [r7, #26]
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    gfx_startWrite();
 8001654:	f7ff fab3 	bl	8000bbe <gfx_startWrite>
    for (yy = 0; yy < h; yy++) {
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3020 	strb.w	r3, [r7, #32]
 800165e:	e082      	b.n	8001766 <gfx_drawChar1+0x3fe>
      for (xx = 0; xx < w; xx++) {
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001666:	e074      	b.n	8001752 <gfx_drawChar1+0x3ea>
 8001668:	20000038 	.word	0x20000038
 800166c:	20000064 	.word	0x20000064
 8001670:	2000006c 	.word	0x2000006c
 8001674:	20000052 	.word	0x20000052
 8001678:	08003f6c 	.word	0x08003f6c
        if (!(bit++ & 7)) {
 800167c:	7fbb      	ldrb	r3, [r7, #30]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	77ba      	strb	r2, [r7, #30]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <gfx_drawChar1+0x332>
          bits = pgm_read_byte(&bitmap[bo++]);
 800168a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	847a      	strh	r2, [r7, #34]	; 0x22
 8001690:	461a      	mov	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	77fb      	strb	r3, [r7, #31]
        }
        if (bits & 0x80) {
 800169a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da4f      	bge.n	8001742 <gfx_drawChar1+0x3da>
          if (size_x == 1 && size_y == 1) {
 80016a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d120      	bne.n	80016ec <gfx_drawChar1+0x384>
 80016aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d11c      	bne.n	80016ec <gfx_drawChar1+0x384>
            gfx_writePixel(x + xo + xx, y + yo + yy, color);
 80016b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b218      	sxth	r0, r3
 80016ca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	883a      	ldrh	r2, [r7, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa70 	bl	8000bca <gfx_writePixel>
 80016ea:	e02a      	b.n	8001742 <gfx_drawChar1+0x3da>
          } else {
            gfx_writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80016ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80016f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80016fc:	b292      	uxth	r2, r2
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	b29a      	uxth	r2, r3
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	4413      	add	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	b218      	sxth	r0, r3
 800170c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001710:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001714:	4413      	add	r3, r2
 8001716:	b29b      	uxth	r3, r3
 8001718:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800171c:	b292      	uxth	r2, r2
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	b219      	sxth	r1, r3
 800172c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001730:	b21a      	sxth	r2, r3
 8001732:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001736:	b21c      	sxth	r4, r3
 8001738:	883b      	ldrh	r3, [r7, #0]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4623      	mov	r3, r4
 800173e:	f7ff fa91 	bl	8000c64 <gfx_writeFillRect>
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	77fb      	strb	r3, [r7, #31]
      for (xx = 0; xx < w; xx++) {
 8001748:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800174c:	3301      	adds	r3, #1
 800174e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001752:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	429a      	cmp	r2, r3
 800175a:	d38f      	bcc.n	800167c <gfx_drawChar1+0x314>
    for (yy = 0; yy < h; yy++) {
 800175c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001760:	3301      	adds	r3, #1
 8001762:	f887 3020 	strb.w	r3, [r7, #32]
 8001766:	f897 2020 	ldrb.w	r2, [r7, #32]
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	429a      	cmp	r2, r3
 800176e:	f4ff af77 	bcc.w	8001660 <gfx_drawChar1+0x2f8>
      }
    }
    gfx_endWrite();
 8001772:	f7ff fa97 	bl	8000ca4 <gfx_endWrite>
 8001776:	e000      	b.n	800177a <gfx_drawChar1+0x412>
      return;
 8001778:	bf00      	nop

  } // End classic vs custom font
}
 800177a:	372c      	adds	r7, #44	; 0x2c
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <gfx_write>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
void gfx_write(uint8_t c) {
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af04      	add	r7, sp, #16
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if (!gfxFont) { // 'Classic' built-in font
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <gfx_write+0x230>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d167      	bne.n	8001862 <gfx_write+0xe2>

    if (c == '\n') {              // Newline?
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b0a      	cmp	r3, #10
 8001796:	d111      	bne.n	80017bc <gfx_write+0x3c>
      cursor_x = 0;               // Reset x to zero,
 8001798:	4b86      	ldr	r3, [pc, #536]	; (80019b4 <gfx_write+0x234>)
 800179a:	2200      	movs	r2, #0
 800179c:	801a      	strh	r2, [r3, #0]
      cursor_y += textsize_y * 8; // advance y one line
 800179e:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <gfx_write+0x238>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b84      	ldr	r3, [pc, #528]	; (80019bc <gfx_write+0x23c>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <gfx_write+0x23c>)
 80017b8:	801a      	strh	r2, [r3, #0]
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
}
 80017ba:	e0f4      	b.n	80019a6 <gfx_write+0x226>
    } else if (c != '\r') {       // Ignore carriage returns
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b0d      	cmp	r3, #13
 80017c0:	f000 80f1 	beq.w	80019a6 <gfx_write+0x226>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80017c4:	4b7e      	ldr	r3, [pc, #504]	; (80019c0 <gfx_write+0x240>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d021      	beq.n	8001810 <gfx_write+0x90>
 80017cc:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <gfx_write+0x234>)
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <gfx_write+0x244>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	4a78      	ldr	r2, [pc, #480]	; (80019c8 <gfx_write+0x248>)
 80017e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	dd10      	ble.n	8001810 <gfx_write+0x90>
        cursor_x = 0;                                       // Reset x to zero,
 80017ee:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <gfx_write+0x234>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // advance y one line
 80017f4:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <gfx_write+0x238>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <gfx_write+0x23c>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <gfx_write+0x23c>)
 800180e:	801a      	strh	r2, [r3, #0]
      gfx_drawChar1(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <gfx_write+0x234>)
 8001812:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001816:	4b69      	ldr	r3, [pc, #420]	; (80019bc <gfx_write+0x23c>)
 8001818:	f9b3 4000 	ldrsh.w	r4, [r3]
 800181c:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <gfx_write+0x24c>)
 800181e:	881e      	ldrh	r6, [r3, #0]
 8001820:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <gfx_write+0x250>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <gfx_write+0x244>)
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	4963      	ldr	r1, [pc, #396]	; (80019b8 <gfx_write+0x238>)
 800182a:	7809      	ldrb	r1, [r1, #0]
 800182c:	79fd      	ldrb	r5, [r7, #7]
 800182e:	9102      	str	r1, [sp, #8]
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4633      	mov	r3, r6
 8001836:	462a      	mov	r2, r5
 8001838:	4621      	mov	r1, r4
 800183a:	f7ff fd95 	bl	8001368 <gfx_drawChar1>
      cursor_x += textsize_x * 6; // Advance x one char
 800183e:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <gfx_write+0x244>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	0052      	lsls	r2, r2, #1
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <gfx_write+0x234>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	b21a      	sxth	r2, r3
 800185c:	4b55      	ldr	r3, [pc, #340]	; (80019b4 <gfx_write+0x234>)
 800185e:	801a      	strh	r2, [r3, #0]
}
 8001860:	e0a1      	b.n	80019a6 <gfx_write+0x226>
    if (c == '\n') {
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b0a      	cmp	r3, #10
 8001866:	d117      	bne.n	8001898 <gfx_write+0x118>
      cursor_x = 0;
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <gfx_write+0x234>)
 800186a:	2200      	movs	r2, #0
 800186c:	801a      	strh	r2, [r3, #0]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800186e:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <gfx_write+0x238>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <gfx_write+0x230>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	320c      	adds	r2, #12
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	b292      	uxth	r2, r2
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	b29a      	uxth	r2, r3
      cursor_y +=
 8001884:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <gfx_write+0x23c>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	b21a      	sxth	r2, r3
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <gfx_write+0x23c>)
 8001894:	801a      	strh	r2, [r3, #0]
}
 8001896:	e086      	b.n	80019a6 <gfx_write+0x226>
    } else if (c != '\r') {
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b0d      	cmp	r3, #13
 800189c:	f000 8083 	beq.w	80019a6 <gfx_write+0x226>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <gfx_write+0x230>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3308      	adds	r3, #8
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d379      	bcc.n	80019a6 <gfx_write+0x226>
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <gfx_write+0x230>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	330a      	adds	r3, #10
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d872      	bhi.n	80019a6 <gfx_write+0x226>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80018c0:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <gfx_write+0x230>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f83d 	bl	800094c <pgm_read_glyph_ptr>
 80018d2:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	78db      	ldrb	r3, [r3, #3]
 80018de:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04c      	beq.n	8001980 <gfx_write+0x200>
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d049      	beq.n	8001980 <gfx_write+0x200>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3305      	adds	r3, #5
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <gfx_write+0x240>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d029      	beq.n	8001952 <gfx_write+0x1d2>
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <gfx_write+0x234>)
 8001900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001904:	4619      	mov	r1, r3
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <gfx_write+0x244>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4413      	add	r3, r2
 8001914:	fb03 f300 	mul.w	r3, r3, r0
 8001918:	440b      	add	r3, r1
 800191a:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <gfx_write+0x248>)
 800191c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001920:	4293      	cmp	r3, r2
 8001922:	dd16      	ble.n	8001952 <gfx_write+0x1d2>
            cursor_x = 0;
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <gfx_write+0x234>)
 8001926:	2200      	movs	r2, #0
 8001928:	801a      	strh	r2, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <gfx_write+0x238>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8001930:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <gfx_write+0x230>)
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	320c      	adds	r2, #12
 8001936:	7812      	ldrb	r2, [r2, #0]
 8001938:	b292      	uxth	r2, r2
            cursor_y += (int16_t)textsize_y *
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <gfx_write+0x23c>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4413      	add	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <gfx_write+0x23c>)
 8001950:	801a      	strh	r2, [r3, #0]
          gfx_drawChar1(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <gfx_write+0x234>)
 8001954:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <gfx_write+0x23c>)
 800195a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <gfx_write+0x24c>)
 8001960:	881e      	ldrh	r6, [r3, #0]
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <gfx_write+0x250>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <gfx_write+0x244>)
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	4913      	ldr	r1, [pc, #76]	; (80019b8 <gfx_write+0x238>)
 800196c:	7809      	ldrb	r1, [r1, #0]
 800196e:	79fd      	ldrb	r5, [r7, #7]
 8001970:	9102      	str	r1, [sp, #8]
 8001972:	9201      	str	r2, [sp, #4]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4633      	mov	r3, r6
 8001978:	462a      	mov	r2, r5
 800197a:	4621      	mov	r1, r4
 800197c:	f7ff fcf4 	bl	8001368 <gfx_drawChar1>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	3304      	adds	r3, #4
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <gfx_write+0x244>)
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	b292      	uxth	r2, r2
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	b29a      	uxth	r2, r3
        cursor_x +=
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <gfx_write+0x234>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <gfx_write+0x234>)
 80019a4:	801a      	strh	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000038 	.word	0x20000038
 80019b4:	20000068 	.word	0x20000068
 80019b8:	20000073 	.word	0x20000073
 80019bc:	20000030 	.word	0x20000030
 80019c0:	2000006a 	.word	0x2000006a
 80019c4:	2000003c 	.word	0x2000003c
 80019c8:	20000064 	.word	0x20000064
 80019cc:	20000074 	.word	0x20000074
 80019d0:	20000070 	.word	0x20000070

080019d4 <gfx_print>:

void gfx_print(char * prt){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	while(*prt!=0){
 80019dc:	e007      	b.n	80019ee <gfx_print+0x1a>
		gfx_write(*prt);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fecc 	bl	8001780 <gfx_write>
		prt++;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
	while(*prt!=0){
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f3      	bne.n	80019de <gfx_print+0xa>
	}
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <gfx_setTextSize1>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void gfx_setTextSize1(uint8_t s_x, uint8_t s_y) {
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
  textsize_x = (s_x > 0) ? s_x : 1;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <gfx_setTextSize1+0x1a>
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	e000      	b.n	8001a1c <gfx_setTextSize1+0x1c>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <gfx_setTextSize1+0x3c>)
 8001a1e:	7013      	strb	r3, [r2, #0]
  textsize_y = (s_y > 0) ? s_y : 1;
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <gfx_setTextSize1+0x2a>
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	e000      	b.n	8001a2c <gfx_setTextSize1+0x2c>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <gfx_setTextSize1+0x40>)
 8001a2e:	7013      	strb	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000003c 	.word	0x2000003c
 8001a40:	20000073 	.word	0x20000073

08001a44 <gfx_setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void gfx_setFont(const GFXfont *f) {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if (f) {          // Font struct pointer passed in?
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <gfx_setFont+0x2a>
    if (!gfxFont) { // And no current font struct?
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <gfx_setFont+0x54>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d116      	bne.n	8001a88 <gfx_setFont+0x44>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <gfx_setFont+0x58>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3306      	adds	r3, #6
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <gfx_setFont+0x58>)
 8001a6a:	801a      	strh	r2, [r3, #0]
 8001a6c:	e00c      	b.n	8001a88 <gfx_setFont+0x44>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <gfx_setFont+0x54>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <gfx_setFont+0x44>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <gfx_setFont+0x58>)
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b06      	subs	r3, #6
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <gfx_setFont+0x58>)
 8001a86:	801a      	strh	r2, [r3, #0]
  }
  gfxFont = (GFXfont *)f;
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <gfx_setFont+0x54>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000038 	.word	0x20000038
 8001a9c:	20000030 	.word	0x20000030

08001aa0 <gfx_btn_initButton>:
   @param    textsize The font magnification of the label text
*/
/**************************************************************************/
// Classic initButton() function: pass center & size
void gfx_btn_initButton(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t outline, uint16_t fill, uint16_t textcolor,
                                     char *label, uint8_t textsize) {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af06      	add	r7, sp, #24
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	80fb      	strh	r3, [r7, #6]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80bb      	strh	r3, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]
 8001aba:	4613      	mov	r3, r2
 8001abc:	803b      	strh	r3, [r7, #0]
  // Tweak arguments and pass to the newer initButtonUL() function...
	gfx_btn_initButtonUL( x - (w / 2), y - (h / 2), w, h, outline, fill, textcolor, label, textsize);
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b218      	sxth	r0, r3
 8001acc:	88ba      	ldrh	r2, [r7, #4]
 8001ace:	883b      	ldrh	r3, [r7, #0]
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b219      	sxth	r1, r3
 8001ada:	883c      	ldrh	r4, [r7, #0]
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	9303      	str	r3, [sp, #12]
 8001ae8:	8c3b      	ldrh	r3, [r7, #32]
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	8b3b      	ldrh	r3, [r7, #24]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4623      	mov	r3, r4
 8001af6:	f000 f804 	bl	8001b02 <gfx_btn_initButtonUL>
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}

08001b02 <gfx_btn_initButtonUL>:
/**************************************************************************/
void gfx_btn_initButtonUL( int16_t x1,
                                       int16_t y1, uint16_t w, uint16_t h,
                                       uint16_t outline, uint16_t fill,
                                       uint16_t textcolor, char *label,
                                       uint8_t textsize) {
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b089      	sub	sp, #36	; 0x24
 8001b06:	af06      	add	r7, sp, #24
 8001b08:	4604      	mov	r4, r0
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4623      	mov	r3, r4
 8001b12:	80fb      	strh	r3, [r7, #6]
 8001b14:	4603      	mov	r3, r0
 8001b16:	80bb      	strh	r3, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	803b      	strh	r3, [r7, #0]
	gfx_btn_initButtonUL1( x1, y1, w, h, outline, fill, textcolor, label, textsize,
 8001b20:	883c      	ldrh	r4, [r7, #0]
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b30:	9305      	str	r3, [sp, #20]
 8001b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b36:	9304      	str	r3, [sp, #16]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	9303      	str	r3, [sp, #12]
 8001b3c:	8c3b      	ldrh	r3, [r7, #32]
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	8bbb      	ldrh	r3, [r7, #28]
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	8b3b      	ldrh	r3, [r7, #24]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4623      	mov	r3, r4
 8001b4a:	f000 f805 	bl	8001b58 <gfx_btn_initButtonUL1>
               textsize);
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
	...

08001b58 <gfx_btn_initButtonUL1>:
/**************************************************************************/
void gfx_btn_initButtonUL1( int16_t x1,
                                       int16_t y1, uint16_t w, uint16_t h,
                                       uint16_t outline, uint16_t fill,
                                       uint16_t textcolor, char *label,
                                       uint8_t textsize_x, uint8_t textsize_y) {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4623      	mov	r3, r4
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80bb      	strh	r3, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	803b      	strh	r3, [r7, #0]
  _x1 = x1;
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <gfx_btn_initButtonUL1+0x6c>)
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	8013      	strh	r3, [r2, #0]
  _y1 = y1;
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <gfx_btn_initButtonUL1+0x70>)
 8001b7e:	88bb      	ldrh	r3, [r7, #4]
 8001b80:	8013      	strh	r3, [r2, #0]
  _w = w;
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <gfx_btn_initButtonUL1+0x74>)
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	8013      	strh	r3, [r2, #0]
  _h = h;
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <gfx_btn_initButtonUL1+0x78>)
 8001b8a:	883b      	ldrh	r3, [r7, #0]
 8001b8c:	8013      	strh	r3, [r2, #0]
  _outlinecolor = outline;
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <gfx_btn_initButtonUL1+0x7c>)
 8001b90:	8b3b      	ldrh	r3, [r7, #24]
 8001b92:	8013      	strh	r3, [r2, #0]
  _fillcolor = fill;
 8001b94:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <gfx_btn_initButtonUL1+0x80>)
 8001b96:	8bbb      	ldrh	r3, [r7, #28]
 8001b98:	8013      	strh	r3, [r2, #0]
  _textcolor = textcolor;
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <gfx_btn_initButtonUL1+0x84>)
 8001b9c:	8c3b      	ldrh	r3, [r7, #32]
 8001b9e:	8013      	strh	r3, [r2, #0]
  _textsize_x = textsize_x;
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <gfx_btn_initButtonUL1+0x88>)
 8001ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ba6:	7013      	strb	r3, [r2, #0]
  _textsize_y = textsize_y;
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <gfx_btn_initButtonUL1+0x8c>)
 8001baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bae:	7013      	strb	r3, [r2, #0]

  strncpy(_label, label, 9);
 8001bb0:	2209      	movs	r2, #9
 8001bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <gfx_btn_initButtonUL1+0x90>)
 8001bb6:	f002 f997 	bl	8003ee8 <strncpy>
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000062 	.word	0x20000062
 8001bc8:	20000066 	.word	0x20000066
 8001bcc:	20000040 	.word	0x20000040
 8001bd0:	20000036 	.word	0x20000036
 8001bd4:	20000034 	.word	0x20000034
 8001bd8:	20000050 	.word	0x20000050
 8001bdc:	20000060 	.word	0x20000060
 8001be0:	20000032 	.word	0x20000032
 8001be4:	2000006e 	.word	0x2000006e
 8001be8:	20000044 	.word	0x20000044
 8001bec:	00000000 	.word	0x00000000

08001bf0 <gfx_btn_drawButton>:
   @brief    Draw the button on the screen
   @param    inverted Whether to draw with fill/text swapped to indicate
   'pressed'
*/
/**************************************************************************/
void gfx_btn_drawButton(bool inverted) {
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  uint16_t fill, outline, text;

  if (!inverted) {
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <gfx_btn_drawButton+0x2a>
    fill = _fillcolor;
 8001c06:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <gfx_btn_drawButton+0x1c8>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	81fb      	strh	r3, [r7, #14]
    outline = _outlinecolor;
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <gfx_btn_drawButton+0x1cc>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	81bb      	strh	r3, [r7, #12]
    text = _textcolor;
 8001c12:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <gfx_btn_drawButton+0x1d0>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	817b      	strh	r3, [r7, #10]
 8001c18:	e008      	b.n	8001c2c <gfx_btn_drawButton+0x3c>
  } else {
    fill = _textcolor;
 8001c1a:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <gfx_btn_drawButton+0x1d0>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	81fb      	strh	r3, [r7, #14]
    outline = _outlinecolor;
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <gfx_btn_drawButton+0x1cc>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	81bb      	strh	r3, [r7, #12]
    text = _fillcolor;
 8001c26:	4b64      	ldr	r3, [pc, #400]	; (8001db8 <gfx_btn_drawButton+0x1c8>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	817b      	strh	r3, [r7, #10]
  }

  uint8_t r = min(_w, _h) / 4; // Corner radius
 8001c2c:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <gfx_btn_drawButton+0x1d4>)
 8001c2e:	881a      	ldrh	r2, [r3, #0]
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <gfx_btn_drawButton+0x1d8>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <gfx_btn_drawButton+0x58>
 8001c38:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <gfx_btn_drawButton+0x1d4>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da00      	bge.n	8001c42 <gfx_btn_drawButton+0x52>
 8001c40:	3303      	adds	r3, #3
 8001c42:	109b      	asrs	r3, r3, #2
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	e006      	b.n	8001c56 <gfx_btn_drawButton+0x66>
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <gfx_btn_drawButton+0x1d8>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da00      	bge.n	8001c52 <gfx_btn_drawButton+0x62>
 8001c50:	3303      	adds	r3, #3
 8001c52:	109b      	asrs	r3, r3, #2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	727b      	strb	r3, [r7, #9]
  gfx_fillRoundRect(_x1, _y1, _w, _h, r, fill);
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <gfx_btn_drawButton+0x1dc>)
 8001c5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <gfx_btn_drawButton+0x1e0>)
 8001c60:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <gfx_btn_drawButton+0x1d4>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <gfx_btn_drawButton+0x1d8>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b21d      	sxth	r5, r3
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	89fa      	ldrh	r2, [r7, #14]
 8001c76:	9201      	str	r2, [sp, #4]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	f7ff faf5 	bl	800126c <gfx_fillRoundRect>
  gfx_drawRoundRect(_x1, _y1, _w, _h, r, outline);
 8001c82:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <gfx_btn_drawButton+0x1dc>)
 8001c84:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <gfx_btn_drawButton+0x1e0>)
 8001c8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <gfx_btn_drawButton+0x1d4>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b21c      	sxth	r4, r3
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <gfx_btn_drawButton+0x1d8>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b21d      	sxth	r5, r3
 8001c9a:	7a7b      	ldrb	r3, [r7, #9]
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	89ba      	ldrh	r2, [r7, #12]
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	f7ff fa0f 	bl	80010ca <gfx_drawRoundRect>

  gfx_setCursor(_x1 + (_w / 3.5) - (strlen(_label) * 3 * _textsize_x),
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <gfx_btn_drawButton+0x1dc>)
 8001cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fba6 	bl	8000404 <__aeabi_i2d>
 8001cb8:	4604      	mov	r4, r0
 8001cba:	460d      	mov	r5, r1
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <gfx_btn_drawButton+0x1d4>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fb9f 	bl	8000404 <__aeabi_i2d>
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <gfx_btn_drawButton+0x1e4>)
 8001ccc:	f7fe fd2e 	bl	800072c <__aeabi_ddiv>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fa48 	bl	800016c <__adddf3>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	4625      	mov	r5, r4
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	483c      	ldr	r0, [pc, #240]	; (8001dd8 <gfx_btn_drawButton+0x1e8>)
 8001ce6:	f7fe fa33 	bl	8000150 <strlen>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <gfx_btn_drawButton+0x1ec>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	fb03 f202 	mul.w	r2, r3, r2
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fb72 	bl	80003e4 <__aeabi_ui2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fa2e 	bl	8000168 <__aeabi_dsub>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	f7fe fdf2 	bl	80008fc <__aeabi_d2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b21c      	sxth	r4, r3
                  _y1 + (_h / 1.6) - (4 * _textsize_y));
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <gfx_btn_drawButton+0x1e0>)
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fb6e 	bl	8000404 <__aeabi_i2d>
 8001d28:	4605      	mov	r5, r0
 8001d2a:	460e      	mov	r6, r1
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <gfx_btn_drawButton+0x1d8>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fb67 	bl	8000404 <__aeabi_i2d>
 8001d36:	a31e      	add	r3, pc, #120	; (adr r3, 8001db0 <gfx_btn_drawButton+0x1c0>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fcf6 	bl	800072c <__aeabi_ddiv>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4628      	mov	r0, r5
 8001d46:	4631      	mov	r1, r6
 8001d48:	f7fe fa10 	bl	800016c <__adddf3>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4615      	mov	r5, r2
 8001d52:	461e      	mov	r6, r3
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <gfx_btn_drawButton+0x1f0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb52 	bl	8000404 <__aeabi_i2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4628      	mov	r0, r5
 8001d66:	4631      	mov	r1, r6
 8001d68:	f7fe f9fe 	bl	8000168 <__aeabi_dsub>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
  gfx_setCursor(_x1 + (_w / 3.5) - (strlen(_label) * 3 * _textsize_x),
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fdc2 	bl	80008fc <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7fe fe00 	bl	8000984 <gfx_setCursor>
  gfx_setTextColor(text);
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fe14 	bl	80009b4 <gfx_setTextColor>
  gfx_setTextSize1(_textsize_x, _textsize_y);
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <gfx_btn_drawButton+0x1ec>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <gfx_btn_drawButton+0x1f0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f7ff fe32 	bl	8001a00 <gfx_setTextSize1>
  gfx_print(_label);
 8001d9c:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <gfx_btn_drawButton+0x1e8>)
 8001d9e:	f7ff fe19 	bl	80019d4 <gfx_print>
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	f3af 8000 	nop.w
 8001db0:	9999999a 	.word	0x9999999a
 8001db4:	3ff99999 	.word	0x3ff99999
 8001db8:	20000050 	.word	0x20000050
 8001dbc:	20000034 	.word	0x20000034
 8001dc0:	20000060 	.word	0x20000060
 8001dc4:	20000040 	.word	0x20000040
 8001dc8:	20000036 	.word	0x20000036
 8001dcc:	20000062 	.word	0x20000062
 8001dd0:	20000066 	.word	0x20000066
 8001dd4:	400c0000 	.word	0x400c0000
 8001dd8:	20000044 	.word	0x20000044
 8001ddc:	20000032 	.word	0x20000032
 8001de0:	2000006e 	.word	0x2000006e

08001de4 <Get_Width>:



//get lcd width
int16_t Get_Width(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	return lcddev.width;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <Get_Width+0x14>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b21b      	sxth	r3, r3
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000078 	.word	0x20000078

08001dfc <Get_Height>:

//get lcd height
int16_t Get_Height(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	return lcddev.height;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <Get_Height+0x14>)
 8001e02:	885b      	ldrh	r3, [r3, #2]
 8001e04:	b21b      	sxth	r3, r3
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000078 	.word	0x20000078

08001e14 <Draw_Pixe>:


//set x,y  coordinate and color to draw a pixel point
void Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	80bb      	strh	r3, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	807b      	strh	r3, [r7, #2]
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
 8001e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db1e      	blt.n	8001e6c <Draw_Pixe+0x58>
 8001e2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db1a      	blt.n	8001e6c <Draw_Pixe+0x58>
 8001e36:	f7ff ffd5 	bl	8001de4 <Get_Width>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	4293      	cmp	r3, r2
 8001e44:	dc12      	bgt.n	8001e6c <Draw_Pixe+0x58>
 8001e46:	f7ff ffd9 	bl	8001dfc <Get_Height>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e52:	4293      	cmp	r3, r2
 8001e54:	dc0a      	bgt.n	8001e6c <Draw_Pixe+0x58>
	{
		return;
	}
	LCD_SetWindows(x, y, x, y);
 8001e56:	88f8      	ldrh	r0, [r7, #6]
 8001e58:	88b9      	ldrh	r1, [r7, #4]
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	88bb      	ldrh	r3, [r7, #4]
 8001e5e:	f000 fa4b 	bl	80022f8 <LCD_SetWindows>
	Lcd_WriteData_16Bit(color);
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f901 	bl	800206c <Lcd_WriteData_16Bit>
 8001e6a:	e000      	b.n	8001e6e <Draw_Pixe+0x5a>
		return;
 8001e6c:	bf00      	nop
}
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <Fill_Rect>:

//fill area from x to x+w,y to y+h
void Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	80fb      	strh	r3, [r7, #6]
 8001e86:	4603      	mov	r3, r0
 8001e88:	80bb      	strh	r3, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	803b      	strh	r3, [r7, #0]
	int16_t end;
	if (w < 0)
 8001e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da08      	bge.n	8001eac <Fill_Rect+0x38>
	{
        w = -w;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	425b      	negs	r3, r3
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	807b      	strh	r3, [r7, #2]
        x -= w;
 8001ea2:	88fa      	ldrh	r2, [r7, #6]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8001eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da01      	bge.n	8001ec2 <Fill_Rect+0x4e>
    {
        x = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	80fb      	strh	r3, [r7, #6]
    }
    if (end > Get_Width())
 8001ec2:	f7ff ff8f 	bl	8001de4 <Get_Width>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	dd03      	ble.n	8001eda <Fill_Rect+0x66>
    {
        end = Get_Width();
 8001ed2:	f7ff ff87 	bl	8001de4 <Get_Width>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	81fb      	strh	r3, [r7, #14]
    }
    w = end - x;
 8001eda:	89fa      	ldrh	r2, [r7, #14]
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	807b      	strh	r3, [r7, #2]
    if (h < 0)
 8001ee4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da08      	bge.n	8001efe <Fill_Rect+0x8a>
	{
        h = -h;
 8001eec:	883b      	ldrh	r3, [r7, #0]
 8001eee:	425b      	negs	r3, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	803b      	strh	r3, [r7, #0]
        y -= h;
 8001ef4:	88ba      	ldrh	r2, [r7, #4]
 8001ef6:	883b      	ldrh	r3, [r7, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8001efe:	88ba      	ldrh	r2, [r7, #4]
 8001f00:	883b      	ldrh	r3, [r7, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8001f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da01      	bge.n	8001f14 <Fill_Rect+0xa0>
    {
        y = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	80bb      	strh	r3, [r7, #4]
    }
    if (end > Get_Height())
 8001f14:	f7ff ff72 	bl	8001dfc <Get_Height>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	dd03      	ble.n	8001f2c <Fill_Rect+0xb8>
    {
        end = Get_Height();
 8001f24:	f7ff ff6a 	bl	8001dfc <Get_Height>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	81fb      	strh	r3, [r7, #14]
    }
    h = end - y;
 8001f2c:	89fa      	ldrh	r2, [r7, #14]
 8001f2e:	88bb      	ldrh	r3, [r7, #4]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	803b      	strh	r3, [r7, #0]
    LCD_SetWindows(x, y, x + w - 1, y + h - 1);//set area
 8001f36:	88f8      	ldrh	r0, [r7, #6]
 8001f38:	88b9      	ldrh	r1, [r7, #4]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29c      	uxth	r4, r3
 8001f46:	88ba      	ldrh	r2, [r7, #4]
 8001f48:	883b      	ldrh	r3, [r7, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4622      	mov	r2, r4
 8001f54:	f000 f9d0 	bl	80022f8 <LCD_SetWindows>
	if (h > w)
 8001f58:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001f5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dd14      	ble.n	8001f8e <Fill_Rect+0x11a>
	{
        end = h;
 8001f64:	883b      	ldrh	r3, [r7, #0]
 8001f66:	81fb      	strh	r3, [r7, #14]
        h = w;
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	803b      	strh	r3, [r7, #0]
        w = end;
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	807b      	strh	r3, [r7, #2]
    }
	while (h-- > 0)
 8001f70:	e00d      	b.n	8001f8e <Fill_Rect+0x11a>
	{
		end = w;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	81fb      	strh	r3, [r7, #14]
		do
		{
			Lcd_WriteData_16Bit(color);//set color data
 8001f76:	8c3b      	ldrh	r3, [r7, #32]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f877 	bl	800206c <Lcd_WriteData_16Bit>
        } while (--end != 0);
 8001f7e:	89fb      	ldrh	r3, [r7, #14]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	81fb      	strh	r3, [r7, #14]
 8001f86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f3      	bne.n	8001f76 <Fill_Rect+0x102>
	while (h-- > 0)
 8001f8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	3a01      	subs	r2, #1
 8001f96:	b292      	uxth	r2, r2
 8001f98:	803a      	strh	r2, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	dce9      	bgt.n	8001f72 <Fill_Rect+0xfe>
	}
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}
	...

08001fa8 <LCD_write>:
//������ɫ,������ɫ
u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
u16 DeviceCode;	 

void LCD_write(u16 VAL)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
	//LCD_CS_CLR;
	DATAOUT(VAL);
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <LCD_write+0x2c>)
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2104      	movs	r1, #4
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <LCD_write+0x30>)
 8001fbe:	f001 f807 	bl	8002fd0 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <LCD_write+0x30>)
 8001fc8:	f001 f802 	bl	8002fd0 <HAL_GPIO_WritePin>
	//LCD_CS_SET;
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40010800 	.word	0x40010800

08001fdc <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <LCD_WR_REG+0x24>)
 8001fec:	f000 fff0 	bl	8002fd0 <HAL_GPIO_WritePin>
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ffd8 	bl	8001fa8 <LCD_write>
	 #endif
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010800 	.word	0x40010800

08002004 <LCD_WR_DATA>:
 * @function   :Write an 16-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u16 data)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
	 LCD_RS_SET;
 800200e:	2201      	movs	r2, #1
 8002010:	2102      	movs	r1, #2
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <LCD_WR_DATA+0x24>)
 8002014:	f000 ffdc 	bl	8002fd0 <HAL_GPIO_WritePin>
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ffc4 	bl	8001fa8 <LCD_write>
	 #endif
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40010800 	.word	0x40010800

0800202c <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	4613      	mov	r3, r2
 800203a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffcc 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffdc 	bl	8002004 <LCD_WR_DATA>
}	   
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <LCD_WriteRAM_Prepare+0x14>)
 800205a:	891b      	ldrh	r3, [r3, #8]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ffbd 	bl	8001fdc <LCD_WR_REG>
}	 
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000078 	.word	0x20000078

0800206c <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 8002076:	2201      	movs	r2, #1
 8002078:	2102      	movs	r1, #2
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <Lcd_WriteData_16Bit+0x24>)
 800207c:	f000 ffa8 	bl	8002fd0 <HAL_GPIO_WritePin>
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff90 	bl	8001fa8 <LCD_write>
	 #endif
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010800 	.word	0x40010800

08002094 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
  LCD_CS_CLR;
 800209e:	2200      	movs	r2, #0
 80020a0:	2110      	movs	r1, #16
 80020a2:	4814      	ldr	r0, [pc, #80]	; (80020f4 <LCD_Clear+0x60>)
 80020a4:	f000 ff94 	bl	8002fd0 <HAL_GPIO_WritePin>
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <LCD_Clear+0x64>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <LCD_Clear+0x64>)
 80020b2:	885b      	ldrh	r3, [r3, #2]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2100      	movs	r1, #0
 80020ba:	2000      	movs	r0, #0
 80020bc:	f000 f91c 	bl	80022f8 <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e006      	b.n	80020d4 <LCD_Clear+0x40>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ffcf 	bl	800206c <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3301      	adds	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <LCD_Clear+0x64>)
 80020d6:	885b      	ldrh	r3, [r3, #2]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <LCD_Clear+0x64>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	fb03 f302 	mul.w	r3, r3, r2
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d3ed      	bcc.n	80020c6 <LCD_Clear+0x32>
	//	}
	}
} 
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40010800 	.word	0x40010800
 80020f8:	20000078 	.word	0x20000078

080020fc <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8002100:	2200      	movs	r2, #0
 8002102:	2108      	movs	r1, #8
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <LCD_RESET+0x28>)
 8002106:	f000 ff63 	bl	8002fd0 <HAL_GPIO_WritePin>
	delay_ms(100);	
 800210a:	2064      	movs	r0, #100	; 0x64
 800210c:	f000 fc60 	bl	80029d0 <HAL_Delay>
	LCD_RST_SET;
 8002110:	2201      	movs	r2, #1
 8002112:	2108      	movs	r1, #8
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <LCD_RESET+0x28>)
 8002116:	f000 ff5b 	bl	8002fd0 <HAL_GPIO_WritePin>
	delay_ms(50);
 800211a:	2032      	movs	r0, #50	; 0x32
 800211c:	f000 fc58 	bl	80029d0 <HAL_Delay>
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40010800 	.word	0x40010800

08002128 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	LCD_RESET(); //LCD ��λ
 800212c:	f7ff ffe6 	bl	80020fc <LCD_RESET>
//************* ILI9486��ʼ��**********//	
	LCD_WR_REG(0XF1);
 8002130:	20f1      	movs	r0, #241	; 0xf1
 8002132:	f7ff ff53 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x36);
 8002136:	2036      	movs	r0, #54	; 0x36
 8002138:	f7ff ff64 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 800213c:	2004      	movs	r0, #4
 800213e:	f7ff ff61 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff ff5e 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002148:	203c      	movs	r0, #60	; 0x3c
 800214a:	f7ff ff5b 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0X0F);
 800214e:	200f      	movs	r0, #15
 8002150:	f7ff ff58 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x8F);
 8002154:	208f      	movs	r0, #143	; 0x8f
 8002156:	f7ff ff55 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0XF2);
 800215a:	20f2      	movs	r0, #242	; 0xf2
 800215c:	f7ff ff3e 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x18);
 8002160:	2018      	movs	r0, #24
 8002162:	f7ff ff4f 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0xA3);
 8002166:	20a3      	movs	r0, #163	; 0xa3
 8002168:	f7ff ff4c 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 800216c:	2012      	movs	r0, #18
 800216e:	f7ff ff49 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002172:	2002      	movs	r0, #2
 8002174:	f7ff ff46 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0XB2);
 8002178:	20b2      	movs	r0, #178	; 0xb2
 800217a:	f7ff ff43 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 800217e:	2012      	movs	r0, #18
 8002180:	f7ff ff40 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);
 8002184:	20ff      	movs	r0, #255	; 0xff
 8002186:	f7ff ff3d 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800218a:	2010      	movs	r0, #16
 800218c:	f7ff ff3a 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff ff37 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0XF8);
 8002196:	20f8      	movs	r0, #248	; 0xf8
 8002198:	f7ff ff20 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x21);
 800219c:	2021      	movs	r0, #33	; 0x21
 800219e:	f7ff ff31 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 80021a2:	2004      	movs	r0, #4
 80021a4:	f7ff ff2e 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0XF9);
 80021a8:	20f9      	movs	r0, #249	; 0xf9
 80021aa:	f7ff ff17 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff ff28 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80021b4:	2008      	movs	r0, #8
 80021b6:	f7ff ff25 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0x36);
 80021ba:	2036      	movs	r0, #54	; 0x36
 80021bc:	f7ff ff0e 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 80021c0:	2008      	movs	r0, #8
 80021c2:	f7ff ff1f 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0xB4);
 80021c6:	20b4      	movs	r0, #180	; 0xb4
 80021c8:	f7ff ff08 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff ff19 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);
 80021d2:	20c1      	movs	r0, #193	; 0xc1
 80021d4:	f7ff ff02 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x41);
 80021d8:	2041      	movs	r0, #65	; 0x41
 80021da:	f7ff ff13 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);
 80021de:	20c5      	movs	r0, #197	; 0xc5
 80021e0:	f7ff fefc 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff ff0d 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x91);
 80021ea:	2091      	movs	r0, #145	; 0x91
 80021ec:	f7ff ff0a 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x80);
 80021f0:	2080      	movs	r0, #128	; 0x80
 80021f2:	f7ff ff07 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff ff04 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);
 80021fc:	20e0      	movs	r0, #224	; 0xe0
 80021fe:	f7ff feed 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002202:	200f      	movs	r0, #15
 8002204:	f7ff fefe 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 8002208:	201f      	movs	r0, #31
 800220a:	f7ff fefb 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x1C);
 800220e:	201c      	movs	r0, #28
 8002210:	f7ff fef8 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8002214:	200c      	movs	r0, #12
 8002216:	f7ff fef5 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800221a:	200f      	movs	r0, #15
 800221c:	f7ff fef2 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002220:	2008      	movs	r0, #8
 8002222:	f7ff feef 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 8002226:	2048      	movs	r0, #72	; 0x48
 8002228:	f7ff feec 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x98);
 800222c:	2098      	movs	r0, #152	; 0x98
 800222e:	f7ff fee9 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8002232:	2037      	movs	r0, #55	; 0x37
 8002234:	f7ff fee6 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002238:	200a      	movs	r0, #10
 800223a:	f7ff fee3 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 800223e:	2013      	movs	r0, #19
 8002240:	f7ff fee0 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8002244:	2004      	movs	r0, #4
 8002246:	f7ff fedd 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800224a:	2011      	movs	r0, #17
 800224c:	f7ff feda 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8002250:	200d      	movs	r0, #13
 8002252:	f7ff fed7 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002256:	2000      	movs	r0, #0
 8002258:	f7ff fed4 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0xE1);
 800225c:	20e1      	movs	r0, #225	; 0xe1
 800225e:	f7ff febd 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002262:	200f      	movs	r0, #15
 8002264:	f7ff fece 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x32);
 8002268:	2032      	movs	r0, #50	; 0x32
 800226a:	f7ff fecb 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 800226e:	202e      	movs	r0, #46	; 0x2e
 8002270:	f7ff fec8 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8002274:	200b      	movs	r0, #11
 8002276:	f7ff fec5 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 800227a:	200d      	movs	r0, #13
 800227c:	f7ff fec2 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002280:	2005      	movs	r0, #5
 8002282:	f7ff febf 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x47);
 8002286:	2047      	movs	r0, #71	; 0x47
 8002288:	f7ff febc 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x75);
 800228c:	2075      	movs	r0, #117	; 0x75
 800228e:	f7ff feb9 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8002292:	2037      	movs	r0, #55	; 0x37
 8002294:	f7ff feb6 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002298:	2006      	movs	r0, #6
 800229a:	f7ff feb3 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800229e:	2010      	movs	r0, #16
 80022a0:	f7ff feb0 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f7ff fead 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 80022aa:	2024      	movs	r0, #36	; 0x24
 80022ac:	f7ff feaa 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x20);
 80022b0:	2020      	movs	r0, #32
 80022b2:	f7ff fea7 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff fea4 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80022bc:	203a      	movs	r0, #58	; 0x3a
 80022be:	f7ff fe8d 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80022c2:	2055      	movs	r0, #85	; 0x55
 80022c4:	f7ff fe9e 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_REG(0x11);
 80022c8:	2011      	movs	r0, #17
 80022ca:	f7ff fe87 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_REG(0x36);
 80022ce:	2036      	movs	r0, #54	; 0x36
 80022d0:	f7ff fe84 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(0x28);
 80022d4:	2028      	movs	r0, #40	; 0x28
 80022d6:	f7ff fe95 	bl	8002004 <LCD_WR_DATA>
	delay_ms(120);
 80022da:	2078      	movs	r0, #120	; 0x78
 80022dc:	f000 fb78 	bl	80029d0 <HAL_Delay>
	LCD_WR_REG(0x29);
 80022e0:	2029      	movs	r0, #41	; 0x29
 80022e2:	f7ff fe7b 	bl	8001fdc <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 80022e6:	2001      	movs	r0, #1
 80022e8:	f000 f858 	bl	800239c <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(GRAY);//��ȫ����ɫ
 80022ec:	f248 4030 	movw	r0, #33840	; 0x8430
 80022f0:	f7ff fed0 	bl	8002094 <LCD_Clear>
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4604      	mov	r4, r0
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	80fb      	strh	r3, [r7, #6]
 800230a:	4603      	mov	r3, r0
 800230c:	80bb      	strh	r3, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]
 8002312:	4613      	mov	r3, r2
 8002314:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <LCD_SetWindows+0xa0>)
 8002318:	895b      	ldrh	r3, [r3, #10]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe5e 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fe6c 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	b29b      	uxth	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fe66 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fe60 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	b29b      	uxth	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe5a 	bl	8002004 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <LCD_SetWindows+0xa0>)
 8002352:	899b      	ldrh	r3, [r3, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe41 	bl	8001fdc <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 800235a:	88bb      	ldrh	r3, [r7, #4]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe4f 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe49 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 8002372:	883b      	ldrh	r3, [r7, #0]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fe43 	bl	8002004 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 800237e:	883b      	ldrh	r3, [r7, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe3d 	bl	8002004 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 800238a:	f7ff fe63 	bl	8002054 <LCD_WriteRAM_Prepare>
}   
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	20000078 	.word	0x20000078

0800239c <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <LCD_direction+0xac>)
 80023a8:	222a      	movs	r2, #42	; 0x2a
 80023aa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <LCD_direction+0xac>)
 80023ae:	222b      	movs	r2, #43	; 0x2b
 80023b0:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <LCD_direction+0xac>)
 80023b4:	222c      	movs	r2, #44	; 0x2c
 80023b6:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d83e      	bhi.n	800243c <LCD_direction+0xa0>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <LCD_direction+0x28>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080023ef 	.word	0x080023ef
 80023cc:	08002409 	.word	0x08002409
 80023d0:	08002423 	.word	0x08002423
		case 0:						 	 		
			lcddev.width=LCD_W;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <LCD_direction+0xac>)
 80023d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023da:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <LCD_direction+0xac>)
 80023de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023e2:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<6)|(1<<3));//0 degree MY=0,MX=0,MV=0,ML=0,BGR=1,MH=0
 80023e4:	2148      	movs	r1, #72	; 0x48
 80023e6:	2036      	movs	r0, #54	; 0x36
 80023e8:	f7ff fe20 	bl	800202c <LCD_WriteReg>
		break;
 80023ec:	e027      	b.n	800243e <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <LCD_direction+0xac>)
 80023f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023f4:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <LCD_direction+0xac>)
 80023f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023fc:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<4)|(1<<5));//90 degree MY=0,MX=1,MV=1,ML=1,BGR=1,MH=0
 80023fe:	2138      	movs	r1, #56	; 0x38
 8002400:	2036      	movs	r0, #54	; 0x36
 8002402:	f7ff fe13 	bl	800202c <LCD_WriteReg>
		break;
 8002406:	e01a      	b.n	800243e <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <LCD_direction+0xac>)
 800240a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800240e:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <LCD_direction+0xac>)
 8002412:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002416:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7));//180 degree MY=1,MX=1,MV=0,ML=0,BGR=1,MH=0
 8002418:	2188      	movs	r1, #136	; 0x88
 800241a:	2036      	movs	r0, #54	; 0x36
 800241c:	f7ff fe06 	bl	800202c <LCD_WriteReg>
		break;
 8002420:	e00d      	b.n	800243e <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <LCD_direction+0xac>)
 8002424:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002428:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <LCD_direction+0xac>)
 800242c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002430:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6)|(1<<7));//270 degree MY=1,MX=0,MV=1,ML=0,BGR=1,MH=0
 8002432:	21e8      	movs	r1, #232	; 0xe8
 8002434:	2036      	movs	r0, #54	; 0x36
 8002436:	f7ff fdf9 	bl	800202c <LCD_WriteReg>
		break;	
 800243a:	e000      	b.n	800243e <LCD_direction+0xa2>
		default:break;
 800243c:	bf00      	nop
	}		
}	 
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000078 	.word	0x20000078

0800244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002452:	f000 fa5b 	bl	800290c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002456:	f000 f889 	bl	800256c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800245a:	f000 f8f3 	bl	8002644 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800245e:	f000 f8c7 	bl	80025f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8002462:	f7ff fe61 	bl	8002128 <LCD_Init>
//  Show_Str(110,75,BLACK,LIGHTGREEN,"pH 7",16,0);
//  Show_Str(330,75,BLACK,GREEN,"pH 8",16,0);
//  Show_Str(110,185,BLACK,0x36B9,"pH 9",16,0);
//  Show_Str(330,185,BLACK,BLUE,"pH 10",16,0);

  gfx_init(LCD_H,LCD_W);
 8002466:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800246a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800246e:	f7fe fab7 	bl	80009e0 <gfx_init>
  gfx_fillScreen(BLACK);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe fc6e 	bl	8000d54 <gfx_fillScreen>
  gfx_setFont(&FreeMonoBold18pt7b);
 8002478:	4835      	ldr	r0, [pc, #212]	; (8002550 <main+0x104>)
 800247a:	f7ff fae3 	bl	8001a44 <gfx_setFont>
  gfx_setTextColor(WHITE);
 800247e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002482:	f7fe fa97 	bl	80009b4 <gfx_setTextColor>
  gfx_setCursor(120, 40);
 8002486:	2128      	movs	r1, #40	; 0x28
 8002488:	2078      	movs	r0, #120	; 0x78
 800248a:	f7fe fa7b 	bl	8000984 <gfx_setCursor>
  gfx_print("Manthan Jal");
 800248e:	4831      	ldr	r0, [pc, #196]	; (8002554 <main+0x108>)
 8002490:	f7ff faa0 	bl	80019d4 <gfx_print>
  gfx_btn_initButton(140,120,150,80,BLACK,LIGHTGREEN,WHITE,"pH 8",1);
 8002494:	2301      	movs	r3, #1
 8002496:	9304      	str	r3, [sp, #16]
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <main+0x10c>)
 800249a:	9303      	str	r3, [sp, #12]
 800249c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	f248 431f 	movw	r3, #33823	; 0x841f
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2350      	movs	r3, #80	; 0x50
 80024ae:	2296      	movs	r2, #150	; 0x96
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	208c      	movs	r0, #140	; 0x8c
 80024b4:	f7ff faf4 	bl	8001aa0 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fb99 	bl	8001bf0 <gfx_btn_drawButton>
  gfx_btn_initButton(350,120,150,80,BLACK,0x658C,WHITE,"pH 9",1);
 80024be:	2301      	movs	r3, #1
 80024c0:	9304      	str	r3, [sp, #16]
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <main+0x110>)
 80024c4:	9303      	str	r3, [sp, #12]
 80024c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	f246 538c 	movw	r3, #25996	; 0x658c
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2300      	movs	r3, #0
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2350      	movs	r3, #80	; 0x50
 80024d8:	2296      	movs	r2, #150	; 0x96
 80024da:	2178      	movs	r1, #120	; 0x78
 80024dc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80024e0:	f7ff fade 	bl	8001aa0 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7ff fb83 	bl	8001bf0 <gfx_btn_drawButton>
  gfx_btn_initButton(140,230,150,80,BLACK,0x36B9,WHITE,"pH 10",1);
 80024ea:	2301      	movs	r3, #1
 80024ec:	9304      	str	r3, [sp, #16]
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <main+0x114>)
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	f243 63b9 	movw	r3, #14009	; 0x36b9
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2350      	movs	r3, #80	; 0x50
 8002504:	2296      	movs	r2, #150	; 0x96
 8002506:	21e6      	movs	r1, #230	; 0xe6
 8002508:	208c      	movs	r0, #140	; 0x8c
 800250a:	f7ff fac9 	bl	8001aa0 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff fb6e 	bl	8001bf0 <gfx_btn_drawButton>
  gfx_btn_initButton(350,230,150,80,BLACK,BLUE,WHITE,"pH 11",1);
 8002514:	2301      	movs	r3, #1
 8002516:	9304      	str	r3, [sp, #16]
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <main+0x118>)
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	231f      	movs	r3, #31
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2350      	movs	r3, #80	; 0x50
 800252c:	2296      	movs	r2, #150	; 0x96
 800252e:	21e6      	movs	r1, #230	; 0xe6
 8002530:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002534:	f7ff fab4 	bl	8001aa0 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff fb59 	bl	8001bf0 <gfx_btn_drawButton>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800253e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002542:	4809      	ldr	r0, [pc, #36]	; (8002568 <main+0x11c>)
 8002544:	f000 fd5c 	bl	8003000 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002548:	2064      	movs	r0, #100	; 0x64
 800254a:	f000 fa41 	bl	80029d0 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800254e:	e7f6      	b.n	800253e <main+0xf2>
 8002550:	0800564c 	.word	0x0800564c
 8002554:	08003f2c 	.word	0x08003f2c
 8002558:	08003f38 	.word	0x08003f38
 800255c:	08003f40 	.word	0x08003f40
 8002560:	08003f48 	.word	0x08003f48
 8002564:	08003f50 	.word	0x08003f50
 8002568:	40011000 	.word	0x40011000

0800256c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b090      	sub	sp, #64	; 0x40
 8002570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002572:	f107 0318 	add.w	r3, r7, #24
 8002576:	2228      	movs	r2, #40	; 0x28
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fcac 	bl	8003ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002592:	2301      	movs	r3, #1
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002596:	2310      	movs	r3, #16
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800259a:	2302      	movs	r3, #2
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800259e:	2300      	movs	r3, #0
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80025a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd41 	bl	8003034 <HAL_RCC_OscConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80025b8:	f000 f8bc 	bl	8002734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025bc:	230f      	movs	r3, #15
 80025be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c0:	2302      	movs	r3, #2
 80025c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 ffac 	bl	8003534 <HAL_RCC_ClockConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80025e2:	f000 f8a7 	bl	8002734 <Error_Handler>
  }
}
 80025e6:	bf00      	nop
 80025e8:	3740      	adds	r7, #64	; 0x40
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_USART1_UART_Init+0x4c>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <MX_USART1_UART_Init+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <MX_USART1_UART_Init+0x4c>)
 80025fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_USART1_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_USART1_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_USART1_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_USART1_UART_Init+0x4c>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_USART1_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_USART1_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_USART1_UART_Init+0x4c>)
 8002628:	f001 f922 	bl	8003870 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002632:	f000 f87f 	bl	8002734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000088 	.word	0x20000088
 8002640:	40013800 	.word	0x40013800

08002644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <MX_GPIO_Init+0xe0>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <MX_GPIO_Init+0xe0>)
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <MX_GPIO_Init+0xe0>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <MX_GPIO_Init+0xe0>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <MX_GPIO_Init+0xe0>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <MX_GPIO_Init+0xe0>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <MX_GPIO_Init+0xe0>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <MX_GPIO_Init+0xe0>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <MX_GPIO_Init+0xe0>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a6:	4820      	ldr	r0, [pc, #128]	; (8002728 <MX_GPIO_Init+0xe4>)
 80026a8:	f000 fc92 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80026ac:	2200      	movs	r2, #0
 80026ae:	211e      	movs	r1, #30
 80026b0:	481e      	ldr	r0, [pc, #120]	; (800272c <MX_GPIO_Init+0xe8>)
 80026b2:	f000 fc8d 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin
 80026b6:	2200      	movs	r2, #0
 80026b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026bc:	481c      	ldr	r0, [pc, #112]	; (8002730 <MX_GPIO_Init+0xec>)
 80026be:	f000 fc87 	bl	8002fd0 <HAL_GPIO_WritePin>
                          |LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin|LCD_D14_Pin
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4619      	mov	r1, r3
 80026da:	4813      	ldr	r0, [pc, #76]	; (8002728 <MX_GPIO_Init+0xe4>)
 80026dc:	f000 fb1e 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_WR_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80026e0:	231e      	movs	r3, #30
 80026e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4619      	mov	r1, r3
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <MX_GPIO_Init+0xe8>)
 80026f8:	f000 fb10 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D10_Pin
                           LCD_D11_Pin LCD_D12_Pin LCD_D13_Pin LCD_D14_Pin
                           LCD_D15_Pin LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin LCD_D8_Pin LCD_D9_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin
 80026fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002700:	613b      	str	r3, [r7, #16]
                          |LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin|LCD_D14_Pin
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	4619      	mov	r1, r3
 8002714:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_GPIO_Init+0xec>)
 8002716:	f000 fb01 	bl	8002d1c <HAL_GPIO_Init>

}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40011000 	.word	0x40011000
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00

08002734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_MspInit+0x5c>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_MspInit+0x5c>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6193      	str	r3, [r2, #24]
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_MspInit+0x5c>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_MspInit+0x5c>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_MspInit+0x5c>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_MspInit+0x5c>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_MspInit+0x60>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_MspInit+0x60>)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010000 	.word	0x40010000

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a20      	ldr	r2, [pc, #128]	; (8002840 <HAL_UART_MspInit+0x9c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d139      	bne.n	8002838 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_UART_MspInit+0xa0>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_UART_MspInit+0xa0>)
 80027ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_UART_MspInit+0xa0>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_UART_MspInit+0xa0>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_UART_MspInit+0xa0>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_UART_MspInit+0xa0>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	4619      	mov	r1, r3
 8002808:	480f      	ldr	r0, [pc, #60]	; (8002848 <HAL_UART_MspInit+0xa4>)
 800280a:	f000 fa87 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800280e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4619      	mov	r1, r3
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <HAL_UART_MspInit+0xa4>)
 8002824:	f000 fa7a 	bl	8002d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	2025      	movs	r0, #37	; 0x25
 800282e:	f000 f9c8 	bl	8002bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002832:	2025      	movs	r0, #37	; 0x25
 8002834:	f000 f9e1 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002838:	bf00      	nop
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40013800 	.word	0x40013800
 8002844:	40021000 	.word	0x40021000
 8002848:	40010800 	.word	0x40010800

0800284c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285c:	e7fe      	b.n	800285c <HardFault_Handler+0x4>

0800285e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <MemManage_Handler+0x4>

08002864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <BusFault_Handler+0x4>

0800286a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <UsageFault_Handler+0x4>

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002898:	f000 f87e 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <USART1_IRQHandler+0x10>)
 80028a6:	f001 f831 	bl	800390c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000088 	.word	0x20000088

080028b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028c2:	e003      	b.n	80028cc <LoopCopyDataInit>

080028c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80028c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80028c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80028ca:	3104      	adds	r1, #4

080028cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028cc:	480a      	ldr	r0, [pc, #40]	; (80028f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028d4:	d3f6      	bcc.n	80028c4 <CopyDataInit>
  ldr r2, =_sbss
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028d8:	e002      	b.n	80028e0 <LoopFillZerobss>

080028da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028dc:	f842 3b04 	str.w	r3, [r2], #4

080028e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028e4:	d3f9      	bcc.n	80028da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028e6:	f7ff ffe5 	bl	80028b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ea:	f001 fad1 	bl	8003e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ee:	f7ff fdad 	bl	800244c <main>
  bx lr
 80028f2:	4770      	bx	lr
  ldr r3, =_sidata
 80028f4:	0800567c 	.word	0x0800567c
  ldr r0, =_sdata
 80028f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002900:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002904:	200000cc 	.word	0x200000cc

08002908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <ADC1_2_IRQHandler>
	...

0800290c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_Init+0x28>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_Init+0x28>)
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291c:	2003      	movs	r0, #3
 800291e:	f000 f945 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002922:	2000      	movs	r0, #0
 8002924:	f000 f808 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002928:	f7ff ff0a 	bl	8002740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f95d 	bl	8002c16 <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f000 f925 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000000 	.word	0x20000000
 8002990:	20000008 	.word	0x20000008
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_IncTick+0x1c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_IncTick+0x20>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <HAL_IncTick+0x20>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000008 	.word	0x20000008
 80029b8:	200000c8 	.word	0x200000c8

080029bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <HAL_GetTick+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	200000c8 	.word	0x200000c8

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff fff0 	bl	80029bc <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_Delay+0x40>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffe0 	bl	80029bc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000008 	.word	0x20000008

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4906      	ldr	r1, [pc, #24]	; (8002aac <__NVIC_EnableIRQ+0x34>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff90 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff2d 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff42 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff90 	bl	8002b04 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5f 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff35 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d005      	beq.n	8002c52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e051      	b.n	8002cf6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020e 	bic.w	r2, r2, #14
 8002c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_DMA_Abort_IT+0xd0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d029      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0xa0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <HAL_DMA_Abort_IT+0xd4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d022      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x9c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_DMA_Abort_IT+0xd8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01a      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0x96>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_DMA_Abort_IT+0xdc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d012      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x90>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_DMA_Abort_IT+0xe0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00a      	beq.n	8002cba <HAL_DMA_Abort_IT+0x8a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_DMA_Abort_IT+0xe4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d102      	bne.n	8002cb4 <HAL_DMA_Abort_IT+0x84>
 8002cae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002cb2:	e00e      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xa2>
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb8:	e00b      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xa2>
 8002cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cbe:	e008      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xa2>
 8002cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc4:	e005      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xa2>
 8002cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cca:	e002      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xa2>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	e000      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xa2>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <HAL_DMA_Abort_IT+0xe8>)
 8002cd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
    } 
  }
  return status;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40020008 	.word	0x40020008
 8002d04:	4002001c 	.word	0x4002001c
 8002d08:	40020030 	.word	0x40020030
 8002d0c:	40020044 	.word	0x40020044
 8002d10:	40020058 	.word	0x40020058
 8002d14:	4002006c 	.word	0x4002006c
 8002d18:	40020000 	.word	0x40020000

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e127      	b.n	8002f80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d30:	2201      	movs	r2, #1
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8116 	bne.w	8002f7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	d034      	beq.n	8002dc0 <HAL_GPIO_Init+0xa4>
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d80d      	bhi.n	8002d76 <HAL_GPIO_Init+0x5a>
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d02b      	beq.n	8002db6 <HAL_GPIO_Init+0x9a>
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d804      	bhi.n	8002d6c <HAL_GPIO_Init+0x50>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d031      	beq.n	8002dca <HAL_GPIO_Init+0xae>
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d01c      	beq.n	8002da4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d6a:	e048      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d043      	beq.n	8002df8 <HAL_GPIO_Init+0xdc>
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d01b      	beq.n	8002dac <HAL_GPIO_Init+0x90>
          break;
 8002d74:	e043      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d76:	4a89      	ldr	r2, [pc, #548]	; (8002f9c <HAL_GPIO_Init+0x280>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d026      	beq.n	8002dca <HAL_GPIO_Init+0xae>
 8002d7c:	4a87      	ldr	r2, [pc, #540]	; (8002f9c <HAL_GPIO_Init+0x280>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d806      	bhi.n	8002d90 <HAL_GPIO_Init+0x74>
 8002d82:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <HAL_GPIO_Init+0x284>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d020      	beq.n	8002dca <HAL_GPIO_Init+0xae>
 8002d88:	4a86      	ldr	r2, [pc, #536]	; (8002fa4 <HAL_GPIO_Init+0x288>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01d      	beq.n	8002dca <HAL_GPIO_Init+0xae>
          break;
 8002d8e:	e036      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d90:	4a85      	ldr	r2, [pc, #532]	; (8002fa8 <HAL_GPIO_Init+0x28c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0xae>
 8002d96:	4a85      	ldr	r2, [pc, #532]	; (8002fac <HAL_GPIO_Init+0x290>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d016      	beq.n	8002dca <HAL_GPIO_Init+0xae>
 8002d9c:	4a84      	ldr	r2, [pc, #528]	; (8002fb0 <HAL_GPIO_Init+0x294>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0xae>
          break;
 8002da2:	e02c      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e028      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	3304      	adds	r3, #4
 8002db2:	623b      	str	r3, [r7, #32]
          break;
 8002db4:	e023      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e01e      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	623b      	str	r3, [r7, #32]
          break;
 8002dc8:	e019      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	623b      	str	r3, [r7, #32]
          break;
 8002dd6:	e012      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de0:	2308      	movs	r3, #8
 8002de2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	611a      	str	r2, [r3, #16]
          break;
 8002dea:	e008      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dec:	2308      	movs	r3, #8
 8002dee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	615a      	str	r2, [r3, #20]
          break;
 8002df6:	e002      	b.n	8002dfe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
          break;
 8002dfc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2bff      	cmp	r3, #255	; 0xff
 8002e02:	d801      	bhi.n	8002e08 <HAL_GPIO_Init+0xec>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	e001      	b.n	8002e0c <HAL_GPIO_Init+0xf0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2bff      	cmp	r3, #255	; 0xff
 8002e12:	d802      	bhi.n	8002e1a <HAL_GPIO_Init+0xfe>
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x104>
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	210f      	movs	r1, #15
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	401a      	ands	r2, r3
 8002e32:	6a39      	ldr	r1, [r7, #32]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8096 	beq.w	8002f7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e4e:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_GPIO_Init+0x298>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_GPIO_Init+0x298>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6193      	str	r3, [r2, #24]
 8002e5a:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_GPIO_Init+0x298>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e66:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <HAL_GPIO_Init+0x29c>)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_GPIO_Init+0x19e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4a      	ldr	r2, [pc, #296]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00d      	beq.n	8002eb6 <HAL_GPIO_Init+0x19a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <HAL_GPIO_Init+0x196>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_GPIO_Init+0x192>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x1a0>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x1a0>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x1a0>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x1a0>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ecc:	493a      	ldr	r1, [pc, #232]	; (8002fb8 <HAL_GPIO_Init+0x29c>)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee6:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4938      	ldr	r1, [pc, #224]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
 8002ef2:	e006      	b.n	8002f02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4933      	ldr	r1, [pc, #204]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	492e      	ldr	r1, [pc, #184]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
 8002f1a:	e006      	b.n	8002f2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4929      	ldr	r1, [pc, #164]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4924      	ldr	r1, [pc, #144]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
 8002f42:	e006      	b.n	8002f52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f44:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	491f      	ldr	r1, [pc, #124]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	491a      	ldr	r1, [pc, #104]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60cb      	str	r3, [r1, #12]
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4915      	ldr	r1, [pc, #84]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f47f aed0 	bne.w	8002d30 <HAL_GPIO_Init+0x14>
  }
}
 8002f90:	bf00      	nop
 8002f92:	372c      	adds	r7, #44	; 0x2c
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	10210000 	.word	0x10210000
 8002fa0:	10110000 	.word	0x10110000
 8002fa4:	10120000 	.word	0x10120000
 8002fa8:	10310000 	.word	0x10310000
 8002fac:	10320000 	.word	0x10320000
 8002fb0:	10220000 	.word	0x10220000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40010800 	.word	0x40010800
 8002fc0:	40010c00 	.word	0x40010c00
 8002fc4:	40011000 	.word	0x40011000
 8002fc8:	40011400 	.word	0x40011400
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fec:	e003      	b.n	8002ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	041a      	lsls	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43d9      	mvns	r1, r3
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	400b      	ands	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	611a      	str	r2, [r3, #16]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
	...

08003034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e26c      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8087 	beq.w	8003162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b04      	cmp	r3, #4
 800305e:	d00c      	beq.n	800307a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d112      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d10b      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06c      	beq.n	8003160 <HAL_RCC_OscConfig+0x12c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d168      	bne.n	8003160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e246      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x76>
 800309c:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x98>
 80030b2:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7a      	ldr	r2, [pc, #488]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xbc>
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a67      	ldr	r2, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff fc54 	bl	80029bc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7ff fc50 	bl	80029bc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1fa      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe4>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff fc40 	bl	80029bc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff fc3c 	bl	80029bc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1e6      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x10c>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x18c>
 8003186:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1ba      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7ff fbf5 	bl	80029bc <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d6:	f7ff fbf1 	bl	80029bc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e19b      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4927      	ldr	r1, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x270>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7ff fbd4 	bl	80029bc <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7ff fbd0 	bl	80029bc <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e17a      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03a      	beq.n	80032b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d019      	beq.n	800327e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_RCC_OscConfig+0x274>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7ff fbb4 	bl	80029bc <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff fbb0 	bl	80029bc <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e15a      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003276:	2001      	movs	r0, #1
 8003278:	f000 fadc 	bl	8003834 <RCC_Delay>
 800327c:	e01c      	b.n	80032b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x274>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7ff fb9a 	bl	80029bc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328a:	e00f      	b.n	80032ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7ff fb96 	bl	80029bc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d908      	bls.n	80032ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e140      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	42420000 	.word	0x42420000
 80032a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b9e      	ldr	r3, [pc, #632]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e9      	bne.n	800328c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a6 	beq.w	8003412 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b97      	ldr	r3, [pc, #604]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b94      	ldr	r3, [pc, #592]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a93      	ldr	r2, [pc, #588]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]
 80032e2:	4b91      	ldr	r3, [pc, #580]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b8e      	ldr	r3, [pc, #568]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b8b      	ldr	r3, [pc, #556]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a8a      	ldr	r2, [pc, #552]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7ff fb57 	bl	80029bc <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7ff fb53 	bl	80029bc <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0fd      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x312>
 8003338:	4b7b      	ldr	r3, [pc, #492]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a7a      	ldr	r2, [pc, #488]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	e02d      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x334>
 800334e:	4b76      	ldr	r3, [pc, #472]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a75      	ldr	r2, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b73      	ldr	r3, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a72      	ldr	r2, [pc, #456]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	e01c      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d10c      	bne.n	800338a <HAL_RCC_OscConfig+0x356>
 8003370:	4b6d      	ldr	r3, [pc, #436]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a6c      	ldr	r2, [pc, #432]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a69      	ldr	r2, [pc, #420]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	e00b      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 800338a:	4b67      	ldr	r3, [pc, #412]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a66      	ldr	r2, [pc, #408]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	4b64      	ldr	r3, [pc, #400]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a63      	ldr	r2, [pc, #396]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7ff fb07 	bl	80029bc <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7ff fb03 	bl	80029bc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0ab      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ee      	beq.n	80033b2 <HAL_RCC_OscConfig+0x37e>
 80033d4:	e014      	b.n	8003400 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7ff faf1 	bl	80029bc <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7ff faed 	bl	80029bc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e095      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ee      	bne.n	80033de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003406:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4a47      	ldr	r2, [pc, #284]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8081 	beq.w	800351e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d061      	beq.n	80034ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d146      	bne.n	80034be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_OscConfig+0x4fc>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7ff fac1 	bl	80029bc <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7ff fabd 	bl	80029bc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e067      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d108      	bne.n	8003478 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	492d      	ldr	r1, [pc, #180]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a19      	ldr	r1, [r3, #32]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	430b      	orrs	r3, r1
 800348a:	4927      	ldr	r1, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_OscConfig+0x4fc>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7ff fa91 	bl	80029bc <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7ff fa8d 	bl	80029bc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e037      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x46a>
 80034bc:	e02f      	b.n	800351e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_RCC_OscConfig+0x4fc>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7ff fa7a 	bl	80029bc <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7ff fa76 	bl	80029bc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e020      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x498>
 80034ea:	e018      	b.n	800351e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e013      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	429a      	cmp	r2, r3
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
 8003530:	42420060 	.word	0x42420060

08003534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d0      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d910      	bls.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 0207 	bic.w	r2, r3, #7
 800355e:	4965      	ldr	r1, [pc, #404]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800359a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	494d      	ldr	r1, [pc, #308]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d040      	beq.n	8003654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d115      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e073      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003624:	f7ff f9ca 	bl	80029bc <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7ff f9c6 	bl	80029bc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e053      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d210      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e032      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4916      	ldr	r1, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c2:	f000 f821 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036c6:	4601      	mov	r1, r0
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	fa21 f303 	lsr.w	r3, r1, r3
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1cc>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1d0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f928 	bl	8002938 <HAL_InitTick>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	0800565c 	.word	0x0800565c
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b490      	push	{r4, r7}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003710:	1d3c      	adds	r4, r7, #4
 8003712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003732:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x40>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x46>
 8003746:	e02d      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800374a:	623b      	str	r3, [r7, #32]
      break;
 800374c:	e02d      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375a:	4413      	add	r3, r2
 800375c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003760:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0c5b      	lsrs	r3, r3, #17
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800377a:	4413      	add	r3, r2
 800377c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003780:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003786:	fb02 f203 	mul.w	r2, r2, r3
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e004      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	623b      	str	r3, [r7, #32]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a6:	623b      	str	r3, [r7, #32]
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc90      	pop	{r4, r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	08003f58 	.word	0x08003f58
 80037bc:	08003f68 	.word	0x08003f68
 80037c0:	40021000 	.word	0x40021000
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	003d0900 	.word	0x003d0900
 80037cc:	007a1200 	.word	0x007a1200

080037d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff2 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037ec:	4601      	mov	r1, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4a03      	ldr	r2, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	0800566c 	.word	0x0800566c

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003810:	f7ff ffde 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8003814:	4601      	mov	r1, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	0adb      	lsrs	r3, r3, #11
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4a03      	ldr	r2, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	0800566c 	.word	0x0800566c

08003834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <RCC_Delay+0x34>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <RCC_Delay+0x38>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0a5b      	lsrs	r3, r3, #9
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003850:	bf00      	nop
  }
  while (Delay --);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	60fa      	str	r2, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f9      	bne.n	8003850 <RCC_Delay+0x1c>
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e03f      	b.n	8003902 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fe ff84 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fa5d 	bl	8003d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_UART_IRQHandler+0x52>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f98b 	bl	8003c72 <UART_Receive_IT>
      return;
 800395c:	e0d1      	b.n	8003b02 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80b0 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x1ba>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <HAL_UART_IRQHandler+0x70>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80a5 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_UART_IRQHandler+0x90>
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_UART_IRQHandler+0xb0>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	f043 0202 	orr.w	r2, r3, #2
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_UART_IRQHandler+0xd0>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00f      	beq.n	8003a06 <HAL_UART_IRQHandler+0xfa>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_UART_IRQHandler+0xee>
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	f043 0208 	orr.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d078      	beq.n	8003b00 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_UART_IRQHandler+0x11c>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f925 	bl	8003c72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	2300      	moveq	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <HAL_UART_IRQHandler+0x144>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d031      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f876 	bl	8003b42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d023      	beq.n	8003aac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_UART_IRQHandler+0x1fc>)
 8003a82:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f8d1 	bl	8002c30 <HAL_DMA_Abort_IT>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa2:	e00e      	b.n	8003ac2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f843 	bl	8003b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f83f 	bl	8003b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab2:	e006      	b.n	8003ac2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f83b 	bl	8003b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ac0:	e01e      	b.n	8003b00 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac2:	bf00      	nop
    return;
 8003ac4:	e01c      	b.n	8003b00 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x1d6>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f862 	bl	8003ba4 <UART_Transmit_IT>
    return;
 8003ae0:	e00f      	b.n	8003b02 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1f6>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8a3 	bl	8003c42 <UART_EndTransmit_IT>
    return;
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003b00:	bf00      	nop
  }
}
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08003b7d 	.word	0x08003b7d

08003b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b58:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff ffca 	bl	8003b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b21      	cmp	r3, #33	; 0x21
 8003bb6:	d13e      	bne.n	8003c36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	d114      	bne.n	8003bec <UART_Transmit_IT+0x48>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d110      	bne.n	8003bec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]
 8003bea:	e008      	b.n	8003bfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	1c59      	adds	r1, r3, #1
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6211      	str	r1, [r2, #32]
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ff52 	bl	8003b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b22      	cmp	r3, #34	; 0x22
 8003c84:	d170      	bne.n	8003d68 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	d117      	bne.n	8003cc0 <UART_Receive_IT+0x4e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d113      	bne.n	8003cc0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
 8003cbe:	e026      	b.n	8003d0e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd2:	d007      	beq.n	8003ce4 <UART_Receive_IT+0x72>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <UART_Receive_IT+0x80>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e008      	b.n	8003d04 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d120      	bne.n	8003d64 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0220 	bic.w	r2, r2, #32
 8003d30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fedf 	bl	8003b1e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e002      	b.n	8003d6a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dae:	f023 030c 	bic.w	r3, r3, #12
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <UART_SetConfig+0x114>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7ff fd16 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	e002      	b.n	8003dea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7ff fcfe 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8003de8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009a      	lsls	r2, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <UART_SetConfig+0x118>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	0119      	lsls	r1, r3, #4
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009a      	lsls	r2, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <UART_SetConfig+0x118>)
 8003e22:	fba3 0302 	umull	r0, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2064      	movs	r0, #100	; 0x64
 8003e2a:	fb00 f303 	mul.w	r3, r0, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <UART_SetConfig+0x118>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e40:	4419      	add	r1, r3
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009a      	lsls	r2, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <UART_SetConfig+0x118>)
 8003e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2064      	movs	r0, #100	; 0x64
 8003e62:	fb00 f303 	mul.w	r3, r0, r3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	3332      	adds	r3, #50	; 0x32
 8003e6c:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <UART_SetConfig+0x118>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	51eb851f 	.word	0x51eb851f

08003e90 <__libc_init_array>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	2500      	movs	r5, #0
 8003e94:	4e0c      	ldr	r6, [pc, #48]	; (8003ec8 <__libc_init_array+0x38>)
 8003e96:	4c0d      	ldr	r4, [pc, #52]	; (8003ecc <__libc_init_array+0x3c>)
 8003e98:	1ba4      	subs	r4, r4, r6
 8003e9a:	10a4      	asrs	r4, r4, #2
 8003e9c:	42a5      	cmp	r5, r4
 8003e9e:	d109      	bne.n	8003eb4 <__libc_init_array+0x24>
 8003ea0:	f000 f838 	bl	8003f14 <_init>
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	4e0a      	ldr	r6, [pc, #40]	; (8003ed0 <__libc_init_array+0x40>)
 8003ea8:	4c0a      	ldr	r4, [pc, #40]	; (8003ed4 <__libc_init_array+0x44>)
 8003eaa:	1ba4      	subs	r4, r4, r6
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	42a5      	cmp	r5, r4
 8003eb0:	d105      	bne.n	8003ebe <__libc_init_array+0x2e>
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eb8:	4798      	blx	r3
 8003eba:	3501      	adds	r5, #1
 8003ebc:	e7ee      	b.n	8003e9c <__libc_init_array+0xc>
 8003ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ec2:	4798      	blx	r3
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	e7f2      	b.n	8003eae <__libc_init_array+0x1e>
 8003ec8:	08005674 	.word	0x08005674
 8003ecc:	08005674 	.word	0x08005674
 8003ed0:	08005674 	.word	0x08005674
 8003ed4:	08005678 	.word	0x08005678

08003ed8 <memset>:
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4402      	add	r2, r0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <memset+0xa>
 8003ee0:	4770      	bx	lr
 8003ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee6:	e7f9      	b.n	8003edc <memset+0x4>

08003ee8 <strncpy>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4604      	mov	r4, r0
 8003eec:	3901      	subs	r1, #1
 8003eee:	b902      	cbnz	r2, 8003ef2 <strncpy+0xa>
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003ef8:	1e56      	subs	r6, r2, #1
 8003efa:	f803 5b01 	strb.w	r5, [r3], #1
 8003efe:	b92d      	cbnz	r5, 8003f0c <strncpy+0x24>
 8003f00:	4414      	add	r4, r2
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d0f4      	beq.n	8003ef0 <strncpy+0x8>
 8003f06:	f803 5b01 	strb.w	r5, [r3], #1
 8003f0a:	e7fa      	b.n	8003f02 <strncpy+0x1a>
 8003f0c:	461c      	mov	r4, r3
 8003f0e:	4632      	mov	r2, r6
 8003f10:	e7ed      	b.n	8003eee <strncpy+0x6>
	...

08003f14 <_init>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr

08003f20 <_fini>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr
