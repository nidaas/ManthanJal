
ManthanJal64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025a8  08006a48  08006a48  00016a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ff0  08008ff0  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ff0  08008ff0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000004c  08009044  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08009044  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cccf  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d09  00000000  00000000  0002cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002ea50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002f688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001801c  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008df6  00000000  00000000  00048264  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008406f  00000000  00000000  0005105a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d50c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000d5144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000004c 	.word	0x2000004c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a30 	.word	0x08006a30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000050 	.word	0x20000050
 800014c:	08006a30 	.word	0x08006a30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2iz>:
 8000fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc0:	d30f      	bcc.n	8000fe2 <__aeabi_f2iz+0x2a>
 8000fc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d90d      	bls.n	8000fe8 <__aeabi_f2iz+0x30>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fdc:	bf18      	it	ne
 8000fde:	4240      	negne	r0, r0
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2iz+0x3a>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d105      	bne.n	8000ffe <__aeabi_f2iz+0x46>
 8000ff2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ff6:	bf08      	it	eq
 8000ff8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr

08001004 <Get_Width>:



//get lcd width
int16_t Get_Width(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	return lcddev.width;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <Get_Width+0x14>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b21b      	sxth	r3, r3
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000cc 	.word	0x200000cc

0800101c <Get_Height>:

//get lcd height
int16_t Get_Height(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	return lcddev.height;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <Get_Height+0x14>)
 8001022:	885b      	ldrh	r3, [r3, #2]
 8001024:	b21b      	sxth	r3, r3
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200000cc 	.word	0x200000cc

08001034 <Draw_Pixe>:


//set x,y  coordinate and color to draw a pixel point
void Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	460b      	mov	r3, r1
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	807b      	strh	r3, [r7, #2]
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db1e      	blt.n	800108c <Draw_Pixe+0x58>
 800104e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <Draw_Pixe+0x58>
 8001056:	f7ff ffd5 	bl	8001004 <Get_Width>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	4293      	cmp	r3, r2
 8001064:	dc12      	bgt.n	800108c <Draw_Pixe+0x58>
 8001066:	f7ff ffd9 	bl	800101c <Get_Height>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001072:	4293      	cmp	r3, r2
 8001074:	dc0a      	bgt.n	800108c <Draw_Pixe+0x58>
	{
		return;
	}
	LCD_SetWindows(x, y, x, y);
 8001076:	88f8      	ldrh	r0, [r7, #6]
 8001078:	88b9      	ldrh	r1, [r7, #4]
 800107a:	88fa      	ldrh	r2, [r7, #6]
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	f002 f855 	bl	800312c <LCD_SetWindows>
	Lcd_WriteData_16Bit(color);
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	4618      	mov	r0, r3
 8001086:	f001 ff0b 	bl	8002ea0 <Lcd_WriteData_16Bit>
 800108a:	e000      	b.n	800108e <Draw_Pixe+0x5a>
		return;
 800108c:	bf00      	nop
}
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Fill_Rect>:

//fill area from x to x+w,y to y+h
void Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4623      	mov	r3, r4
 80010a4:	80fb      	strh	r3, [r7, #6]
 80010a6:	4603      	mov	r3, r0
 80010a8:	80bb      	strh	r3, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]
 80010ae:	4613      	mov	r3, r2
 80010b0:	803b      	strh	r3, [r7, #0]
	int16_t end;
	if (w < 0)
 80010b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da08      	bge.n	80010cc <Fill_Rect+0x38>
	{
        w = -w;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	425b      	negs	r3, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	807b      	strh	r3, [r7, #2]
        x -= w;
 80010c2:	88fa      	ldrh	r2, [r7, #6]
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da01      	bge.n	80010e2 <Fill_Rect+0x4e>
    {
        x = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	80fb      	strh	r3, [r7, #6]
    }
    if (end > Get_Width())
 80010e2:	f7ff ff8f 	bl	8001004 <Get_Width>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd03      	ble.n	80010fa <Fill_Rect+0x66>
    {
        end = Get_Width();
 80010f2:	f7ff ff87 	bl	8001004 <Get_Width>
 80010f6:	4603      	mov	r3, r0
 80010f8:	81fb      	strh	r3, [r7, #14]
    }
    w = end - x;
 80010fa:	89fa      	ldrh	r2, [r7, #14]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	807b      	strh	r3, [r7, #2]
    if (h < 0)
 8001104:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da08      	bge.n	800111e <Fill_Rect+0x8a>
	{
        h = -h;
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	425b      	negs	r3, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	803b      	strh	r3, [r7, #0]
        y -= h;
 8001114:	88ba      	ldrh	r2, [r7, #4]
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	883b      	ldrh	r3, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8001128:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da01      	bge.n	8001134 <Fill_Rect+0xa0>
    {
        y = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	80bb      	strh	r3, [r7, #4]
    }
    if (end > Get_Height())
 8001134:	f7ff ff72 	bl	800101c <Get_Height>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001140:	4293      	cmp	r3, r2
 8001142:	dd03      	ble.n	800114c <Fill_Rect+0xb8>
    {
        end = Get_Height();
 8001144:	f7ff ff6a 	bl	800101c <Get_Height>
 8001148:	4603      	mov	r3, r0
 800114a:	81fb      	strh	r3, [r7, #14]
    }
    h = end - y;
 800114c:	89fa      	ldrh	r2, [r7, #14]
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	803b      	strh	r3, [r7, #0]
    LCD_SetWindows(x, y, x + w - 1, y + h - 1);//set area
 8001156:	88f8      	ldrh	r0, [r7, #6]
 8001158:	88b9      	ldrh	r1, [r7, #4]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	b29c      	uxth	r4, r3
 8001166:	88ba      	ldrh	r2, [r7, #4]
 8001168:	883b      	ldrh	r3, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	4622      	mov	r2, r4
 8001174:	f001 ffda 	bl	800312c <LCD_SetWindows>
	if (h > w)
 8001178:	f9b7 2000 	ldrsh.w	r2, [r7]
 800117c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001180:	429a      	cmp	r2, r3
 8001182:	dd14      	ble.n	80011ae <Fill_Rect+0x11a>
	{
        end = h;
 8001184:	883b      	ldrh	r3, [r7, #0]
 8001186:	81fb      	strh	r3, [r7, #14]
        h = w;
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	803b      	strh	r3, [r7, #0]
        w = end;
 800118c:	89fb      	ldrh	r3, [r7, #14]
 800118e:	807b      	strh	r3, [r7, #2]
    }
	while (h-- > 0)
 8001190:	e00d      	b.n	80011ae <Fill_Rect+0x11a>
	{
		end = w;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	81fb      	strh	r3, [r7, #14]
		do
		{
			Lcd_WriteData_16Bit(color);//set color data
 8001196:	8c3b      	ldrh	r3, [r7, #32]
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fe81 	bl	8002ea0 <Lcd_WriteData_16Bit>
        } while (--end != 0);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f3      	bne.n	8001196 <Fill_Rect+0x102>
	while (h-- > 0)
 80011ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	3a01      	subs	r2, #1
 80011b6:	b292      	uxth	r2, r2
 80011b8:	803a      	strh	r2, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dce9      	bgt.n	8001192 <Fill_Rect+0xfe>
	}
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}

080011c6 <pgm_read_glyph_ptr>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
  return gfxFont->glyph + c;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <pgm_read_bitmap_ptr>:

uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return gfxFont->bitmap;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <gfx_setCursor>:
  @brief  Set text cursor location
  @param  x    X coordinate in pixels
  @param  y    Y coordinate in pixels
*/
/**********************************************************************/
void gfx_setCursor(int16_t x, int16_t y) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
  cursor_x = x;
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <gfx_setCursor+0x28>)
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	8013      	strh	r3, [r2, #0]
  cursor_y = y;
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <gfx_setCursor+0x2c>)
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	8013      	strh	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200000bc 	.word	0x200000bc
 8001228:	20000084 	.word	0x20000084

0800122c <gfx_setTextColor>:
   @param   c   16-bit 5-6-5 Color to draw text with
   @note    For 'transparent' background, background and foreground
            are set to same color rather than using a separate flag.
 */
 /**********************************************************************/
 void gfx_setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <gfx_setTextColor+0x24>)
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	8013      	strh	r3, [r2, #0]
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <gfx_setTextColor+0x24>)
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <gfx_setTextColor+0x28>)
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200000c4 	.word	0x200000c4
 8001254:	200000c8 	.word	0x200000c8

08001258 <gfx_init>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
void gfx_init(int16_t w, int16_t h) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	80bb      	strh	r3, [r7, #4]
  _width = w;
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <gfx_init+0x6c>)
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	8013      	strh	r3, [r2, #0]
  _height = h;
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <gfx_init+0x70>)
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	8013      	strh	r3, [r2, #0]
  rotation = 0;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <gfx_init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
  cursor_y = cursor_x = 0;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <gfx_init+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <gfx_init+0x78>)
 8001282:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <gfx_init+0x7c>)
 8001288:	801a      	strh	r2, [r3, #0]
  textsize_x = textsize_y = 1;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <gfx_init+0x80>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <gfx_init+0x80>)
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <gfx_init+0x84>)
 8001296:	701a      	strb	r2, [r3, #0]
  textcolor = textbgcolor = 0xFFFF;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <gfx_init+0x88>)
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	801a      	strh	r2, [r3, #0]
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <gfx_init+0x88>)
 80012a2:	881a      	ldrh	r2, [r3, #0]
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <gfx_init+0x8c>)
 80012a6:	801a      	strh	r2, [r3, #0]
  wrap = true;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <gfx_init+0x90>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
  _cp437 = false;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <gfx_init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
  gfxFont = 0;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <gfx_init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	200000b8 	.word	0x200000b8
 80012c8:	200000c0 	.word	0x200000c0
 80012cc:	200000a2 	.word	0x200000a2
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	20000084 	.word	0x20000084
 80012d8:	200000c7 	.word	0x200000c7
 80012dc:	20000090 	.word	0x20000090
 80012e0:	200000c4 	.word	0x200000c4
 80012e4:	200000c8 	.word	0x200000c8
 80012e8:	200000be 	.word	0x200000be
 80012ec:	200000a6 	.word	0x200000a6
 80012f0:	2000008c 	.word	0x2000008c

080012f4 <gfx_writeLine>:
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	4603      	mov	r3, r0
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]
 800130e:	4613      	mov	r3, r2
 8001310:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001312:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001316:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001320:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001324:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	1acb      	subs	r3, r1, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	bfb8      	it	lt
 8001332:	425b      	neglt	r3, r3
 8001334:	429a      	cmp	r2, r3
 8001336:	bfcc      	ite	gt
 8001338:	2301      	movgt	r3, #1
 800133a:	2300      	movle	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001340:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <gfx_writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	833b      	strh	r3, [r7, #24]
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	80fb      	strh	r3, [r7, #6]
 8001350:	8b3b      	ldrh	r3, [r7, #24]
 8001352:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	82fb      	strh	r3, [r7, #22]
 8001358:	883b      	ldrh	r3, [r7, #0]
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001360:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001368:	429a      	cmp	r2, r3
 800136a:	dd0b      	ble.n	8001384 <gfx_writeLine+0x90>
    _swap_int16_t(x0, x1);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	82bb      	strh	r3, [r7, #20]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	8abb      	ldrh	r3, [r7, #20]
 8001376:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	827b      	strh	r3, [r7, #18]
 800137c:	883b      	ldrh	r3, [r7, #0]
 800137e:	80bb      	strh	r3, [r7, #4]
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800138e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bfb8      	it	lt
 800139c:	425b      	neglt	r3, r3
 800139e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80013a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013a4:	0fda      	lsrs	r2, r3, #31
 80013a6:	4413      	add	r3, r2
 80013a8:	105b      	asrs	r3, r3, #1
 80013aa:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80013ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	da02      	bge.n	80013be <gfx_writeLine+0xca>
    ystep = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	83bb      	strh	r3, [r7, #28]
 80013bc:	e031      	b.n	8001422 <gfx_writeLine+0x12e>
  } else {
    ystep = -1;
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 80013c4:	e02d      	b.n	8001422 <gfx_writeLine+0x12e>
    if (steep) {
 80013c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <gfx_writeLine+0xec>
    	gfx_writePixel(y0, x0, color);
 80013ce:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f832 	bl	8001442 <gfx_writePixel>
 80013de:	e007      	b.n	80013f0 <gfx_writeLine+0xfc>
    } else {
    	gfx_writePixel(x0, y0, color);
 80013e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f829 	bl	8001442 <gfx_writePixel>
    }
    err -= dy;
 80013f0:	8bfa      	ldrh	r2, [r7, #30]
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80013fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da09      	bge.n	8001416 <gfx_writeLine+0x122>
      y0 += ystep;
 8001402:	88ba      	ldrh	r2, [r7, #4]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	80bb      	strh	r3, [r7, #4]
      err += dx;
 800140c:	8bfa      	ldrh	r2, [r7, #30]
 800140e:	8a3b      	ldrh	r3, [r7, #16]
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	b29b      	uxth	r3, r3
 800141c:	3301      	adds	r3, #1
 800141e:	b29b      	uxth	r3, r3
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001426:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142a:	429a      	cmp	r2, r3
 800142c:	ddcb      	ble.n	80013c6 <gfx_writeLine+0xd2>
    }
  }
}
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}

08001436 <gfx_startWrite>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void gfx_startWrite() {}
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <gfx_writePixel>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writePixel(int16_t x, int16_t y, uint16_t color) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	460b      	mov	r3, r1
 800144e:	80bb      	strh	r3, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	807b      	strh	r3, [r7, #2]
	Draw_Pixe(x, y, color);
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fde8 	bl	8001034 <Draw_Pixe>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <gfx_writeFastVLine>:
    @param    y   Top-most y coordinate
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
	gfx_drawFastVLine(x, y, h, color);
 800148a:	883b      	ldrh	r3, [r7, #0]
 800148c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001490:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001494:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001498:	f000 f846 	bl	8001528 <gfx_drawFastVLine>
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <gfx_writeFastHLine>:
    @param    y   Left-most y coordinate
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
	gfx_drawFastHLine(x, y, w, color);
 80014c2:	883b      	ldrh	r3, [r7, #0]
 80014c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014d0:	f000 f853 	bl	800157a <gfx_drawFastHLine>
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}

080014dc <gfx_writeFillRect>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b085      	sub	sp, #20
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	4603      	mov	r3, r0
 80014f0:	80bb      	strh	r3, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]
 80014f6:	4613      	mov	r3, r2
 80014f8:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if desired!
	Fill_Rect(x, y, w, h, color);
 80014fa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80014fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001502:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001506:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4623      	mov	r3, r4
 8001510:	f7ff fdc0 	bl	8001094 <Fill_Rect>
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}

0800151c <gfx_endWrite>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void gfx_endWrite() {}
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <gfx_drawFastVLine>:
    @param    y   Top-most y coordinate
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af02      	add	r7, sp, #8
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4623      	mov	r3, r4
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	803b      	strh	r3, [r7, #0]
	gfx_startWrite();
 8001546:	f7ff ff76 	bl	8001436 <gfx_startWrite>
    gfx_writeLine(x, y, x, y + h - 1, color);
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	b21c      	sxth	r4, r3
 8001558:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800155c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001560:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001564:	883b      	ldrh	r3, [r7, #0]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4623      	mov	r3, r4
 800156a:	f7ff fec3 	bl	80012f4 <gfx_writeLine>
    gfx_endWrite();
 800156e:	f7ff ffd5 	bl	800151c <gfx_endWrite>
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}

0800157a <gfx_drawFastHLine>:
    @param    y   Left-most y coordinate
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b085      	sub	sp, #20
 800157e:	af02      	add	r7, sp, #8
 8001580:	4604      	mov	r4, r0
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	461a      	mov	r2, r3
 8001588:	4623      	mov	r3, r4
 800158a:	80fb      	strh	r3, [r7, #6]
 800158c:	4603      	mov	r3, r0
 800158e:	80bb      	strh	r3, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	803b      	strh	r3, [r7, #0]
    gfx_startWrite();
 8001598:	f7ff ff4d 	bl	8001436 <gfx_startWrite>
    gfx_writeLine(x, y, x + w - 1, y, color);
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	4413      	add	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80015ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4623      	mov	r3, r4
 80015bc:	f7ff fe9a 	bl	80012f4 <gfx_writeLine>
    gfx_endWrite();
 80015c0:	f7ff ffac 	bl	800151c <gfx_endWrite>
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}

080015cc <gfx_fillScreen>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillScreen(uint16_t color) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	Fill_Rect(0, 0, _width, _height, color);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <gfx_fillScreen+0x2c>)
 80015d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <gfx_fillScreen+0x30>)
 80015de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	460b      	mov	r3, r1
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fd52 	bl	8001094 <Fill_Rect>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000b8 	.word	0x200000b8
 80015fc:	200000c0 	.word	0x200000c0

08001600 <gfx_drawLine>:
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af02      	add	r7, sp, #8
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	4603      	mov	r3, r0
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	803b      	strh	r3, [r7, #0]
  // Update in subclasses if desired!
  if (x0 == x1) {
 800161e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001626:	429a      	cmp	r2, r3
 8001628:	d11a      	bne.n	8001660 <gfx_drawLine+0x60>
    if (y0 > y1)
 800162a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800162e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001632:	429a      	cmp	r2, r3
 8001634:	dd05      	ble.n	8001642 <gfx_drawLine+0x42>
      _swap_int16_t(y0, y1);
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	81bb      	strh	r3, [r7, #12]
 800163a:	883b      	ldrh	r3, [r7, #0]
 800163c:	80bb      	strh	r3, [r7, #4]
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	803b      	strh	r3, [r7, #0]
    gfx_drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8001642:	883a      	ldrh	r2, [r7, #0]
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001656:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800165a:	f7ff ff65 	bl	8001528 <gfx_drawFastVLine>
  } else {
	  gfx_startWrite();
	  gfx_writeLine(x0, y0, x1, y1, color);
	  gfx_endWrite();
  }
}
 800165e:	e031      	b.n	80016c4 <gfx_drawLine+0xc4>
  } else if (y0 == y1) {
 8001660:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001664:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001668:	429a      	cmp	r2, r3
 800166a:	d11a      	bne.n	80016a2 <gfx_drawLine+0xa2>
    if (x0 > x1)
 800166c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001674:	429a      	cmp	r2, r3
 8001676:	dd05      	ble.n	8001684 <gfx_drawLine+0x84>
      _swap_int16_t(x0, x1);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	81fb      	strh	r3, [r7, #14]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	807b      	strh	r3, [r7, #2]
    gfx_drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	b21a      	sxth	r2, r3
 8001692:	8c3b      	ldrh	r3, [r7, #32]
 8001694:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001698:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800169c:	f7ff ff6d 	bl	800157a <gfx_drawFastHLine>
}
 80016a0:	e010      	b.n	80016c4 <gfx_drawLine+0xc4>
	  gfx_startWrite();
 80016a2:	f7ff fec8 	bl	8001436 <gfx_startWrite>
	  gfx_writeLine(x0, y0, x1, y1, color);
 80016a6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80016aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016b6:	8c3b      	ldrh	r3, [r7, #32]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff fe1a 	bl	80012f4 <gfx_writeLine>
	  gfx_endWrite();
 80016c0:	f7ff ff2c 	bl	800151c <gfx_endWrite>
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <gfx_drawCircle>:
    @param    y0   Center-point y coordinate
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	f1c3 0301 	rsb	r3, r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	461a      	mov	r2, r3
 80016fc:	03d2      	lsls	r2, r2, #15
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	81fb      	strh	r3, [r7, #14]

  gfx_startWrite();
 800170e:	f7ff fe92 	bl	8001436 <gfx_startWrite>
  gfx_writePixel(x0, y0 + r, color);
 8001712:	88ba      	ldrh	r2, [r7, #4]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4413      	add	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	b219      	sxth	r1, r3
 800171c:	883a      	ldrh	r2, [r7, #0]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe8d 	bl	8001442 <gfx_writePixel>
  gfx_writePixel(x0, y0 - r, color);
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	b219      	sxth	r1, r3
 8001732:	883a      	ldrh	r2, [r7, #0]
 8001734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe82 	bl	8001442 <gfx_writePixel>
  gfx_writePixel(x0 + r, y0, color);
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21b      	sxth	r3, r3
 8001748:	883a      	ldrh	r2, [r7, #0]
 800174a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe77 	bl	8001442 <gfx_writePixel>
  gfx_writePixel(x0 - r, y0, color);
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	b21b      	sxth	r3, r3
 800175e:	883a      	ldrh	r2, [r7, #0]
 8001760:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe6c 	bl	8001442 <gfx_writePixel>

  while (x < y) {
 800176a:	e091      	b.n	8001890 <gfx_drawCircle+0x1c4>
    if (f >= 0) {
 800176c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0e      	blt.n	8001792 <gfx_drawCircle+0xc6>
      y--;
 8001774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001780:	8a7b      	ldrh	r3, [r7, #18]
 8001782:	3302      	adds	r3, #2
 8001784:	b29b      	uxth	r3, r3
 8001786:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001788:	8afa      	ldrh	r2, [r7, #22]
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001792:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b29b      	uxth	r3, r3
 800179c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800179e:	8abb      	ldrh	r3, [r7, #20]
 80017a0:	3302      	adds	r3, #2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 80017a6:	8afa      	ldrh	r2, [r7, #22]
 80017a8:	8abb      	ldrh	r3, [r7, #20]
 80017aa:	4413      	add	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	82fb      	strh	r3, [r7, #22]

    gfx_writePixel(x0 + x, y0 + y, color);
 80017b0:	88fa      	ldrh	r2, [r7, #6]
 80017b2:	8a3b      	ldrh	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b218      	sxth	r0, r3
 80017ba:	88ba      	ldrh	r2, [r7, #4]
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	883a      	ldrh	r2, [r7, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff fe3b 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - x, y0 + y, color);
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	8a3b      	ldrh	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	88ba      	ldrh	r2, [r7, #4]
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	4413      	add	r3, r2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b21b      	sxth	r3, r3
 80017e0:	883a      	ldrh	r2, [r7, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fe2d 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 + x, y0 - y, color);
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	8a3b      	ldrh	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b218      	sxth	r0, r3
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	883a      	ldrh	r2, [r7, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff fe1f 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - x, y0 - y, color);
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	8a3b      	ldrh	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	b218      	sxth	r0, r3
 800180e:	88ba      	ldrh	r2, [r7, #4]
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	b21b      	sxth	r3, r3
 8001818:	883a      	ldrh	r2, [r7, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff fe11 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 + y, y0 + x, color);
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	4413      	add	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	b218      	sxth	r0, r3
 800182a:	88ba      	ldrh	r2, [r7, #4]
 800182c:	8a3b      	ldrh	r3, [r7, #16]
 800182e:	4413      	add	r3, r2
 8001830:	b29b      	uxth	r3, r3
 8001832:	b21b      	sxth	r3, r3
 8001834:	883a      	ldrh	r2, [r7, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fe03 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - y, y0 + x, color);
 800183c:	88fa      	ldrh	r2, [r7, #6]
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	b218      	sxth	r0, r3
 8001846:	88ba      	ldrh	r2, [r7, #4]
 8001848:	8a3b      	ldrh	r3, [r7, #16]
 800184a:	4413      	add	r3, r2
 800184c:	b29b      	uxth	r3, r3
 800184e:	b21b      	sxth	r3, r3
 8001850:	883a      	ldrh	r2, [r7, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff fdf5 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 + y, y0 - x, color);
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	b218      	sxth	r0, r3
 8001862:	88ba      	ldrh	r2, [r7, #4]
 8001864:	8a3b      	ldrh	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	b21b      	sxth	r3, r3
 800186c:	883a      	ldrh	r2, [r7, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff fde7 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - y, y0 - x, color);
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	b218      	sxth	r0, r3
 800187e:	88ba      	ldrh	r2, [r7, #4]
 8001880:	8a3b      	ldrh	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21b      	sxth	r3, r3
 8001888:	883a      	ldrh	r2, [r7, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff fdd9 	bl	8001442 <gfx_writePixel>
  while (x < y) {
 8001890:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001898:	429a      	cmp	r2, r3
 800189a:	f6ff af67 	blt.w	800176c <gfx_drawCircle+0xa0>
  }
  gfx_endWrite();
 800189e:	f7ff fe3d 	bl	800151c <gfx_endWrite>
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <gfx_drawCircleHelper>:
    @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of
   the circle we're doing
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4604      	mov	r4, r0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  int16_t f = 1 - r;
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	f1c3 0301 	rsb	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	461a      	mov	r2, r3
 80018da:	03d2      	lsls	r2, r2, #15
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	81fb      	strh	r3, [r7, #14]

  while (x < y) {
 80018ec:	e0a5      	b.n	8001a3a <gfx_drawCircleHelper+0x190>
    if (f >= 0) {
 80018ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0e      	blt.n	8001914 <gfx_drawCircleHelper+0x6a>
      y--;
 80018f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001902:	8a7b      	ldrh	r3, [r7, #18]
 8001904:	3302      	adds	r3, #2
 8001906:	b29b      	uxth	r3, r3
 8001908:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 800190a:	8afa      	ldrh	r2, [r7, #22]
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	4413      	add	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001914:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001918:	b29b      	uxth	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001920:	8abb      	ldrh	r3, [r7, #20]
 8001922:	3302      	adds	r3, #2
 8001924:	b29b      	uxth	r3, r3
 8001926:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001928:	8afa      	ldrh	r2, [r7, #22]
 800192a:	8abb      	ldrh	r3, [r7, #20]
 800192c:	4413      	add	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <gfx_drawCircleHelper+0xca>
    	gfx_writePixel(x0 + x, y0 + y, color);
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	8a3b      	ldrh	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	b218      	sxth	r0, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	4413      	add	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff fd75 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 + y, y0 + x, color);
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	b218      	sxth	r0, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	8a3b      	ldrh	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff fd67 	bl	8001442 <gfx_writePixel>
    }
    if (cornername & 0x2) {
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01b      	beq.n	80019b6 <gfx_drawCircleHelper+0x10c>
    	gfx_writePixel(x0 + x, y0 - y, color);
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	8a3b      	ldrh	r3, [r7, #16]
 8001982:	4413      	add	r3, r2
 8001984:	b29b      	uxth	r3, r3
 8001986:	b218      	sxth	r0, r3
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	b29b      	uxth	r3, r3
 8001990:	b21b      	sxth	r3, r3
 8001992:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff fd54 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 + y, y0 - x, color);
 800199a:	88fa      	ldrh	r2, [r7, #6]
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	4413      	add	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b218      	sxth	r0, r3
 80019a4:	88ba      	ldrh	r2, [r7, #4]
 80019a6:	8a3b      	ldrh	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff fd46 	bl	8001442 <gfx_writePixel>
    }
    if (cornername & 0x8) {
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01b      	beq.n	80019f8 <gfx_drawCircleHelper+0x14e>
    	gfx_writePixel(x0 - y, y0 + x, color);
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b218      	sxth	r0, r3
 80019ca:	88ba      	ldrh	r2, [r7, #4]
 80019cc:	8a3b      	ldrh	r3, [r7, #16]
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff fd33 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 - x, y0 + y, color);
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b218      	sxth	r0, r3
 80019e6:	88ba      	ldrh	r2, [r7, #4]
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff fd25 	bl	8001442 <gfx_writePixel>
    }
    if (cornername & 0x1) {
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01b      	beq.n	8001a3a <gfx_drawCircleHelper+0x190>
    	gfx_writePixel(x0 - y, y0 - x, color);
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b218      	sxth	r0, r3
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	8a3b      	ldrh	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff fd12 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 - x, y0 - y, color);
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	8a3b      	ldrh	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b218      	sxth	r0, r3
 8001a28:	88ba      	ldrh	r2, [r7, #4]
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff fd04 	bl	8001442 <gfx_writePixel>
  while (x < y) {
 8001a3a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	f6ff af53 	blt.w	80018ee <gfx_drawCircleHelper+0x44>
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}

08001a50 <gfx_fillCircle>:
    @param    y0   Center-point y coordinate
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4604      	mov	r4, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	80fb      	strh	r3, [r7, #6]
 8001a62:	4603      	mov	r3, r0
 8001a64:	80bb      	strh	r3, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	803b      	strh	r3, [r7, #0]
	gfx_startWrite();
 8001a6e:	f7ff fce2 	bl	8001436 <gfx_startWrite>
	gfx_writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8001a72:	88ba      	ldrh	r2, [r7, #4]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b219      	sxth	r1, r3
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	883b      	ldrh	r3, [r7, #0]
 8001a8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a8e:	f7ff fced 	bl	800146c <gfx_writeFastVLine>
	gfx_fillCircleHelper(x0, y0, r, 3, 0, color);
 8001a92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a96:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f000 f806 	bl	8001ab8 <gfx_fillCircleHelper>
	gfx_endWrite();
 8001aac:	f7ff fd36 	bl	800151c <gfx_endWrite>
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <gfx_fillCircleHelper>:
    @param  corners  Mask bits indicating which quarters we're doing
    @param  delta    Offset from center-point, used for round-rects
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	80fb      	strh	r3, [r7, #6]
 8001aca:	4603      	mov	r3, r0
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	807b      	strh	r3, [r7, #2]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	f1c3 0301 	rsb	r3, r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	03d2      	lsls	r2, r2, #15
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8001afa:	8a3b      	ldrh	r3, [r7, #16]
 8001afc:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8001b02:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8001b0e:	e096      	b.n	8001c3e <gfx_fillCircleHelper+0x186>
    if (f >= 0) {
 8001b10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0e      	blt.n	8001b36 <gfx_fillCircleHelper+0x7e>
      y--;
 8001b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001b24:	8a7b      	ldrh	r3, [r7, #18]
 8001b26:	3302      	adds	r3, #2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001b2c:	8afa      	ldrh	r2, [r7, #22]
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	4413      	add	r3, r2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001b36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001b42:	8abb      	ldrh	r3, [r7, #20]
 8001b44:	3302      	adds	r3, #2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001b4a:	8afa      	ldrh	r2, [r7, #22]
 8001b4c:	8abb      	ldrh	r3, [r7, #20]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	82fb      	strh	r3, [r7, #22]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8001b54:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da31      	bge.n	8001bc6 <gfx_fillCircleHelper+0x10e>
      if (corners & 1)
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <gfx_fillCircleHelper+0xdc>
    	  gfx_writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	8a3b      	ldrh	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b218      	sxth	r0, r3
 8001b76:	88ba      	ldrh	r2, [r7, #4]
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b219      	sxth	r1, r3
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b90:	f7ff fc6c 	bl	800146c <gfx_writeFastVLine>
      if (corners & 2)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d013      	beq.n	8001bc6 <gfx_fillCircleHelper+0x10e>
    	  gfx_writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	8a3b      	ldrh	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b218      	sxth	r0, r3
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b219      	sxth	r1, r3
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bc2:	f7ff fc53 	bl	800146c <gfx_writeFastVLine>
    }
    if (y != py) {
 8001bc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d033      	beq.n	8001c3a <gfx_fillCircleHelper+0x182>
      if (corners & 1)
 8001bd2:	787b      	ldrb	r3, [r7, #1]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <gfx_fillCircleHelper+0x14c>
    	  gfx_writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b218      	sxth	r0, r3
 8001be6:	88ba      	ldrh	r2, [r7, #4]
 8001be8:	89bb      	ldrh	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b219      	sxth	r1, r3
 8001bf0:	89bb      	ldrh	r3, [r7, #12]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c00:	f7ff fc34 	bl	800146c <gfx_writeFastVLine>
      if (corners & 2)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d013      	beq.n	8001c36 <gfx_fillCircleHelper+0x17e>
    	  gfx_writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b218      	sxth	r0, r3
 8001c18:	88ba      	ldrh	r2, [r7, #4]
 8001c1a:	89bb      	ldrh	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b219      	sxth	r1, r3
 8001c22:	89bb      	ldrh	r3, [r7, #12]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c32:	f7ff fc1b 	bl	800146c <gfx_writeFastVLine>
      py = y;
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 8001c3a:	8a3b      	ldrh	r3, [r7, #16]
 8001c3c:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 8001c3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	f6ff af62 	blt.w	8001b10 <gfx_fillCircleHelper+0x58>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <gfx_drawRoundRect>:
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	4603      	mov	r3, r0
 8001c68:	80bb      	strh	r3, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001c72:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	bfa8      	it	ge
 8001c7e:	4613      	movge	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	0fda      	lsrs	r2, r3, #31
 8001c84:	4413      	add	r3, r2
 8001c86:	105b      	asrs	r3, r3, #1
 8001c88:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 8001c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dd01      	ble.n	8001c9a <gfx_drawRoundRect+0x46>
    r = max_radius;
 8001c96:	89fb      	ldrh	r3, [r7, #14]
 8001c98:	843b      	strh	r3, [r7, #32]
  // smarter version
  gfx_startWrite();
 8001c9a:	f7ff fbcc 	bl	8001436 <gfx_startWrite>
  gfx_writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	8c3b      	ldrh	r3, [r7, #32]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b218      	sxth	r0, r3
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	8c3b      	ldrh	r3, [r7, #32]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cb8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cbc:	f7ff fbf2 	bl	80014a4 <gfx_writeFastHLine>
  gfx_writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8001cc0:	88fa      	ldrh	r2, [r7, #6]
 8001cc2:	8c3b      	ldrh	r3, [r7, #32]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b218      	sxth	r0, r3
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	883b      	ldrh	r3, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	887a      	ldrh	r2, [r7, #2]
 8001cda:	8c3b      	ldrh	r3, [r7, #32]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce8:	f7ff fbdc 	bl	80014a4 <gfx_writeFastHLine>
  gfx_writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 8001cec:	88ba      	ldrh	r2, [r7, #4]
 8001cee:	8c3b      	ldrh	r3, [r7, #32]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b219      	sxth	r1, r3
 8001cf6:	883a      	ldrh	r2, [r7, #0]
 8001cf8:	8c3b      	ldrh	r3, [r7, #32]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d06:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d0a:	f7ff fbaf 	bl	800146c <gfx_writeFastVLine>
  gfx_writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8001d0e:	88fa      	ldrh	r2, [r7, #6]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b218      	sxth	r0, r3
 8001d1c:	88ba      	ldrh	r2, [r7, #4]
 8001d1e:	8c3b      	ldrh	r3, [r7, #32]
 8001d20:	4413      	add	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b219      	sxth	r1, r3
 8001d26:	883a      	ldrh	r2, [r7, #0]
 8001d28:	8c3b      	ldrh	r3, [r7, #32]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d36:	f7ff fb99 	bl	800146c <gfx_writeFastVLine>
  // draw four corners
  gfx_drawCircleHelper(x + r, y + r, r, 1, color);
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	8c3b      	ldrh	r3, [r7, #32]
 8001d3e:	4413      	add	r3, r2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	b218      	sxth	r0, r3
 8001d44:	88ba      	ldrh	r2, [r7, #4]
 8001d46:	8c3b      	ldrh	r3, [r7, #32]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b219      	sxth	r1, r3
 8001d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2301      	movs	r3, #1
 8001d58:	f7ff fda7 	bl	80018aa <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	4413      	add	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	8c3b      	ldrh	r3, [r7, #32]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b218      	sxth	r0, r3
 8001d70:	88ba      	ldrh	r2, [r7, #4]
 8001d72:	8c3b      	ldrh	r3, [r7, #32]
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b219      	sxth	r1, r3
 8001d7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	f7ff fd91 	bl	80018aa <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	8c3b      	ldrh	r3, [r7, #32]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b218      	sxth	r0, r3
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	8c3b      	ldrh	r3, [r7, #32]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b219      	sxth	r1, r3
 8001db0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2304      	movs	r3, #4
 8001dba:	f7ff fd76 	bl	80018aa <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	8c3b      	ldrh	r3, [r7, #32]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	b218      	sxth	r0, r3
 8001dc8:	88ba      	ldrh	r2, [r7, #4]
 8001dca:	883b      	ldrh	r3, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	8c3b      	ldrh	r3, [r7, #32]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b219      	sxth	r1, r3
 8001ddc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2308      	movs	r3, #8
 8001de6:	f7ff fd60 	bl	80018aa <gfx_drawCircleHelper>
  gfx_endWrite();
 8001dea:	f7ff fb97 	bl	800151c <gfx_endWrite>
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}

08001df6 <gfx_fillRoundRect>:
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void gfx_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 8001df6:	b590      	push	{r4, r7, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af02      	add	r7, sp, #8
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	4608      	mov	r0, r1
 8001e00:	4611      	mov	r1, r2
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	80fb      	strh	r3, [r7, #6]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	80bb      	strh	r3, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001e14:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001e18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bfa8      	it	ge
 8001e20:	4613      	movge	r3, r2
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	0fda      	lsrs	r2, r3, #31
 8001e26:	4413      	add	r3, r2
 8001e28:	105b      	asrs	r3, r3, #1
 8001e2a:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 8001e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dd01      	ble.n	8001e3c <gfx_fillRoundRect+0x46>
    r = max_radius;
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	843b      	strh	r3, [r7, #32]
  // smarter version
  gfx_startWrite();
 8001e3c:	f7ff fafb 	bl	8001436 <gfx_startWrite>
  gfx_writeFillRect(x + r, y, w - 2 * r, h, color);
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	8c3b      	ldrh	r3, [r7, #32]
 8001e44:	4413      	add	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b218      	sxth	r0, r3
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	8c3b      	ldrh	r3, [r7, #32]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001e5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4623      	mov	r3, r4
 8001e66:	f7ff fb39 	bl	80014dc <gfx_writeFillRect>
  // draw four corners
  gfx_fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001e6a:	88fa      	ldrh	r2, [r7, #6]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	8c3b      	ldrh	r3, [r7, #32]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b218      	sxth	r0, r3
 8001e7e:	88ba      	ldrh	r2, [r7, #4]
 8001e80:	8c3b      	ldrh	r3, [r7, #32]
 8001e82:	4413      	add	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b219      	sxth	r1, r3
 8001e88:	883a      	ldrh	r2, [r7, #0]
 8001e8a:	8c3b      	ldrh	r3, [r7, #32]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ea0:	9201      	str	r2, [sp, #4]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	f7ff fe06 	bl	8001ab8 <gfx_fillCircleHelper>
  gfx_fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	8c3b      	ldrh	r3, [r7, #32]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b218      	sxth	r0, r3
 8001eb6:	88ba      	ldrh	r2, [r7, #4]
 8001eb8:	8c3b      	ldrh	r3, [r7, #32]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b219      	sxth	r1, r3
 8001ec0:	883a      	ldrh	r2, [r7, #0]
 8001ec2:	8c3b      	ldrh	r3, [r7, #32]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001ed6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed8:	9201      	str	r2, [sp, #4]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2302      	movs	r3, #2
 8001ede:	4622      	mov	r2, r4
 8001ee0:	f7ff fdea 	bl	8001ab8 <gfx_fillCircleHelper>
  gfx_endWrite();
 8001ee4:	f7ff fb1a 	bl	800151c <gfx_endWrite>
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <gfx_drawEllipse>:
/***************************************************************************************
** Function name:           drawEllipse
** Description:             Draw a ellipse outline
***************************************************************************************/
void gfx_drawEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4603      	mov	r3, r0
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	460b      	mov	r3, r1
 8001f00:	81bb      	strh	r3, [r7, #12]
  if (rx<2) return;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f340 80ff 	ble.w	8002108 <gfx_drawEllipse+0x218>
  if (ry<2) return;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	f340 80fd 	ble.w	800210c <gfx_drawEllipse+0x21c>
  int32_t x, y;
  int32_t rx2 = rx * rx;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	623b      	str	r3, [r7, #32]
  int32_t ry2 = ry * ry;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]
  int32_t fx2 = 4 * rx2;
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
  int32_t fy2 = 4 * ry2;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
  int32_t s;

  for (x = 0, y = ry, s = 2*ry2+rx2*(1-2*ry); ry2*x <= rx2*y; x++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005a      	lsls	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	f1c3 0301 	rsb	r3, r3, #1
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	e05a      	b.n	8002008 <gfx_drawEllipse+0x118>
    // These are ordered to minimise coordinate changes in x or y
    // drawPixel can then send fewer bounding box commands
	  gfx_writePixel(x0 + x, y0 + y, color);
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	89fb      	ldrh	r3, [r7, #14]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b218      	sxth	r0, r3
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	89bb      	ldrh	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7ff fa68 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 + y, color);
 8001f72:	89fa      	ldrh	r2, [r7, #14]
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b218      	sxth	r0, r3
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	89bb      	ldrh	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7ff fa58 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 - y, color);
 8001f92:	89fa      	ldrh	r2, [r7, #14]
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	b218      	sxth	r0, r3
 8001f9e:	89ba      	ldrh	r2, [r7, #12]
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7ff fa48 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 + x, y0 - y, color);
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b218      	sxth	r0, r3
 8001fbe:	89ba      	ldrh	r2, [r7, #12]
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff fa38 	bl	8001442 <gfx_writePixel>
    if (s >= 0) {
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0b      	blt.n	8001ff0 <gfx_drawEllipse+0x100>
      s += fx2 * (1 - y);
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	f1c3 0301 	rsb	r3, r3, #1
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	4413      	add	r3, r2
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
      y--;
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    s += ry2 * ((4 * x) + 6);
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	4413      	add	r3, r2
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  for (x = 0, y = ry, s = 2*ry2+rx2*(1-2*ry); ry2*x <= rx2*y; x++) {
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	3301      	adds	r3, #1
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200c:	fb02 f203 	mul.w	r2, r2, r3
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	429a      	cmp	r2, r3
 800201a:	dd9a      	ble.n	8001f52 <gfx_drawEllipse+0x62>
  }

  for (x = rx, y = 0, s = 2*rx2+ry2*(1-2*rx); rx2*y <= ry2*x; y++) {
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	005a      	lsls	r2, r3, #1
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	f1c3 0301 	rsb	r3, r3, #1
 8002030:	69f9      	ldr	r1, [r7, #28]
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e05a      	b.n	80020f2 <gfx_drawEllipse+0x202>
    // These are ordered to minimise coordinate changes in x or y
    // drawPixel can then send fewer bounding box commands
	  gfx_writePixel(x0 + x, y0 + y, color);
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	b29a      	uxth	r2, r3
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	4413      	add	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	b218      	sxth	r0, r3
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	b29a      	uxth	r2, r3
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21b      	sxth	r3, r3
 8002054:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002056:	4619      	mov	r1, r3
 8002058:	f7ff f9f3 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 + y, color);
 800205c:	89fa      	ldrh	r2, [r7, #14]
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	b29b      	uxth	r3, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b218      	sxth	r0, r3
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	b29a      	uxth	r2, r3
 800206c:	89bb      	ldrh	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff f9e3 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 - y, color);
 800207c:	89fa      	ldrh	r2, [r7, #14]
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	b29b      	uxth	r3, r3
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	b218      	sxth	r0, r3
 8002088:	89ba      	ldrh	r2, [r7, #12]
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	b29b      	uxth	r3, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	b21b      	sxth	r3, r3
 8002094:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002096:	4619      	mov	r1, r3
 8002098:	f7ff f9d3 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 + x, y0 - y, color);
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	b29a      	uxth	r2, r3
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b218      	sxth	r0, r3
 80020a8:	89ba      	ldrh	r2, [r7, #12]
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7ff f9c3 	bl	8001442 <gfx_writePixel>
    if (s >= 0)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <gfx_drawEllipse+0x1ea>
    {
      s += fy2 * (1 - x);
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	f1c3 0301 	rsb	r3, r3, #1
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	4413      	add	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
      x--;
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	3b01      	subs	r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    s += rx2 * ((4 * y) + 6);
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3306      	adds	r3, #6
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	4413      	add	r3, r2
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (x = rx, y = 0, s = 2*rx2+ry2*(1-2*rx); rx2*y <= ry2*x; y++) {
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	3301      	adds	r3, #1
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	429a      	cmp	r2, r3
 8002104:	dd9a      	ble.n	800203c <gfx_drawEllipse+0x14c>
 8002106:	e002      	b.n	800210e <gfx_drawEllipse+0x21e>
  if (rx<2) return;
 8002108:	bf00      	nop
 800210a:	e000      	b.n	800210e <gfx_drawEllipse+0x21e>
  if (ry<2) return;
 800210c:	bf00      	nop
  }

}
 800210e:	3730      	adds	r7, #48	; 0x30
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0000      	movs	r0, r0
	...

08002118 <gfx_FillRectWithAngle>:

void gfx_drawRectWithAngle(int x, int y, int w, int h,int angle,int color){

}

void gfx_FillRectWithAngle(int x, int y, int w, int h,int angle,int color){
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b091      	sub	sp, #68	; 0x44
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
	int revert=0;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
	int x0=0,y0=0,x1=0,y1=0,xa=0,ya=0;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
	float cosAngle=0.0,sinAngle=0.0;
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
	cosAngle=cos(angle*3.14/180);
 800214e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002150:	f7fe f958 	bl	8000404 <__aeabi_i2d>
 8002154:	a358      	add	r3, pc, #352	; (adr r3, 80022b8 <gfx_FillRectWithAngle+0x1a0>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe f9bd 	bl	80004d8 <__aeabi_dmul>
 800215e:	4603      	mov	r3, r0
 8002160:	460c      	mov	r4, r1
 8002162:	4618      	mov	r0, r3
 8002164:	4621      	mov	r1, r4
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <gfx_FillRectWithAngle+0x1a8>)
 800216c:	f7fe fade 	bl	800072c <__aeabi_ddiv>
 8002170:	4603      	mov	r3, r0
 8002172:	460c      	mov	r4, r1
 8002174:	4618      	mov	r0, r3
 8002176:	4621      	mov	r1, r4
 8002178:	f003 fc3a 	bl	80059f0 <cos>
 800217c:	4603      	mov	r3, r0
 800217e:	460c      	mov	r4, r1
 8002180:	4618      	mov	r0, r3
 8002182:	4621      	mov	r1, r4
 8002184:	f7fe fc6a 	bl	8000a5c <__aeabi_d2f>
 8002188:	4603      	mov	r3, r0
 800218a:	617b      	str	r3, [r7, #20]
	sinAngle=sin(angle*3.14/180);
 800218c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800218e:	f7fe f939 	bl	8000404 <__aeabi_i2d>
 8002192:	a349      	add	r3, pc, #292	; (adr r3, 80022b8 <gfx_FillRectWithAngle+0x1a0>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f99e 	bl	80004d8 <__aeabi_dmul>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	4618      	mov	r0, r3
 80021a2:	4621      	mov	r1, r4
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <gfx_FillRectWithAngle+0x1a8>)
 80021aa:	f7fe fabf 	bl	800072c <__aeabi_ddiv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	4618      	mov	r0, r3
 80021b4:	4621      	mov	r1, r4
 80021b6:	f003 fc51 	bl	8005a5c <sin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	4618      	mov	r0, r3
 80021c0:	4621      	mov	r1, r4
 80021c2:	f7fe fc4b 	bl	8000a5c <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]

	xa=w*cosAngle;
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fd50 	bl	8000c70 <__aeabi_i2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd9f 	bl	8000d18 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe feeb 	bl	8000fb8 <__aeabi_f2iz>
 80021e2:	4603      	mov	r3, r0
 80021e4:	61fb      	str	r3, [r7, #28]
	ya=w*sinAngle;
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe fd42 	bl	8000c70 <__aeabi_i2f>
 80021ec:	4603      	mov	r3, r0
 80021ee:	6939      	ldr	r1, [r7, #16]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd91 	bl	8000d18 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fedd 	bl	8000fb8 <__aeabi_f2iz>
 80021fe:	4603      	mov	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]

	if((angle>90 && angle<180 )|| ((angle>270 && angle<360 ))){
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	2b5a      	cmp	r3, #90	; 0x5a
 8002206:	dd02      	ble.n	800220e <gfx_FillRectWithAngle+0xf6>
 8002208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220a:	2bb3      	cmp	r3, #179	; 0xb3
 800220c:	dd07      	ble.n	800221e <gfx_FillRectWithAngle+0x106>
 800220e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002210:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002214:	dd05      	ble.n	8002222 <gfx_FillRectWithAngle+0x10a>
 8002216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002218:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800221c:	da01      	bge.n	8002222 <gfx_FillRectWithAngle+0x10a>
		revert=1;
 800221e:	2301      	movs	r3, #1
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
	}

	for(int i=0;i<h;i++){
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002226:	e03c      	b.n	80022a2 <gfx_FillRectWithAngle+0x18a>
		x0=x+i;
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	4413      	add	r3, r2
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
		if(revert){
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <gfx_FillRectWithAngle+0x128>
			y0=y+i;
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	4413      	add	r3, r2
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
 800223e:	e003      	b.n	8002248 <gfx_FillRectWithAngle+0x130>
		}
		else{
			y0=y-i;
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
		}
		x1=x0+xa;
 8002248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
		y1=y0+ya;
 8002250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	623b      	str	r3, [r7, #32]
		gfx_drawLine(x0,y0,x1,y1, color);
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	b218      	sxth	r0, r3
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	b219      	sxth	r1, r3
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	b21a      	sxth	r2, r3
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	b21c      	sxth	r4, r3
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	b29b      	uxth	r3, r3
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4623      	mov	r3, r4
 8002270:	f7ff f9c6 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(x0,y0+1,x1,y1+1, color);
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	b218      	sxth	r0, r3
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	b29b      	uxth	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	b29b      	uxth	r3, r3
 8002280:	b219      	sxth	r1, r3
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	b21a      	sxth	r2, r3
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	b29b      	uxth	r3, r3
 800228a:	3301      	adds	r3, #1
 800228c:	b29b      	uxth	r3, r3
 800228e:	b21c      	sxth	r4, r3
 8002290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002292:	b29b      	uxth	r3, r3
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4623      	mov	r3, r4
 8002298:	f7ff f9b2 	bl	8001600 <gfx_drawLine>
	for(int i=0;i<h;i++){
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	3301      	adds	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbbe      	blt.n	8002228 <gfx_FillRectWithAngle+0x110>

	}

}
 80022aa:	bf00      	nop
 80022ac:	373c      	adds	r7, #60	; 0x3c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	f3af 8000 	nop.w
 80022b8:	51eb851f 	.word	0x51eb851f
 80022bc:	40091eb8 	.word	0x40091eb8
 80022c0:	40668000 	.word	0x40668000

080022c4 <gfx_drawRGBBitmap1>:
    @param    bitmap  byte array with 16-bit color bitmap
    @param    w   Width of bitmap in pixels
    @param    h   Height of bitmap in pixels
*/
/**************************************************************************/
void gfx_drawRGBBitmap1(int16_t x, int16_t y, uint16_t *bitmap, int16_t w, int16_t h) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60ba      	str	r2, [r7, #8]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	81fb      	strh	r3, [r7, #14]
 80022d2:	460b      	mov	r3, r1
 80022d4:	81bb      	strh	r3, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	80fb      	strh	r3, [r7, #6]
	gfx_startWrite();
 80022da:	f7ff f8ac 	bl	8001436 <gfx_startWrite>
  for (int16_t j = 0; j < h; j++, y++) {
 80022de:	2300      	movs	r3, #0
 80022e0:	82fb      	strh	r3, [r7, #22]
 80022e2:	e031      	b.n	8002348 <gfx_drawRGBBitmap1+0x84>
    for (int16_t i = 0; i < w; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	82bb      	strh	r3, [r7, #20]
 80022e8:	e01c      	b.n	8002324 <gfx_drawRGBBitmap1+0x60>
    	gfx_writePixel(x + i, y, bitmap[j * w + i]);
 80022ea:	89fa      	ldrh	r2, [r7, #14]
 80022ec:	8abb      	ldrh	r3, [r7, #20]
 80022ee:	4413      	add	r3, r2
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b218      	sxth	r0, r3
 80022f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022fc:	fb02 f203 	mul.w	r2, r2, r3
 8002300:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	4413      	add	r3, r2
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002312:	4619      	mov	r1, r3
 8002314:	f7ff f895 	bl	8001442 <gfx_writePixel>
    for (int16_t i = 0; i < w; i++) {
 8002318:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800231c:	b29b      	uxth	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b29b      	uxth	r3, r3
 8002322:	82bb      	strh	r3, [r7, #20]
 8002324:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbdc      	blt.n	80022ea <gfx_drawRGBBitmap1+0x26>
  for (int16_t j = 0; j < h; j++, y++) {
 8002330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002334:	b29b      	uxth	r3, r3
 8002336:	3301      	adds	r3, #1
 8002338:	b29b      	uxth	r3, r3
 800233a:	82fb      	strh	r3, [r7, #22]
 800233c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002340:	b29b      	uxth	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	b29b      	uxth	r3, r3
 8002346:	81bb      	strh	r3, [r7, #12]
 8002348:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800234c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbc7      	blt.n	80022e4 <gfx_drawRGBBitmap1+0x20>
    }
  }
  gfx_endWrite();
 8002354:	f7ff f8e2 	bl	800151c <gfx_endWrite>
}
 8002358:	bf00      	nop
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <gfx_drawChar1>:
   no background)
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void gfx_drawChar1(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b08d      	sub	sp, #52	; 0x34
 8002364:	af02      	add	r7, sp, #8
 8002366:	4604      	mov	r4, r0
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	80fb      	strh	r3, [r7, #6]
 8002372:	4603      	mov	r3, r0
 8002374:	80bb      	strh	r3, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
 800237a:	4613      	mov	r3, r2
 800237c:	803b      	strh	r3, [r7, #0]

  if (!gfxFont) { // 'Classic' built-in font
 800237e:	4bb8      	ldr	r3, [pc, #736]	; (8002660 <gfx_drawChar1+0x300>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8126 	bne.w	80025d4 <gfx_drawChar1+0x274>

    if ((x >= _width) ||              // Clip right
 8002388:	4bb6      	ldr	r3, [pc, #728]	; (8002664 <gfx_drawChar1+0x304>)
 800238a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002392:	429a      	cmp	r2, r3
 8002394:	f280 81ec 	bge.w	8002770 <gfx_drawChar1+0x410>
        (y >= _height) ||             // Clip bottom
 8002398:	4bb3      	ldr	r3, [pc, #716]	; (8002668 <gfx_drawChar1+0x308>)
 800239a:	f9b3 3000 	ldrsh.w	r3, [r3]
    if ((x >= _width) ||              // Clip right
 800239e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	f280 81e4 	bge.w	8002770 <gfx_drawChar1+0x410>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80023a8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80023ac:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	440b      	add	r3, r1
 80023ba:	3b01      	subs	r3, #1
        (y >= _height) ||             // Clip bottom
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f2c0 81d7 	blt.w	8002770 <gfx_drawChar1+0x410>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 80023c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f2c0 81cd 	blt.w	8002770 <gfx_drawChar1+0x410>
      return;

    if (!_cp437 && (c >= 176))
 80023d6:	4ba5      	ldr	r3, [pc, #660]	; (800266c <gfx_drawChar1+0x30c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <gfx_drawChar1+0x90>
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	2baf      	cmp	r3, #175	; 0xaf
 80023e8:	d902      	bls.n	80023f0 <gfx_drawChar1+0x90>
      c++; // Handle 'classic' charset behavior
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	3301      	adds	r3, #1
 80023ee:	70fb      	strb	r3, [r7, #3]

    gfx_startWrite();
 80023f0:	f7ff f821 	bl	8001436 <gfx_startWrite>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023fa:	e0b1      	b.n	8002560 <gfx_drawChar1+0x200>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002408:	4413      	add	r3, r2
 800240a:	4a99      	ldr	r2, [pc, #612]	; (8002670 <gfx_drawChar1+0x310>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002412:	2300      	movs	r3, #0
 8002414:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002418:	e096      	b.n	8002548 <gfx_drawChar1+0x1e8>
        if (line & 1) {
 800241a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d040      	beq.n	80024a8 <gfx_drawChar1+0x148>
          if (size_x == 1 && size_y == 1)
 8002426:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d116      	bne.n	800245c <gfx_drawChar1+0xfc>
 800242e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002432:	2b01      	cmp	r3, #1
 8002434:	d112      	bne.n	800245c <gfx_drawChar1+0xfc>
        	  gfx_writePixel(x + i, y + j, color);
 8002436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800243a:	b29a      	uxth	r2, r3
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4413      	add	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	b218      	sxth	r0, r3
 8002444:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002448:	b29a      	uxth	r2, r3
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21b      	sxth	r3, r3
 8002452:	883a      	ldrh	r2, [r7, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fff4 	bl	8001442 <gfx_writePixel>
 800245a:	e069      	b.n	8002530 <gfx_drawChar1+0x1d0>
          else
        	  gfx_writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800245c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002460:	b29b      	uxth	r3, r3
 8002462:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002466:	b292      	uxth	r2, r2
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	b29a      	uxth	r2, r3
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	4413      	add	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	b218      	sxth	r0, r3
 8002476:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800247a:	b29b      	uxth	r3, r3
 800247c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002480:	b292      	uxth	r2, r2
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	b29a      	uxth	r2, r3
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	b219      	sxth	r1, r3
 8002490:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002494:	b21a      	sxth	r2, r3
 8002496:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800249a:	b21c      	sxth	r4, r3
 800249c:	883b      	ldrh	r3, [r7, #0]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4623      	mov	r3, r4
 80024a2:	f7ff f81b 	bl	80014dc <gfx_writeFillRect>
 80024a6:	e043      	b.n	8002530 <gfx_drawChar1+0x1d0>
                          color);
        } else if (bg != color) {
 80024a8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80024aa:	883b      	ldrh	r3, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d03f      	beq.n	8002530 <gfx_drawChar1+0x1d0>
          if (size_x == 1 && size_y == 1)
 80024b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d116      	bne.n	80024e6 <gfx_drawChar1+0x186>
 80024b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d112      	bne.n	80024e6 <gfx_drawChar1+0x186>
        	  gfx_writePixel(x + i, y + j, bg);
 80024c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4413      	add	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b218      	sxth	r0, r3
 80024ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	88bb      	ldrh	r3, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b21b      	sxth	r3, r3
 80024dc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe ffaf 	bl	8001442 <gfx_writePixel>
 80024e4:	e024      	b.n	8002530 <gfx_drawChar1+0x1d0>
          else
        	  gfx_writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80024e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80024f0:	b292      	uxth	r2, r2
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4413      	add	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	b218      	sxth	r0, r3
 8002500:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002504:	b29b      	uxth	r3, r3
 8002506:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800250a:	b292      	uxth	r2, r2
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	b29a      	uxth	r2, r3
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	b29b      	uxth	r3, r3
 8002518:	b219      	sxth	r1, r3
 800251a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800251e:	b21a      	sxth	r2, r3
 8002520:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002524:	b21c      	sxth	r4, r3
 8002526:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4623      	mov	r3, r4
 800252c:	f7fe ffd6 	bl	80014dc <gfx_writeFillRect>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002530:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3301      	adds	r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800253e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002548:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800254c:	2b07      	cmp	r3, #7
 800254e:	f77f af64 	ble.w	800241a <gfx_drawChar1+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002564:	2b04      	cmp	r3, #4
 8002566:	f77f af49 	ble.w	80023fc <gfx_drawChar1+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 800256a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800256c:	883b      	ldrh	r3, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d02d      	beq.n	80025ce <gfx_drawChar1+0x26e>
      if (size_x == 1 && size_y == 1)
 8002572:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <gfx_drawChar1+0x238>
 800257a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10a      	bne.n	8002598 <gfx_drawChar1+0x238>
    	  gfx_writeFastVLine(x + 5, y, 8, bg);
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	3305      	adds	r3, #5
 8002586:	b29b      	uxth	r3, r3
 8002588:	b218      	sxth	r0, r3
 800258a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800258c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002590:	2208      	movs	r2, #8
 8002592:	f7fe ff6b 	bl	800146c <gfx_writeFastVLine>
 8002596:	e01a      	b.n	80025ce <gfx_drawChar1+0x26e>
      else
    	  gfx_writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002598:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4413      	add	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	b218      	sxth	r0, r3
 80025ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025b2:	b21a      	sxth	r2, r3
 80025b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b21c      	sxth	r4, r3
 80025c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80025c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4623      	mov	r3, r4
 80025ca:	f7fe ff87 	bl	80014dc <gfx_writeFillRect>
    }
    gfx_endWrite();
 80025ce:	f7fe ffa5 	bl	800151c <gfx_endWrite>
 80025d2:	e0ce      	b.n	8002772 <gfx_drawChar1+0x412>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <gfx_drawChar1+0x300>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3308      	adds	r3, #8
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	70fb      	strb	r3, [r7, #3]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <gfx_drawChar1+0x300>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fdeb 	bl	80011c6 <pgm_read_glyph_ptr>
 80025f0:	6178      	str	r0, [r7, #20]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <gfx_drawChar1+0x300>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fdf5 	bl	80011e6 <pgm_read_bitmap_ptr>
 80025fc:	6138      	str	r0, [r7, #16]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	847b      	strh	r3, [r7, #34]	; 0x22
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	789b      	ldrb	r3, [r3, #2]
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	78db      	ldrb	r3, [r3, #3]
 800260e:	73bb      	strb	r3, [r7, #14]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3305      	adds	r3, #5
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	737b      	strb	r3, [r7, #13]
           yo = pgm_read_byte(&glyph->yOffset);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3306      	adds	r3, #6
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	733b      	strb	r3, [r7, #12]
    uint8_t xx, yy, bits = 0, bit = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	2300      	movs	r3, #0
 8002626:	77bb      	strb	r3, [r7, #30]
    int16_t xo16 = 0, yo16 = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	83bb      	strh	r3, [r7, #28]
 800262c:	2300      	movs	r3, #0
 800262e:	837b      	strh	r3, [r7, #26]

    if (size_x > 1 || size_y > 1) {
 8002630:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d803      	bhi.n	8002640 <gfx_drawChar1+0x2e0>
 8002638:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800263c:	2b01      	cmp	r3, #1
 800263e:	d905      	bls.n	800264c <gfx_drawChar1+0x2ec>
      xo16 = xo;
 8002640:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002644:	83bb      	strh	r3, [r7, #28]
      yo16 = yo;
 8002646:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800264a:	837b      	strh	r3, [r7, #26]
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    gfx_startWrite();
 800264c:	f7fe fef3 	bl	8001436 <gfx_startWrite>
    for (yy = 0; yy < h; yy++) {
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3020 	strb.w	r3, [r7, #32]
 8002656:	e082      	b.n	800275e <gfx_drawChar1+0x3fe>
      for (xx = 0; xx < w; xx++) {
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800265e:	e074      	b.n	800274a <gfx_drawChar1+0x3ea>
 8002660:	2000008c 	.word	0x2000008c
 8002664:	200000b8 	.word	0x200000b8
 8002668:	200000c0 	.word	0x200000c0
 800266c:	200000a6 	.word	0x200000a6
 8002670:	08006a88 	.word	0x08006a88
        if (!(bit++ & 7)) {
 8002674:	7fbb      	ldrb	r3, [r7, #30]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	77ba      	strb	r2, [r7, #30]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <gfx_drawChar1+0x332>
          bits = pgm_read_byte(&bitmap[bo++]);
 8002682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	847a      	strh	r2, [r7, #34]	; 0x22
 8002688:	461a      	mov	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	77fb      	strb	r3, [r7, #31]
        }
        if (bits & 0x80) {
 8002692:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da4f      	bge.n	800273a <gfx_drawChar1+0x3da>
          if (size_x == 1 && size_y == 1) {
 800269a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d120      	bne.n	80026e4 <gfx_drawChar1+0x384>
 80026a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d11c      	bne.n	80026e4 <gfx_drawChar1+0x384>
            gfx_writePixel(x + xo + xx, y + yo + yy, color);
 80026aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	4413      	add	r3, r2
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4413      	add	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	b218      	sxth	r0, r3
 80026c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	88bb      	ldrh	r3, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b21b      	sxth	r3, r3
 80026da:	883a      	ldrh	r2, [r7, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe feb0 	bl	8001442 <gfx_writePixel>
 80026e2:	e02a      	b.n	800273a <gfx_drawChar1+0x3da>
          } else {
            gfx_writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80026e4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80026e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026ec:	4413      	add	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80026f4:	b292      	uxth	r2, r2
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	4413      	add	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	b218      	sxth	r0, r3
 8002704:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002708:	f897 3020 	ldrb.w	r3, [r7, #32]
 800270c:	4413      	add	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002714:	b292      	uxth	r2, r2
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	88bb      	ldrh	r3, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	b29b      	uxth	r3, r3
 8002722:	b219      	sxth	r1, r3
 8002724:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002728:	b21a      	sxth	r2, r3
 800272a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800272e:	b21c      	sxth	r4, r3
 8002730:	883b      	ldrh	r3, [r7, #0]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4623      	mov	r3, r4
 8002736:	f7fe fed1 	bl	80014dc <gfx_writeFillRect>
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
      for (xx = 0; xx < w; xx++) {
 8002740:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002744:	3301      	adds	r3, #1
 8002746:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800274a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	429a      	cmp	r2, r3
 8002752:	d38f      	bcc.n	8002674 <gfx_drawChar1+0x314>
    for (yy = 0; yy < h; yy++) {
 8002754:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002758:	3301      	adds	r3, #1
 800275a:	f887 3020 	strb.w	r3, [r7, #32]
 800275e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002762:	7bbb      	ldrb	r3, [r7, #14]
 8002764:	429a      	cmp	r2, r3
 8002766:	f4ff af77 	bcc.w	8002658 <gfx_drawChar1+0x2f8>
      }
    }
    gfx_endWrite();
 800276a:	f7fe fed7 	bl	800151c <gfx_endWrite>
 800276e:	e000      	b.n	8002772 <gfx_drawChar1+0x412>
      return;
 8002770:	bf00      	nop

  } // End classic vs custom font
}
 8002772:	372c      	adds	r7, #44	; 0x2c
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}

08002778 <gfx_write>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
void gfx_write(uint8_t c) {
 8002778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277a:	b08b      	sub	sp, #44	; 0x2c
 800277c:	af04      	add	r7, sp, #16
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if (!gfxFont) { // 'Classic' built-in font
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <gfx_write+0x230>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d167      	bne.n	800285a <gfx_write+0xe2>

    if (c == '\n') {              // Newline?
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d111      	bne.n	80027b4 <gfx_write+0x3c>
      cursor_x = 0;               // Reset x to zero,
 8002790:	4b86      	ldr	r3, [pc, #536]	; (80029ac <gfx_write+0x234>)
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]
      cursor_y += textsize_y * 8; // advance y one line
 8002796:	4b86      	ldr	r3, [pc, #536]	; (80029b0 <gfx_write+0x238>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b84      	ldr	r3, [pc, #528]	; (80029b4 <gfx_write+0x23c>)
 80027a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <gfx_write+0x23c>)
 80027b0:	801a      	strh	r2, [r3, #0]
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
}
 80027b2:	e0f4      	b.n	800299e <gfx_write+0x226>
    } else if (c != '\r') {       // Ignore carriage returns
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b0d      	cmp	r3, #13
 80027b8:	f000 80f1 	beq.w	800299e <gfx_write+0x226>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80027bc:	4b7e      	ldr	r3, [pc, #504]	; (80029b8 <gfx_write+0x240>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d021      	beq.n	8002808 <gfx_write+0x90>
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <gfx_write+0x234>)
 80027c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <gfx_write+0x244>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	440b      	add	r3, r1
 80027dc:	4a78      	ldr	r2, [pc, #480]	; (80029c0 <gfx_write+0x248>)
 80027de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80027e2:	4293      	cmp	r3, r2
 80027e4:	dd10      	ble.n	8002808 <gfx_write+0x90>
        cursor_x = 0;                                       // Reset x to zero,
 80027e6:	4b71      	ldr	r3, [pc, #452]	; (80029ac <gfx_write+0x234>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // advance y one line
 80027ec:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <gfx_write+0x238>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <gfx_write+0x23c>)
 80027f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4413      	add	r3, r2
 8002800:	b29b      	uxth	r3, r3
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b6b      	ldr	r3, [pc, #428]	; (80029b4 <gfx_write+0x23c>)
 8002806:	801a      	strh	r2, [r3, #0]
      gfx_drawChar1(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <gfx_write+0x234>)
 800280a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800280e:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <gfx_write+0x23c>)
 8002810:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002814:	4b6b      	ldr	r3, [pc, #428]	; (80029c4 <gfx_write+0x24c>)
 8002816:	881e      	ldrh	r6, [r3, #0]
 8002818:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <gfx_write+0x250>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	4a67      	ldr	r2, [pc, #412]	; (80029bc <gfx_write+0x244>)
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	4963      	ldr	r1, [pc, #396]	; (80029b0 <gfx_write+0x238>)
 8002822:	7809      	ldrb	r1, [r1, #0]
 8002824:	79fd      	ldrb	r5, [r7, #7]
 8002826:	9102      	str	r1, [sp, #8]
 8002828:	9201      	str	r2, [sp, #4]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	4633      	mov	r3, r6
 800282e:	462a      	mov	r2, r5
 8002830:	4621      	mov	r1, r4
 8002832:	f7ff fd95 	bl	8002360 <gfx_drawChar1>
      cursor_x += textsize_x * 6; // Advance x one char
 8002836:	4b61      	ldr	r3, [pc, #388]	; (80029bc <gfx_write+0x244>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	4b59      	ldr	r3, [pc, #356]	; (80029ac <gfx_write+0x234>)
 8002848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4413      	add	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21a      	sxth	r2, r3
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <gfx_write+0x234>)
 8002856:	801a      	strh	r2, [r3, #0]
}
 8002858:	e0a1      	b.n	800299e <gfx_write+0x226>
    if (c == '\n') {
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	2b0a      	cmp	r3, #10
 800285e:	d117      	bne.n	8002890 <gfx_write+0x118>
      cursor_x = 0;
 8002860:	4b52      	ldr	r3, [pc, #328]	; (80029ac <gfx_write+0x234>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002866:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <gfx_write+0x238>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4a4e      	ldr	r2, [pc, #312]	; (80029a8 <gfx_write+0x230>)
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	320c      	adds	r2, #12
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	b292      	uxth	r2, r2
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	b29a      	uxth	r2, r3
      cursor_y +=
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <gfx_write+0x23c>)
 800287e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4413      	add	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	b21a      	sxth	r2, r3
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <gfx_write+0x23c>)
 800288c:	801a      	strh	r2, [r3, #0]
}
 800288e:	e086      	b.n	800299e <gfx_write+0x226>
    } else if (c != '\r') {
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b0d      	cmp	r3, #13
 8002894:	f000 8083 	beq.w	800299e <gfx_write+0x226>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <gfx_write+0x230>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3308      	adds	r3, #8
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80028a2:	79fa      	ldrb	r2, [r7, #7]
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d379      	bcc.n	800299e <gfx_write+0x226>
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <gfx_write+0x230>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330a      	adds	r3, #10
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	79fa      	ldrb	r2, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d872      	bhi.n	800299e <gfx_write+0x226>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80028b8:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <gfx_write+0x230>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	79fa      	ldrb	r2, [r7, #7]
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7fe fc7e 	bl	80011c6 <pgm_read_glyph_ptr>
 80028ca:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04c      	beq.n	8002978 <gfx_write+0x200>
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d049      	beq.n	8002978 <gfx_write+0x200>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	3305      	adds	r3, #5
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <gfx_write+0x240>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d029      	beq.n	800294a <gfx_write+0x1d2>
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <gfx_write+0x234>)
 80028f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <gfx_write+0x244>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	4413      	add	r3, r2
 800290c:	fb03 f300 	mul.w	r3, r3, r0
 8002910:	440b      	add	r3, r1
 8002912:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <gfx_write+0x248>)
 8002914:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002918:	4293      	cmp	r3, r2
 800291a:	dd16      	ble.n	800294a <gfx_write+0x1d2>
            cursor_x = 0;
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <gfx_write+0x234>)
 800291e:	2200      	movs	r2, #0
 8002920:	801a      	strh	r2, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <gfx_write+0x238>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <gfx_write+0x230>)
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	320c      	adds	r2, #12
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	b292      	uxth	r2, r2
            cursor_y += (int16_t)textsize_y *
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <gfx_write+0x23c>)
 800293a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4413      	add	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	b21a      	sxth	r2, r3
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <gfx_write+0x23c>)
 8002948:	801a      	strh	r2, [r3, #0]
          gfx_drawChar1(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <gfx_write+0x234>)
 800294c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <gfx_write+0x23c>)
 8002952:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <gfx_write+0x24c>)
 8002958:	881e      	ldrh	r6, [r3, #0]
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <gfx_write+0x250>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <gfx_write+0x244>)
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	4913      	ldr	r1, [pc, #76]	; (80029b0 <gfx_write+0x238>)
 8002964:	7809      	ldrb	r1, [r1, #0]
 8002966:	79fd      	ldrb	r5, [r7, #7]
 8002968:	9102      	str	r1, [sp, #8]
 800296a:	9201      	str	r2, [sp, #4]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4633      	mov	r3, r6
 8002970:	462a      	mov	r2, r5
 8002972:	4621      	mov	r1, r4
 8002974:	f7ff fcf4 	bl	8002360 <gfx_drawChar1>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	3304      	adds	r3, #4
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <gfx_write+0x244>)
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	b292      	uxth	r2, r2
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	b29a      	uxth	r2, r3
        cursor_x +=
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <gfx_write+0x234>)
 800298e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002992:	b29b      	uxth	r3, r3
 8002994:	4413      	add	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <gfx_write+0x234>)
 800299c:	801a      	strh	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000008c 	.word	0x2000008c
 80029ac:	200000bc 	.word	0x200000bc
 80029b0:	200000c7 	.word	0x200000c7
 80029b4:	20000084 	.word	0x20000084
 80029b8:	200000be 	.word	0x200000be
 80029bc:	20000090 	.word	0x20000090
 80029c0:	200000b8 	.word	0x200000b8
 80029c4:	200000c8 	.word	0x200000c8
 80029c8:	200000c4 	.word	0x200000c4

080029cc <gfx_print>:

void gfx_print(char * prt){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	while(*prt!=0){
 80029d4:	e007      	b.n	80029e6 <gfx_print+0x1a>
		gfx_write(*prt);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fecc 	bl	8002778 <gfx_write>
		prt++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3301      	adds	r3, #1
 80029e4:	607b      	str	r3, [r7, #4]
	while(*prt!=0){
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f3      	bne.n	80029d6 <gfx_print+0xa>
	}
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <gfx_setTextSize1>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void gfx_setTextSize1(uint8_t s_x, uint8_t s_y) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	460a      	mov	r2, r1
 8002a02:	71fb      	strb	r3, [r7, #7]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71bb      	strb	r3, [r7, #6]
  textsize_x = (s_x > 0) ? s_x : 1;
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <gfx_setTextSize1+0x1a>
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	e000      	b.n	8002a14 <gfx_setTextSize1+0x1c>
 8002a12:	2301      	movs	r3, #1
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <gfx_setTextSize1+0x3c>)
 8002a16:	7013      	strb	r3, [r2, #0]
  textsize_y = (s_y > 0) ? s_y : 1;
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <gfx_setTextSize1+0x2a>
 8002a1e:	79bb      	ldrb	r3, [r7, #6]
 8002a20:	e000      	b.n	8002a24 <gfx_setTextSize1+0x2c>
 8002a22:	2301      	movs	r3, #1
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <gfx_setTextSize1+0x40>)
 8002a26:	7013      	strb	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000090 	.word	0x20000090
 8002a38:	200000c7 	.word	0x200000c7

08002a3c <gfx_setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void gfx_setFont(const GFXfont *f) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if (f) {          // Font struct pointer passed in?
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <gfx_setFont+0x2a>
    if (!gfxFont) { // And no current font struct?
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <gfx_setFont+0x54>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <gfx_setFont+0x44>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <gfx_setFont+0x58>)
 8002a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3306      	adds	r3, #6
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <gfx_setFont+0x58>)
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	e00c      	b.n	8002a80 <gfx_setFont+0x44>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <gfx_setFont+0x54>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <gfx_setFont+0x44>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <gfx_setFont+0x58>)
 8002a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b06      	subs	r3, #6
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <gfx_setFont+0x58>)
 8002a7e:	801a      	strh	r2, [r3, #0]
  }
  gfxFont = (GFXfont *)f;
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <gfx_setFont+0x54>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	2000008c 	.word	0x2000008c
 8002a94:	20000084 	.word	0x20000084

08002a98 <gfx_btn_initButton>:
   @param    textsize The font magnification of the label text
*/
/**************************************************************************/
// Classic initButton() function: pass center & size
void gfx_btn_initButton(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t outline, uint16_t fill, uint16_t textcolor,
                                     char *label, uint8_t textsize) {
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af06      	add	r7, sp, #24
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	80fb      	strh	r3, [r7, #6]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80bb      	strh	r3, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	807b      	strh	r3, [r7, #2]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	803b      	strh	r3, [r7, #0]
  // Tweak arguments and pass to the newer initButtonUL() function...
	gfx_btn_initButtonUL( x - (w / 2), y - (h / 2), w, h, outline, fill, textcolor, label, textsize);
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b218      	sxth	r0, r3
 8002ac4:	88ba      	ldrh	r2, [r7, #4]
 8002ac6:	883b      	ldrh	r3, [r7, #0]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b219      	sxth	r1, r3
 8002ad2:	883c      	ldrh	r4, [r7, #0]
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ada:	9304      	str	r3, [sp, #16]
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	8c3b      	ldrh	r3, [r7, #32]
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	8bbb      	ldrh	r3, [r7, #28]
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	8b3b      	ldrh	r3, [r7, #24]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4623      	mov	r3, r4
 8002aee:	f000 f804 	bl	8002afa <gfx_btn_initButtonUL>
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd90      	pop	{r4, r7, pc}

08002afa <gfx_btn_initButtonUL>:
/**************************************************************************/
void gfx_btn_initButtonUL( int16_t x1,
                                       int16_t y1, uint16_t w, uint16_t h,
                                       uint16_t outline, uint16_t fill,
                                       uint16_t textcolor, char *label,
                                       uint8_t textsize) {
 8002afa:	b590      	push	{r4, r7, lr}
 8002afc:	b089      	sub	sp, #36	; 0x24
 8002afe:	af06      	add	r7, sp, #24
 8002b00:	4604      	mov	r4, r0
 8002b02:	4608      	mov	r0, r1
 8002b04:	4611      	mov	r1, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	4623      	mov	r3, r4
 8002b0a:	80fb      	strh	r3, [r7, #6]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	80bb      	strh	r3, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	803b      	strh	r3, [r7, #0]
	gfx_btn_initButtonUL1( x1, y1, w, h, outline, fill, textcolor, label, textsize,
 8002b18:	883c      	ldrh	r4, [r7, #0]
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b28:	9305      	str	r3, [sp, #20]
 8002b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b2e:	9304      	str	r3, [sp, #16]
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	9303      	str	r3, [sp, #12]
 8002b34:	8c3b      	ldrh	r3, [r7, #32]
 8002b36:	9302      	str	r3, [sp, #8]
 8002b38:	8bbb      	ldrh	r3, [r7, #28]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	8b3b      	ldrh	r3, [r7, #24]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4623      	mov	r3, r4
 8002b42:	f000 f805 	bl	8002b50 <gfx_btn_initButtonUL1>
               textsize);
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}
	...

08002b50 <gfx_btn_initButtonUL1>:
/**************************************************************************/
void gfx_btn_initButtonUL1( int16_t x1,
                                       int16_t y1, uint16_t w, uint16_t h,
                                       uint16_t outline, uint16_t fill,
                                       uint16_t textcolor, char *label,
                                       uint8_t textsize_x, uint8_t textsize_y) {
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4604      	mov	r4, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	80fb      	strh	r3, [r7, #6]
 8002b62:	4603      	mov	r3, r0
 8002b64:	80bb      	strh	r3, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	803b      	strh	r3, [r7, #0]
  _x1 = x1;
 8002b6e:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <gfx_btn_initButtonUL1+0x6c>)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	8013      	strh	r3, [r2, #0]
  _y1 = y1;
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <gfx_btn_initButtonUL1+0x70>)
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	8013      	strh	r3, [r2, #0]
  _w = w;
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <gfx_btn_initButtonUL1+0x74>)
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	8013      	strh	r3, [r2, #0]
  _h = h;
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <gfx_btn_initButtonUL1+0x78>)
 8002b82:	883b      	ldrh	r3, [r7, #0]
 8002b84:	8013      	strh	r3, [r2, #0]
  _outlinecolor = outline;
 8002b86:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <gfx_btn_initButtonUL1+0x7c>)
 8002b88:	8b3b      	ldrh	r3, [r7, #24]
 8002b8a:	8013      	strh	r3, [r2, #0]
  _fillcolor = fill;
 8002b8c:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <gfx_btn_initButtonUL1+0x80>)
 8002b8e:	8bbb      	ldrh	r3, [r7, #28]
 8002b90:	8013      	strh	r3, [r2, #0]
  _textcolor = textcolor;
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <gfx_btn_initButtonUL1+0x84>)
 8002b94:	8c3b      	ldrh	r3, [r7, #32]
 8002b96:	8013      	strh	r3, [r2, #0]
  _textsize_x = textsize_x;
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <gfx_btn_initButtonUL1+0x88>)
 8002b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b9e:	7013      	strb	r3, [r2, #0]
  _textsize_y = textsize_y;
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <gfx_btn_initButtonUL1+0x8c>)
 8002ba2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ba6:	7013      	strb	r3, [r2, #0]

  strncpy(_label, label, 9);
 8002ba8:	2209      	movs	r2, #9
 8002baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <gfx_btn_initButtonUL1+0x90>)
 8002bae:	f002 ff09 	bl	80059c4 <strncpy>
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200000b6 	.word	0x200000b6
 8002bc0:	200000ba 	.word	0x200000ba
 8002bc4:	20000094 	.word	0x20000094
 8002bc8:	2000008a 	.word	0x2000008a
 8002bcc:	20000088 	.word	0x20000088
 8002bd0:	200000a4 	.word	0x200000a4
 8002bd4:	200000b4 	.word	0x200000b4
 8002bd8:	20000086 	.word	0x20000086
 8002bdc:	200000c2 	.word	0x200000c2
 8002be0:	20000098 	.word	0x20000098
 8002be4:	00000000 	.word	0x00000000

08002be8 <gfx_btn_drawButton>:
   @brief    Draw the button on the screen
   @param    inverted Whether to draw with fill/text swapped to indicate
   'pressed'
*/
/**************************************************************************/
void gfx_btn_drawButton(bool inverted) {
 8002be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  uint16_t fill, outline, text;

  if (!inverted) {
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <gfx_btn_drawButton+0x2a>
    fill = _fillcolor;
 8002bfe:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <gfx_btn_drawButton+0x1c8>)
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	81fb      	strh	r3, [r7, #14]
    outline = _outlinecolor;
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <gfx_btn_drawButton+0x1cc>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	81bb      	strh	r3, [r7, #12]
    text = _textcolor;
 8002c0a:	4b6b      	ldr	r3, [pc, #428]	; (8002db8 <gfx_btn_drawButton+0x1d0>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	e008      	b.n	8002c24 <gfx_btn_drawButton+0x3c>
  } else {
    fill = _textcolor;
 8002c12:	4b69      	ldr	r3, [pc, #420]	; (8002db8 <gfx_btn_drawButton+0x1d0>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	81fb      	strh	r3, [r7, #14]
    outline = _outlinecolor;
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <gfx_btn_drawButton+0x1cc>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	81bb      	strh	r3, [r7, #12]
    text = _fillcolor;
 8002c1e:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <gfx_btn_drawButton+0x1c8>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	817b      	strh	r3, [r7, #10]
  }

  uint8_t r = min(_w, _h) / 4; // Corner radius
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <gfx_btn_drawButton+0x1d4>)
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <gfx_btn_drawButton+0x1d8>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d207      	bcs.n	8002c40 <gfx_btn_drawButton+0x58>
 8002c30:	4b62      	ldr	r3, [pc, #392]	; (8002dbc <gfx_btn_drawButton+0x1d4>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da00      	bge.n	8002c3a <gfx_btn_drawButton+0x52>
 8002c38:	3303      	adds	r3, #3
 8002c3a:	109b      	asrs	r3, r3, #2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e006      	b.n	8002c4e <gfx_btn_drawButton+0x66>
 8002c40:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <gfx_btn_drawButton+0x1d8>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da00      	bge.n	8002c4a <gfx_btn_drawButton+0x62>
 8002c48:	3303      	adds	r3, #3
 8002c4a:	109b      	asrs	r3, r3, #2
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	727b      	strb	r3, [r7, #9]
  gfx_fillRoundRect(_x1, _y1, _w, _h, r, fill);
 8002c50:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <gfx_btn_drawButton+0x1dc>)
 8002c52:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <gfx_btn_drawButton+0x1e0>)
 8002c58:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <gfx_btn_drawButton+0x1d4>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b21c      	sxth	r4, r3
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <gfx_btn_drawButton+0x1d8>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b21d      	sxth	r5, r3
 8002c68:	7a7b      	ldrb	r3, [r7, #9]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	89fa      	ldrh	r2, [r7, #14]
 8002c6e:	9201      	str	r2, [sp, #4]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	462b      	mov	r3, r5
 8002c74:	4622      	mov	r2, r4
 8002c76:	f7ff f8be 	bl	8001df6 <gfx_fillRoundRect>
  gfx_drawRoundRect(_x1, _y1, _w, _h, r, outline);
 8002c7a:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <gfx_btn_drawButton+0x1dc>)
 8002c7c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002c80:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <gfx_btn_drawButton+0x1e0>)
 8002c82:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002c86:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <gfx_btn_drawButton+0x1d4>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b21c      	sxth	r4, r3
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <gfx_btn_drawButton+0x1d8>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b21d      	sxth	r5, r3
 8002c92:	7a7b      	ldrb	r3, [r7, #9]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	89ba      	ldrh	r2, [r7, #12]
 8002c98:	9201      	str	r2, [sp, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	f7fe ffd8 	bl	8001c54 <gfx_drawRoundRect>

  gfx_setCursor(_x1 + (_w / 3.5) - (strlen(_label) * 3 * _textsize_x),
 8002ca4:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <gfx_btn_drawButton+0x1dc>)
 8002ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fbaa 	bl	8000404 <__aeabi_i2d>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <gfx_btn_drawButton+0x1d4>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fba3 	bl	8000404 <__aeabi_i2d>
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <gfx_btn_drawButton+0x1e4>)
 8002cc4:	f7fd fd32 	bl	800072c <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f7fd fa4c 	bl	800016c <__adddf3>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4625      	mov	r5, r4
 8002cda:	461c      	mov	r4, r3
 8002cdc:	483c      	ldr	r0, [pc, #240]	; (8002dd0 <gfx_btn_drawButton+0x1e8>)
 8002cde:	f7fd fa37 	bl	8000150 <strlen>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <gfx_btn_drawButton+0x1ec>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	fb03 f202 	mul.w	r2, r3, r2
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fb76 	bl	80003e4 <__aeabi_ui2d>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd fa32 	bl	8000168 <__aeabi_dsub>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	f7fd fe7e 	bl	8000a0c <__aeabi_d2iz>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b21c      	sxth	r4, r3
                  _y1 + (_h / 1.6) - (4 * _textsize_y));
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <gfx_btn_drawButton+0x1e0>)
 8002d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fb72 	bl	8000404 <__aeabi_i2d>
 8002d20:	4605      	mov	r5, r0
 8002d22:	460e      	mov	r6, r1
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <gfx_btn_drawButton+0x1d8>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fb6b 	bl	8000404 <__aeabi_i2d>
 8002d2e:	a31e      	add	r3, pc, #120	; (adr r3, 8002da8 <gfx_btn_drawButton+0x1c0>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fcfa 	bl	800072c <__aeabi_ddiv>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	4631      	mov	r1, r6
 8002d40:	f7fd fa14 	bl	800016c <__adddf3>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4615      	mov	r5, r2
 8002d4a:	461e      	mov	r6, r3
 8002d4c:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <gfx_btn_drawButton+0x1f0>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fb56 	bl	8000404 <__aeabi_i2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	4631      	mov	r1, r6
 8002d60:	f7fd fa02 	bl	8000168 <__aeabi_dsub>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
  gfx_setCursor(_x1 + (_w / 3.5) - (strlen(_label) * 3 * _textsize_x),
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd fe4e 	bl	8000a0c <__aeabi_d2iz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7fe fa40 	bl	80011fc <gfx_setCursor>
  gfx_setTextColor(text);
 8002d7c:	897b      	ldrh	r3, [r7, #10]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fa54 	bl	800122c <gfx_setTextColor>
  gfx_setTextSize1(_textsize_x, _textsize_y);
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <gfx_btn_drawButton+0x1ec>)
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <gfx_btn_drawButton+0x1f0>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f7ff fe32 	bl	80029f8 <gfx_setTextSize1>
  gfx_print(_label);
 8002d94:	480e      	ldr	r0, [pc, #56]	; (8002dd0 <gfx_btn_drawButton+0x1e8>)
 8002d96:	f7ff fe19 	bl	80029cc <gfx_print>
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	f3af 8000 	nop.w
 8002da8:	9999999a 	.word	0x9999999a
 8002dac:	3ff99999 	.word	0x3ff99999
 8002db0:	200000a4 	.word	0x200000a4
 8002db4:	20000088 	.word	0x20000088
 8002db8:	200000b4 	.word	0x200000b4
 8002dbc:	20000094 	.word	0x20000094
 8002dc0:	2000008a 	.word	0x2000008a
 8002dc4:	200000b6 	.word	0x200000b6
 8002dc8:	200000ba 	.word	0x200000ba
 8002dcc:	400c0000 	.word	0x400c0000
 8002dd0:	20000098 	.word	0x20000098
 8002dd4:	20000086 	.word	0x20000086
 8002dd8:	200000c2 	.word	0x200000c2

08002ddc <LCD_write>:
//������ɫ,������ɫ
u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
u16 DeviceCode;	 

void LCD_write(u16 VAL)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
	//LCD_CS_CLR;
	DATAOUT(VAL);
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <LCD_write+0x2c>)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002dec:	2200      	movs	r2, #0
 8002dee:	2104      	movs	r1, #4
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <LCD_write+0x30>)
 8002df2:	f001 fe75 	bl	8004ae0 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8002df6:	2201      	movs	r2, #1
 8002df8:	2104      	movs	r1, #4
 8002dfa:	4804      	ldr	r0, [pc, #16]	; (8002e0c <LCD_write+0x30>)
 8002dfc:	f001 fe70 	bl	8004ae0 <HAL_GPIO_WritePin>
	//LCD_CS_SET;
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40010c00 	.word	0x40010c00
 8002e0c:	40010800 	.word	0x40010800

08002e10 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	4805      	ldr	r0, [pc, #20]	; (8002e34 <LCD_WR_REG+0x24>)
 8002e20:	f001 fe5e 	bl	8004ae0 <HAL_GPIO_WritePin>
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ffd8 	bl	8002ddc <LCD_write>
	 #endif
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010800 	.word	0x40010800

08002e38 <LCD_WR_DATA>:
 * @function   :Write an 16-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u16 data)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
	 LCD_RS_SET;
 8002e42:	2201      	movs	r2, #1
 8002e44:	2102      	movs	r1, #2
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <LCD_WR_DATA+0x24>)
 8002e48:	f001 fe4a 	bl	8004ae0 <HAL_GPIO_WritePin>
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ffc4 	bl	8002ddc <LCD_write>
	 #endif
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40010800 	.word	0x40010800

08002e60 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	460a      	mov	r2, r1
 8002e6a:	80fb      	strh	r3, [r7, #6]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ffcc 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8002e78:	88bb      	ldrh	r3, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ffdc 	bl	8002e38 <LCD_WR_DATA>
}	   
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <LCD_WriteRAM_Prepare+0x14>)
 8002e8e:	891b      	ldrh	r3, [r3, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ffbd 	bl	8002e10 <LCD_WR_REG>
}	 
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200000cc 	.word	0x200000cc

08002ea0 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2102      	movs	r1, #2
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <Lcd_WriteData_16Bit+0x24>)
 8002eb0:	f001 fe16 	bl	8004ae0 <HAL_GPIO_WritePin>
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff90 	bl	8002ddc <LCD_write>
	 #endif
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40010800 	.word	0x40010800

08002ec8 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
  LCD_CS_CLR;
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	4814      	ldr	r0, [pc, #80]	; (8002f28 <LCD_Clear+0x60>)
 8002ed8:	f001 fe02 	bl	8004ae0 <HAL_GPIO_WritePin>
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <LCD_Clear+0x64>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <LCD_Clear+0x64>)
 8002ee6:	885b      	ldrh	r3, [r3, #2]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2100      	movs	r1, #0
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f000 f91c 	bl	800312c <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e006      	b.n	8002f08 <LCD_Clear+0x40>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ffcf 	bl	8002ea0 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <LCD_Clear+0x64>)
 8002f0a:	885b      	ldrh	r3, [r3, #2]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <LCD_Clear+0x64>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	fb03 f302 	mul.w	r3, r3, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d3ed      	bcc.n	8002efa <LCD_Clear+0x32>
	//	}
	}
} 
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	200000cc 	.word	0x200000cc

08002f30 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8002f34:	2200      	movs	r2, #0
 8002f36:	2108      	movs	r1, #8
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <LCD_RESET+0x28>)
 8002f3a:	f001 fdd1 	bl	8004ae0 <HAL_GPIO_WritePin>
	delay_ms(100);	
 8002f3e:	2064      	movs	r0, #100	; 0x64
 8002f40:	f001 face 	bl	80044e0 <HAL_Delay>
	LCD_RST_SET;
 8002f44:	2201      	movs	r2, #1
 8002f46:	2108      	movs	r1, #8
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <LCD_RESET+0x28>)
 8002f4a:	f001 fdc9 	bl	8004ae0 <HAL_GPIO_WritePin>
	delay_ms(50);
 8002f4e:	2032      	movs	r0, #50	; 0x32
 8002f50:	f001 fac6 	bl	80044e0 <HAL_Delay>
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40010800 	.word	0x40010800

08002f5c <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	LCD_RESET(); //LCD ��λ
 8002f60:	f7ff ffe6 	bl	8002f30 <LCD_RESET>
//************* ILI9486��ʼ��**********//	
	LCD_WR_REG(0XF1);
 8002f64:	20f1      	movs	r0, #241	; 0xf1
 8002f66:	f7ff ff53 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x36);
 8002f6a:	2036      	movs	r0, #54	; 0x36
 8002f6c:	f7ff ff64 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8002f70:	2004      	movs	r0, #4
 8002f72:	f7ff ff61 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7ff ff5e 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002f7c:	203c      	movs	r0, #60	; 0x3c
 8002f7e:	f7ff ff5b 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0X0F);
 8002f82:	200f      	movs	r0, #15
 8002f84:	f7ff ff58 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x8F);
 8002f88:	208f      	movs	r0, #143	; 0x8f
 8002f8a:	f7ff ff55 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0XF2);
 8002f8e:	20f2      	movs	r0, #242	; 0xf2
 8002f90:	f7ff ff3e 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x18);
 8002f94:	2018      	movs	r0, #24
 8002f96:	f7ff ff4f 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0xA3);
 8002f9a:	20a3      	movs	r0, #163	; 0xa3
 8002f9c:	f7ff ff4c 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8002fa0:	2012      	movs	r0, #18
 8002fa2:	f7ff ff49 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	f7ff ff46 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0XB2);
 8002fac:	20b2      	movs	r0, #178	; 0xb2
 8002fae:	f7ff ff43 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8002fb2:	2012      	movs	r0, #18
 8002fb4:	f7ff ff40 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);
 8002fb8:	20ff      	movs	r0, #255	; 0xff
 8002fba:	f7ff ff3d 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002fbe:	2010      	movs	r0, #16
 8002fc0:	f7ff ff3a 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7ff ff37 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0XF8);
 8002fca:	20f8      	movs	r0, #248	; 0xf8
 8002fcc:	f7ff ff20 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x21);
 8002fd0:	2021      	movs	r0, #33	; 0x21
 8002fd2:	f7ff ff31 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8002fd6:	2004      	movs	r0, #4
 8002fd8:	f7ff ff2e 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0XF9);
 8002fdc:	20f9      	movs	r0, #249	; 0xf9
 8002fde:	f7ff ff17 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7ff ff28 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002fe8:	2008      	movs	r0, #8
 8002fea:	f7ff ff25 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0x36);
 8002fee:	2036      	movs	r0, #54	; 0x36
 8002ff0:	f7ff ff0e 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	f7ff ff1f 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0xB4);
 8002ffa:	20b4      	movs	r0, #180	; 0xb4
 8002ffc:	f7ff ff08 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff ff19 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);
 8003006:	20c1      	movs	r0, #193	; 0xc1
 8003008:	f7ff ff02 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x41);
 800300c:	2041      	movs	r0, #65	; 0x41
 800300e:	f7ff ff13 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);
 8003012:	20c5      	movs	r0, #197	; 0xc5
 8003014:	f7ff fefc 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7ff ff0d 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x91);
 800301e:	2091      	movs	r0, #145	; 0x91
 8003020:	f7ff ff0a 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x80);
 8003024:	2080      	movs	r0, #128	; 0x80
 8003026:	f7ff ff07 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800302a:	2000      	movs	r0, #0
 800302c:	f7ff ff04 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);
 8003030:	20e0      	movs	r0, #224	; 0xe0
 8003032:	f7ff feed 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003036:	200f      	movs	r0, #15
 8003038:	f7ff fefe 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 800303c:	201f      	movs	r0, #31
 800303e:	f7ff fefb 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x1C);
 8003042:	201c      	movs	r0, #28
 8003044:	f7ff fef8 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8003048:	200c      	movs	r0, #12
 800304a:	f7ff fef5 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800304e:	200f      	movs	r0, #15
 8003050:	f7ff fef2 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003054:	2008      	movs	r0, #8
 8003056:	f7ff feef 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 800305a:	2048      	movs	r0, #72	; 0x48
 800305c:	f7ff feec 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x98);
 8003060:	2098      	movs	r0, #152	; 0x98
 8003062:	f7ff fee9 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8003066:	2037      	movs	r0, #55	; 0x37
 8003068:	f7ff fee6 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800306c:	200a      	movs	r0, #10
 800306e:	f7ff fee3 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 8003072:	2013      	movs	r0, #19
 8003074:	f7ff fee0 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8003078:	2004      	movs	r0, #4
 800307a:	f7ff fedd 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800307e:	2011      	movs	r0, #17
 8003080:	f7ff feda 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8003084:	200d      	movs	r0, #13
 8003086:	f7ff fed7 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7ff fed4 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0xE1);
 8003090:	20e1      	movs	r0, #225	; 0xe1
 8003092:	f7ff febd 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003096:	200f      	movs	r0, #15
 8003098:	f7ff fece 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x32);
 800309c:	2032      	movs	r0, #50	; 0x32
 800309e:	f7ff fecb 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 80030a2:	202e      	movs	r0, #46	; 0x2e
 80030a4:	f7ff fec8 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 80030a8:	200b      	movs	r0, #11
 80030aa:	f7ff fec5 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 80030ae:	200d      	movs	r0, #13
 80030b0:	f7ff fec2 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80030b4:	2005      	movs	r0, #5
 80030b6:	f7ff febf 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x47);
 80030ba:	2047      	movs	r0, #71	; 0x47
 80030bc:	f7ff febc 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x75);
 80030c0:	2075      	movs	r0, #117	; 0x75
 80030c2:	f7ff feb9 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 80030c6:	2037      	movs	r0, #55	; 0x37
 80030c8:	f7ff feb6 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80030cc:	2006      	movs	r0, #6
 80030ce:	f7ff feb3 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80030d2:	2010      	movs	r0, #16
 80030d4:	f7ff feb0 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80030d8:	2003      	movs	r0, #3
 80030da:	f7ff fead 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 80030de:	2024      	movs	r0, #36	; 0x24
 80030e0:	f7ff feaa 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x20);
 80030e4:	2020      	movs	r0, #32
 80030e6:	f7ff fea7 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fea4 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80030f0:	203a      	movs	r0, #58	; 0x3a
 80030f2:	f7ff fe8d 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80030f6:	2055      	movs	r0, #85	; 0x55
 80030f8:	f7ff fe9e 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_REG(0x11);
 80030fc:	2011      	movs	r0, #17
 80030fe:	f7ff fe87 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_REG(0x36);
 8003102:	2036      	movs	r0, #54	; 0x36
 8003104:	f7ff fe84 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(0x28);
 8003108:	2028      	movs	r0, #40	; 0x28
 800310a:	f7ff fe95 	bl	8002e38 <LCD_WR_DATA>
	delay_ms(120);
 800310e:	2078      	movs	r0, #120	; 0x78
 8003110:	f001 f9e6 	bl	80044e0 <HAL_Delay>
	LCD_WR_REG(0x29);
 8003114:	2029      	movs	r0, #41	; 0x29
 8003116:	f7ff fe7b 	bl	8002e10 <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 800311a:	2001      	movs	r0, #1
 800311c:	f000 f858 	bl	80031d0 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(GRAY);//��ȫ����ɫ
 8003120:	f248 4030 	movw	r0, #33840	; 0x8430
 8003124:	f7ff fed0 	bl	8002ec8 <LCD_Clear>
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4623      	mov	r3, r4
 800313c:	80fb      	strh	r3, [r7, #6]
 800313e:	4603      	mov	r3, r0
 8003140:	80bb      	strh	r3, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]
 8003146:	4613      	mov	r3, r2
 8003148:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <LCD_SetWindows+0xa0>)
 800314c:	895b      	ldrh	r3, [r3, #10]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fe5e 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b29b      	uxth	r3, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fe6c 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	b29b      	uxth	r3, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fe66 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	b29b      	uxth	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe60 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	b29b      	uxth	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fe5a 	bl	8002e38 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <LCD_SetWindows+0xa0>)
 8003186:	899b      	ldrh	r3, [r3, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe41 	bl	8002e10 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	b29b      	uxth	r3, r3
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fe4f 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 800319a:	88bb      	ldrh	r3, [r7, #4]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fe49 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 80031a6:	883b      	ldrh	r3, [r7, #0]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe43 	bl	8002e38 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 80031b2:	883b      	ldrh	r3, [r7, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fe3d 	bl	8002e38 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 80031be:	f7ff fe63 	bl	8002e88 <LCD_WriteRAM_Prepare>
}   
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200000cc 	.word	0x200000cc

080031d0 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 80031da:	4b28      	ldr	r3, [pc, #160]	; (800327c <LCD_direction+0xac>)
 80031dc:	222a      	movs	r2, #42	; 0x2a
 80031de:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 80031e0:	4b26      	ldr	r3, [pc, #152]	; (800327c <LCD_direction+0xac>)
 80031e2:	222b      	movs	r2, #43	; 0x2b
 80031e4:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 80031e6:	4b25      	ldr	r3, [pc, #148]	; (800327c <LCD_direction+0xac>)
 80031e8:	222c      	movs	r2, #44	; 0x2c
 80031ea:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d83e      	bhi.n	8003270 <LCD_direction+0xa0>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <LCD_direction+0x28>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	08003209 	.word	0x08003209
 80031fc:	08003223 	.word	0x08003223
 8003200:	0800323d 	.word	0x0800323d
 8003204:	08003257 	.word	0x08003257
		case 0:						 	 		
			lcddev.width=LCD_W;
 8003208:	4b1c      	ldr	r3, [pc, #112]	; (800327c <LCD_direction+0xac>)
 800320a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800320e:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <LCD_direction+0xac>)
 8003212:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003216:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<6)|(1<<3));//0 degree MY=0,MX=0,MV=0,ML=0,BGR=1,MH=0
 8003218:	2148      	movs	r1, #72	; 0x48
 800321a:	2036      	movs	r0, #54	; 0x36
 800321c:	f7ff fe20 	bl	8002e60 <LCD_WriteReg>
		break;
 8003220:	e027      	b.n	8003272 <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <LCD_direction+0xac>)
 8003224:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003228:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <LCD_direction+0xac>)
 800322c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003230:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<4)|(1<<5));//90 degree MY=0,MX=1,MV=1,ML=1,BGR=1,MH=0
 8003232:	2138      	movs	r1, #56	; 0x38
 8003234:	2036      	movs	r0, #54	; 0x36
 8003236:	f7ff fe13 	bl	8002e60 <LCD_WriteReg>
		break;
 800323a:	e01a      	b.n	8003272 <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <LCD_direction+0xac>)
 800323e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003242:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <LCD_direction+0xac>)
 8003246:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800324a:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7));//180 degree MY=1,MX=1,MV=0,ML=0,BGR=1,MH=0
 800324c:	2188      	movs	r1, #136	; 0x88
 800324e:	2036      	movs	r0, #54	; 0x36
 8003250:	f7ff fe06 	bl	8002e60 <LCD_WriteReg>
		break;
 8003254:	e00d      	b.n	8003272 <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <LCD_direction+0xac>)
 8003258:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800325c:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <LCD_direction+0xac>)
 8003260:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003264:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6)|(1<<7));//270 degree MY=1,MX=0,MV=1,ML=0,BGR=1,MH=0
 8003266:	21e8      	movs	r1, #232	; 0xe8
 8003268:	2036      	movs	r0, #54	; 0x36
 800326a:	f7ff fdf9 	bl	8002e60 <LCD_WriteReg>
		break;	
 800326e:	e000      	b.n	8003272 <LCD_direction+0xa2>
		default:break;
 8003270:	bf00      	nop
	}		
}	 
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200000cc 	.word	0x200000cc

08003280 <ClearprocessAni>:
float angleF=0,angleValueX=0,angleValueY=0;
int aniAngle[8]={15,30,45,60,75,90};
int pHColor[4]={LIGHTGREEN,0x658C,0x36B9,BLUE};
uint16_t aniAnglePos=0;

void ClearprocessAni(int angle){
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, RED);
 8003288:	4b87      	ldr	r3, [pc, #540]	; (80034a8 <ClearprocessAni+0x228>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b218      	sxth	r0, r3
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <ClearprocessAni+0x22c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b219      	sxth	r1, r3
 8003294:	4b86      	ldr	r3, [pc, #536]	; (80034b0 <ClearprocessAni+0x230>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b21a      	sxth	r2, r3
 800329a:	4b86      	ldr	r3, [pc, #536]	; (80034b4 <ClearprocessAni+0x234>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b21c      	sxth	r4, r3
 80032a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4623      	mov	r3, r4
 80032a8:	f7fe f9aa 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 80032ac:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <ClearprocessAni+0x228>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b218      	sxth	r0, r3
 80032b2:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <ClearprocessAni+0x22c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	b219      	sxth	r1, r3
 80032be:	4b7c      	ldr	r3, [pc, #496]	; (80034b0 <ClearprocessAni+0x230>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b21a      	sxth	r2, r3
 80032c4:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <ClearprocessAni+0x234>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	b21c      	sxth	r4, r3
 80032d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4623      	mov	r3, r4
 80032d8:	f7fe f992 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 80032dc:	4b72      	ldr	r3, [pc, #456]	; (80034a8 <ClearprocessAni+0x228>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b218      	sxth	r0, r3
 80032e2:	4b72      	ldr	r3, [pc, #456]	; (80034ac <ClearprocessAni+0x22c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	b219      	sxth	r1, r3
 80032ee:	4b70      	ldr	r3, [pc, #448]	; (80034b0 <ClearprocessAni+0x230>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <ClearprocessAni+0x234>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	b21c      	sxth	r4, r3
 8003300:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	4623      	mov	r3, r4
 8003308:	f7fe f97a 	bl	8001600 <gfx_drawLine>

	angleF=((float)angle/180.0)*3.14;
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fd fcaf 	bl	8000c70 <__aeabi_i2f>
 8003312:	4603      	mov	r3, r0
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f887 	bl	8000428 <__aeabi_f2d>
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <ClearprocessAni+0x238>)
 8003320:	f7fd fa04 	bl	800072c <__aeabi_ddiv>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	4618      	mov	r0, r3
 800332a:	4621      	mov	r1, r4
 800332c:	a35c      	add	r3, pc, #368	; (adr r3, 80034a0 <ClearprocessAni+0x220>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f8d1 	bl	80004d8 <__aeabi_dmul>
 8003336:	4603      	mov	r3, r0
 8003338:	460c      	mov	r4, r1
 800333a:	4618      	mov	r0, r3
 800333c:	4621      	mov	r1, r4
 800333e:	f7fd fb8d 	bl	8000a5c <__aeabi_d2f>
 8003342:	4602      	mov	r2, r0
 8003344:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <ClearprocessAni+0x23c>)
 8003346:	601a      	str	r2, [r3, #0]

	angleValueX=25*cos(angleF);
 8003348:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <ClearprocessAni+0x23c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f86b 	bl	8000428 <__aeabi_f2d>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	4618      	mov	r0, r3
 8003358:	4621      	mov	r1, r4
 800335a:	f002 fb49 	bl	80059f0 <cos>
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <ClearprocessAni+0x240>)
 8003364:	f7fd f8b8 	bl	80004d8 <__aeabi_dmul>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	4618      	mov	r0, r3
 800336e:	4621      	mov	r1, r4
 8003370:	f7fd fb74 	bl	8000a5c <__aeabi_d2f>
 8003374:	4602      	mov	r2, r0
 8003376:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <ClearprocessAni+0x244>)
 8003378:	601a      	str	r2, [r3, #0]
	angleValueY=25*sin(angleF);
 800337a:	4b50      	ldr	r3, [pc, #320]	; (80034bc <ClearprocessAni+0x23c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f852 	bl	8000428 <__aeabi_f2d>
 8003384:	4603      	mov	r3, r0
 8003386:	460c      	mov	r4, r1
 8003388:	4618      	mov	r0, r3
 800338a:	4621      	mov	r1, r4
 800338c:	f002 fb66 	bl	8005a5c <sin>
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <ClearprocessAni+0x240>)
 8003396:	f7fd f89f 	bl	80004d8 <__aeabi_dmul>
 800339a:	4603      	mov	r3, r0
 800339c:	460c      	mov	r4, r1
 800339e:	4618      	mov	r0, r3
 80033a0:	4621      	mov	r1, r4
 80033a2:	f7fd fb5b 	bl	8000a5c <__aeabi_d2f>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <ClearprocessAni+0x248>)
 80033aa:	601a      	str	r2, [r3, #0]

	crossX1=245+angleValueX;
 80033ac:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <ClearprocessAni+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4946      	ldr	r1, [pc, #280]	; (80034cc <ClearprocessAni+0x24c>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fba8 	bl	8000b08 <__addsf3>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd fdfc 	bl	8000fb8 <__aeabi_f2iz>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <ClearprocessAni+0x228>)
 80033c4:	601a      	str	r2, [r3, #0]
	crossY1=170+angleValueY;
 80033c6:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <ClearprocessAni+0x248>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4941      	ldr	r1, [pc, #260]	; (80034d0 <ClearprocessAni+0x250>)
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fb9b 	bl	8000b08 <__addsf3>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fdef 	bl	8000fb8 <__aeabi_f2iz>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <ClearprocessAni+0x22c>)
 80033de:	601a      	str	r2, [r3, #0]
	crossX2=245-angleValueX;
 80033e0:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <ClearprocessAni+0x244>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4839      	ldr	r0, [pc, #228]	; (80034cc <ClearprocessAni+0x24c>)
 80033e8:	f7fd fb8c 	bl	8000b04 <__aeabi_fsub>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fde2 	bl	8000fb8 <__aeabi_f2iz>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <ClearprocessAni+0x230>)
 80033f8:	601a      	str	r2, [r3, #0]
	crossY2=170-angleValueY;
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <ClearprocessAni+0x248>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	4833      	ldr	r0, [pc, #204]	; (80034d0 <ClearprocessAni+0x250>)
 8003402:	f7fd fb7f 	bl	8000b04 <__aeabi_fsub>
 8003406:	4603      	mov	r3, r0
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fdd5 	bl	8000fb8 <__aeabi_f2iz>
 800340e:	4602      	mov	r2, r0
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <ClearprocessAni+0x234>)
 8003412:	601a      	str	r2, [r3, #0]

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, RED);
 8003414:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <ClearprocessAni+0x228>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b218      	sxth	r0, r3
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <ClearprocessAni+0x22c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	b219      	sxth	r1, r3
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <ClearprocessAni+0x230>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b21a      	sxth	r2, r3
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <ClearprocessAni+0x234>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b21c      	sxth	r4, r3
 800342c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4623      	mov	r3, r4
 8003434:	f7fe f8e4 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <ClearprocessAni+0x228>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b218      	sxth	r0, r3
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <ClearprocessAni+0x22c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	b219      	sxth	r1, r3
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <ClearprocessAni+0x230>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b21a      	sxth	r2, r3
 8003450:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <ClearprocessAni+0x234>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	3301      	adds	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	b21c      	sxth	r4, r3
 800345c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4623      	mov	r3, r4
 8003464:	f7fe f8cc 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <ClearprocessAni+0x228>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b218      	sxth	r0, r3
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <ClearprocessAni+0x22c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	3301      	adds	r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	b219      	sxth	r1, r3
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <ClearprocessAni+0x230>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b21a      	sxth	r2, r3
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <ClearprocessAni+0x234>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	3301      	adds	r3, #1
 8003488:	b29b      	uxth	r3, r3
 800348a:	b21c      	sxth	r4, r3
 800348c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4623      	mov	r3, r4
 8003494:	f7fe f8b4 	bl	8001600 <gfx_drawLine>

}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	51eb851f 	.word	0x51eb851f
 80034a4:	40091eb8 	.word	0x40091eb8
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004
 80034b0:	20000008 	.word	0x20000008
 80034b4:	2000000c 	.word	0x2000000c
 80034b8:	40668000 	.word	0x40668000
 80034bc:	20000068 	.word	0x20000068
 80034c0:	40390000 	.word	0x40390000
 80034c4:	2000006c 	.word	0x2000006c
 80034c8:	20000070 	.word	0x20000070
 80034cc:	43750000 	.word	0x43750000
 80034d0:	432a0000 	.word	0x432a0000
 80034d4:	00000000 	.word	0x00000000

080034d8 <processAni>:

void processAni(int angle,int pos){
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	angleF=((float)angle/180.0)*3.14;
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fbc4 	bl	8000c70 <__aeabi_i2f>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc ff9c 	bl	8000428 <__aeabi_f2d>
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	4bac      	ldr	r3, [pc, #688]	; (80037a8 <processAni+0x2d0>)
 80034f6:	f7fd f919 	bl	800072c <__aeabi_ddiv>
 80034fa:	4603      	mov	r3, r0
 80034fc:	460c      	mov	r4, r1
 80034fe:	4618      	mov	r0, r3
 8003500:	4621      	mov	r1, r4
 8003502:	a3a7      	add	r3, pc, #668	; (adr r3, 80037a0 <processAni+0x2c8>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fc ffe6 	bl	80004d8 <__aeabi_dmul>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
 8003510:	4618      	mov	r0, r3
 8003512:	4621      	mov	r1, r4
 8003514:	f7fd faa2 	bl	8000a5c <__aeabi_d2f>
 8003518:	4602      	mov	r2, r0
 800351a:	4ba4      	ldr	r3, [pc, #656]	; (80037ac <processAni+0x2d4>)
 800351c:	601a      	str	r2, [r3, #0]

	angleValueX=25*cos(angleF);
 800351e:	4ba3      	ldr	r3, [pc, #652]	; (80037ac <processAni+0x2d4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fc ff80 	bl	8000428 <__aeabi_f2d>
 8003528:	4603      	mov	r3, r0
 800352a:	460c      	mov	r4, r1
 800352c:	4618      	mov	r0, r3
 800352e:	4621      	mov	r1, r4
 8003530:	f002 fa5e 	bl	80059f0 <cos>
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	4b9d      	ldr	r3, [pc, #628]	; (80037b0 <processAni+0x2d8>)
 800353a:	f7fc ffcd 	bl	80004d8 <__aeabi_dmul>
 800353e:	4603      	mov	r3, r0
 8003540:	460c      	mov	r4, r1
 8003542:	4618      	mov	r0, r3
 8003544:	4621      	mov	r1, r4
 8003546:	f7fd fa89 	bl	8000a5c <__aeabi_d2f>
 800354a:	4602      	mov	r2, r0
 800354c:	4b99      	ldr	r3, [pc, #612]	; (80037b4 <processAni+0x2dc>)
 800354e:	601a      	str	r2, [r3, #0]
	angleValueY=25*sin(angleF);
 8003550:	4b96      	ldr	r3, [pc, #600]	; (80037ac <processAni+0x2d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc ff67 	bl	8000428 <__aeabi_f2d>
 800355a:	4603      	mov	r3, r0
 800355c:	460c      	mov	r4, r1
 800355e:	4618      	mov	r0, r3
 8003560:	4621      	mov	r1, r4
 8003562:	f002 fa7b 	bl	8005a5c <sin>
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	4b91      	ldr	r3, [pc, #580]	; (80037b0 <processAni+0x2d8>)
 800356c:	f7fc ffb4 	bl	80004d8 <__aeabi_dmul>
 8003570:	4603      	mov	r3, r0
 8003572:	460c      	mov	r4, r1
 8003574:	4618      	mov	r0, r3
 8003576:	4621      	mov	r1, r4
 8003578:	f7fd fa70 	bl	8000a5c <__aeabi_d2f>
 800357c:	4602      	mov	r2, r0
 800357e:	4b8e      	ldr	r3, [pc, #568]	; (80037b8 <processAni+0x2e0>)
 8003580:	601a      	str	r2, [r3, #0]

	crossX1=245+angleValueX;
 8003582:	4b8c      	ldr	r3, [pc, #560]	; (80037b4 <processAni+0x2dc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	498d      	ldr	r1, [pc, #564]	; (80037bc <processAni+0x2e4>)
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd fabd 	bl	8000b08 <__addsf3>
 800358e:	4603      	mov	r3, r0
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fd11 	bl	8000fb8 <__aeabi_f2iz>
 8003596:	4602      	mov	r2, r0
 8003598:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <processAni+0x2e8>)
 800359a:	601a      	str	r2, [r3, #0]
	crossY1=170+angleValueY;
 800359c:	4b86      	ldr	r3, [pc, #536]	; (80037b8 <processAni+0x2e0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4988      	ldr	r1, [pc, #544]	; (80037c4 <processAni+0x2ec>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd fab0 	bl	8000b08 <__addsf3>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd fd04 	bl	8000fb8 <__aeabi_f2iz>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <processAni+0x2f0>)
 80035b4:	601a      	str	r2, [r3, #0]
	crossX2=245-angleValueX;
 80035b6:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <processAni+0x2dc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4619      	mov	r1, r3
 80035bc:	487f      	ldr	r0, [pc, #508]	; (80037bc <processAni+0x2e4>)
 80035be:	f7fd faa1 	bl	8000b04 <__aeabi_fsub>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fcf7 	bl	8000fb8 <__aeabi_f2iz>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b7f      	ldr	r3, [pc, #508]	; (80037cc <processAni+0x2f4>)
 80035ce:	601a      	str	r2, [r3, #0]
	crossY2=170-angleValueY;
 80035d0:	4b79      	ldr	r3, [pc, #484]	; (80037b8 <processAni+0x2e0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4619      	mov	r1, r3
 80035d6:	487b      	ldr	r0, [pc, #492]	; (80037c4 <processAni+0x2ec>)
 80035d8:	f7fd fa94 	bl	8000b04 <__aeabi_fsub>
 80035dc:	4603      	mov	r3, r0
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fcea 	bl	8000fb8 <__aeabi_f2iz>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b7a      	ldr	r3, [pc, #488]	; (80037d0 <processAni+0x2f8>)
 80035e8:	601a      	str	r2, [r3, #0]

	//gfx_fillCircle(245, 170, 25, RED);

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, WHITE);
 80035ea:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <processAni+0x2e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b218      	sxth	r0, r3
 80035f0:	4b75      	ldr	r3, [pc, #468]	; (80037c8 <processAni+0x2f0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	b219      	sxth	r1, r3
 80035f6:	4b75      	ldr	r3, [pc, #468]	; (80037cc <processAni+0x2f4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b21a      	sxth	r2, r3
 80035fc:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <processAni+0x2f8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b21c      	sxth	r4, r3
 8003602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4623      	mov	r3, r4
 800360a:	f7fd fff9 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800360e:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <processAni+0x2e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b218      	sxth	r0, r3
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <processAni+0x2f0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	b219      	sxth	r1, r3
 8003620:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <processAni+0x2f4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b21a      	sxth	r2, r3
 8003626:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <processAni+0x2f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	b29b      	uxth	r3, r3
 8003630:	b21c      	sxth	r4, r3
 8003632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4623      	mov	r3, r4
 800363a:	f7fd ffe1 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <processAni+0x2e8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b218      	sxth	r0, r3
 8003644:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <processAni+0x2f0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	3301      	adds	r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	b219      	sxth	r1, r3
 8003650:	4b5e      	ldr	r3, [pc, #376]	; (80037cc <processAni+0x2f4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b21a      	sxth	r2, r3
 8003656:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <processAni+0x2f8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	b29b      	uxth	r3, r3
 8003660:	b21c      	sxth	r4, r3
 8003662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4623      	mov	r3, r4
 800366a:	f7fd ffc9 	bl	8001600 <gfx_drawLine>

	angleF=(((float)angle+90.0)/180.0)*3.14;
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fafe 	bl	8000c70 <__aeabi_i2f>
 8003674:	4603      	mov	r3, r0
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc fed6 	bl	8000428 <__aeabi_f2d>
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <processAni+0x2fc>)
 8003682:	f7fc fd73 	bl	800016c <__adddf3>
 8003686:	4603      	mov	r3, r0
 8003688:	460c      	mov	r4, r1
 800368a:	4618      	mov	r0, r3
 800368c:	4621      	mov	r1, r4
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <processAni+0x2d0>)
 8003694:	f7fd f84a 	bl	800072c <__aeabi_ddiv>
 8003698:	4603      	mov	r3, r0
 800369a:	460c      	mov	r4, r1
 800369c:	4618      	mov	r0, r3
 800369e:	4621      	mov	r1, r4
 80036a0:	a33f      	add	r3, pc, #252	; (adr r3, 80037a0 <processAni+0x2c8>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f7fc ff17 	bl	80004d8 <__aeabi_dmul>
 80036aa:	4603      	mov	r3, r0
 80036ac:	460c      	mov	r4, r1
 80036ae:	4618      	mov	r0, r3
 80036b0:	4621      	mov	r1, r4
 80036b2:	f7fd f9d3 	bl	8000a5c <__aeabi_d2f>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b3c      	ldr	r3, [pc, #240]	; (80037ac <processAni+0x2d4>)
 80036ba:	601a      	str	r2, [r3, #0]

	angleValueX=25*cos(angleF);
 80036bc:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <processAni+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc feb1 	bl	8000428 <__aeabi_f2d>
 80036c6:	4603      	mov	r3, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	4618      	mov	r0, r3
 80036cc:	4621      	mov	r1, r4
 80036ce:	f002 f98f 	bl	80059f0 <cos>
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <processAni+0x2d8>)
 80036d8:	f7fc fefe 	bl	80004d8 <__aeabi_dmul>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4618      	mov	r0, r3
 80036e2:	4621      	mov	r1, r4
 80036e4:	f7fd f9ba 	bl	8000a5c <__aeabi_d2f>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <processAni+0x2dc>)
 80036ec:	601a      	str	r2, [r3, #0]
	angleValueY=25*sin(angleF);
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <processAni+0x2d4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fe98 	bl	8000428 <__aeabi_f2d>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	4618      	mov	r0, r3
 80036fe:	4621      	mov	r1, r4
 8003700:	f002 f9ac 	bl	8005a5c <sin>
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <processAni+0x2d8>)
 800370a:	f7fc fee5 	bl	80004d8 <__aeabi_dmul>
 800370e:	4603      	mov	r3, r0
 8003710:	460c      	mov	r4, r1
 8003712:	4618      	mov	r0, r3
 8003714:	4621      	mov	r1, r4
 8003716:	f7fd f9a1 	bl	8000a5c <__aeabi_d2f>
 800371a:	4602      	mov	r2, r0
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <processAni+0x2e0>)
 800371e:	601a      	str	r2, [r3, #0]

	crossX1=245+angleValueX;
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <processAni+0x2dc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4925      	ldr	r1, [pc, #148]	; (80037bc <processAni+0x2e4>)
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd f9ee 	bl	8000b08 <__addsf3>
 800372c:	4603      	mov	r3, r0
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fc42 	bl	8000fb8 <__aeabi_f2iz>
 8003734:	4602      	mov	r2, r0
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <processAni+0x2e8>)
 8003738:	601a      	str	r2, [r3, #0]
	crossY1=170+angleValueY;
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <processAni+0x2e0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4921      	ldr	r1, [pc, #132]	; (80037c4 <processAni+0x2ec>)
 8003740:	4618      	mov	r0, r3
 8003742:	f7fd f9e1 	bl	8000b08 <__addsf3>
 8003746:	4603      	mov	r3, r0
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fc35 	bl	8000fb8 <__aeabi_f2iz>
 800374e:	4602      	mov	r2, r0
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <processAni+0x2f0>)
 8003752:	601a      	str	r2, [r3, #0]
	crossX2=245-angleValueX;
 8003754:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <processAni+0x2dc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	4818      	ldr	r0, [pc, #96]	; (80037bc <processAni+0x2e4>)
 800375c:	f7fd f9d2 	bl	8000b04 <__aeabi_fsub>
 8003760:	4603      	mov	r3, r0
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fc28 	bl	8000fb8 <__aeabi_f2iz>
 8003768:	4602      	mov	r2, r0
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <processAni+0x2f4>)
 800376c:	601a      	str	r2, [r3, #0]
	crossY2=170-angleValueY;
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <processAni+0x2e0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	4813      	ldr	r0, [pc, #76]	; (80037c4 <processAni+0x2ec>)
 8003776:	f7fd f9c5 	bl	8000b04 <__aeabi_fsub>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd fc1b 	bl	8000fb8 <__aeabi_f2iz>
 8003782:	4602      	mov	r2, r0
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <processAni+0x2f8>)
 8003786:	601a      	str	r2, [r3, #0]

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, WHITE);
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <processAni+0x2e8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b218      	sxth	r0, r3
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <processAni+0x2f0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	b219      	sxth	r1, r3
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <processAni+0x2f4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	b21a      	sxth	r2, r3
 800379a:	e01d      	b.n	80037d8 <processAni+0x300>
 800379c:	f3af 8000 	nop.w
 80037a0:	51eb851f 	.word	0x51eb851f
 80037a4:	40091eb8 	.word	0x40091eb8
 80037a8:	40668000 	.word	0x40668000
 80037ac:	20000068 	.word	0x20000068
 80037b0:	40390000 	.word	0x40390000
 80037b4:	2000006c 	.word	0x2000006c
 80037b8:	20000070 	.word	0x20000070
 80037bc:	43750000 	.word	0x43750000
 80037c0:	20000000 	.word	0x20000000
 80037c4:	432a0000 	.word	0x432a0000
 80037c8:	20000004 	.word	0x20000004
 80037cc:	20000008 	.word	0x20000008
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	40568000 	.word	0x40568000
 80037d8:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <processAni+0x500>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b21c      	sxth	r4, r3
 80037de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4623      	mov	r3, r4
 80037e6:	f7fd ff0b 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 80037ea:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <processAni+0x504>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	b218      	sxth	r0, r3
 80037f0:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <processAni+0x508>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b219      	sxth	r1, r3
 80037fc:	4b79      	ldr	r3, [pc, #484]	; (80039e4 <processAni+0x50c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b21a      	sxth	r2, r3
 8003802:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <processAni+0x500>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	b21c      	sxth	r4, r3
 800380e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4623      	mov	r3, r4
 8003816:	f7fd fef3 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800381a:	4b70      	ldr	r3, [pc, #448]	; (80039dc <processAni+0x504>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b218      	sxth	r0, r3
 8003820:	4b6f      	ldr	r3, [pc, #444]	; (80039e0 <processAni+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	3301      	adds	r3, #1
 8003828:	b29b      	uxth	r3, r3
 800382a:	b219      	sxth	r1, r3
 800382c:	4b6d      	ldr	r3, [pc, #436]	; (80039e4 <processAni+0x50c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	b21a      	sxth	r2, r3
 8003832:	4b69      	ldr	r3, [pc, #420]	; (80039d8 <processAni+0x500>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	b21c      	sxth	r4, r3
 800383e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	4623      	mov	r3, r4
 8003846:	f7fd fedb 	bl	8001600 <gfx_drawLine>

	static int test=0;
	if(test==0){
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <processAni+0x510>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 80ce 	bne.w	80039f0 <processAni+0x518>
		test=1;
 8003854:	4b64      	ldr	r3, [pc, #400]	; (80039e8 <processAni+0x510>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]
		gfx_drawLine(238, 240, 238, 245, BLACK);
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	23f5      	movs	r3, #245	; 0xf5
 8003860:	22ee      	movs	r2, #238	; 0xee
 8003862:	21f0      	movs	r1, #240	; 0xf0
 8003864:	20ee      	movs	r0, #238	; 0xee
 8003866:	f7fd fecb 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 250, 238, 255, BLACK);
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	23ff      	movs	r3, #255	; 0xff
 8003870:	22ee      	movs	r2, #238	; 0xee
 8003872:	21fa      	movs	r1, #250	; 0xfa
 8003874:	20ee      	movs	r0, #238	; 0xee
 8003876:	f7fd fec3 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 260, 238, 265, BLACK);
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	f240 1309 	movw	r3, #265	; 0x109
 8003882:	22ee      	movs	r2, #238	; 0xee
 8003884:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003888:	20ee      	movs	r0, #238	; 0xee
 800388a:	f7fd feb9 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(246, 235, 246, 240, BLACK);
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	23f0      	movs	r3, #240	; 0xf0
 8003894:	22f6      	movs	r2, #246	; 0xf6
 8003896:	21eb      	movs	r1, #235	; 0xeb
 8003898:	20f6      	movs	r0, #246	; 0xf6
 800389a:	f7fd feb1 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 245, 246, 250, BLACK);
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	23fa      	movs	r3, #250	; 0xfa
 80038a4:	22f6      	movs	r2, #246	; 0xf6
 80038a6:	21f5      	movs	r1, #245	; 0xf5
 80038a8:	20f6      	movs	r0, #246	; 0xf6
 80038aa:	f7fd fea9 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 255, 246, 260, BLACK);
 80038ae:	2300      	movs	r3, #0
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80038b6:	22f6      	movs	r2, #246	; 0xf6
 80038b8:	21ff      	movs	r1, #255	; 0xff
 80038ba:	20f6      	movs	r0, #246	; 0xf6
 80038bc:	f7fd fea0 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(254, 240, 254, 245, BLACK);
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	23f5      	movs	r3, #245	; 0xf5
 80038c6:	22fe      	movs	r2, #254	; 0xfe
 80038c8:	21f0      	movs	r1, #240	; 0xf0
 80038ca:	20fe      	movs	r0, #254	; 0xfe
 80038cc:	f7fd fe98 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 250, 254, 255, BLACK);
 80038d0:	2300      	movs	r3, #0
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	23ff      	movs	r3, #255	; 0xff
 80038d6:	22fe      	movs	r2, #254	; 0xfe
 80038d8:	21fa      	movs	r1, #250	; 0xfa
 80038da:	20fe      	movs	r0, #254	; 0xfe
 80038dc:	f7fd fe90 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 260, 254, 265, BLACK);
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f240 1309 	movw	r3, #265	; 0x109
 80038e8:	22fe      	movs	r2, #254	; 0xfe
 80038ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038ee:	20fe      	movs	r0, #254	; 0xfe
 80038f0:	f7fd fe86 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(238, 235, 238, 240, pHColor[pos]);
 80038f4:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <processAni+0x514>)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	23f0      	movs	r3, #240	; 0xf0
 8003902:	22ee      	movs	r2, #238	; 0xee
 8003904:	21eb      	movs	r1, #235	; 0xeb
 8003906:	20ee      	movs	r0, #238	; 0xee
 8003908:	f7fd fe7a 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 245, 238, 250, pHColor[pos]);
 800390c:	4a37      	ldr	r2, [pc, #220]	; (80039ec <processAni+0x514>)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	b29b      	uxth	r3, r3
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	23fa      	movs	r3, #250	; 0xfa
 800391a:	22ee      	movs	r2, #238	; 0xee
 800391c:	21f5      	movs	r1, #245	; 0xf5
 800391e:	20ee      	movs	r0, #238	; 0xee
 8003920:	f7fd fe6e 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 255, 238, 260, pHColor[pos]);
 8003924:	4a31      	ldr	r2, [pc, #196]	; (80039ec <processAni+0x514>)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	b29b      	uxth	r3, r3
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003934:	22ee      	movs	r2, #238	; 0xee
 8003936:	21ff      	movs	r1, #255	; 0xff
 8003938:	20ee      	movs	r0, #238	; 0xee
 800393a:	f7fd fe61 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(246, 240, 246, 245, pHColor[pos]);
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <processAni+0x514>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	b29b      	uxth	r3, r3
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	23f5      	movs	r3, #245	; 0xf5
 800394c:	22f6      	movs	r2, #246	; 0xf6
 800394e:	21f0      	movs	r1, #240	; 0xf0
 8003950:	20f6      	movs	r0, #246	; 0xf6
 8003952:	f7fd fe55 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 250, 246, 255, pHColor[pos]);
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <processAni+0x514>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	b29b      	uxth	r3, r3
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	23ff      	movs	r3, #255	; 0xff
 8003964:	22f6      	movs	r2, #246	; 0xf6
 8003966:	21fa      	movs	r1, #250	; 0xfa
 8003968:	20f6      	movs	r0, #246	; 0xf6
 800396a:	f7fd fe49 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 260, 246, 266, pHColor[pos]);
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <processAni+0x514>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003976:	b29b      	uxth	r3, r3
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800397e:	22f6      	movs	r2, #246	; 0xf6
 8003980:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003984:	20f6      	movs	r0, #246	; 0xf6
 8003986:	f7fd fe3b 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(254, 235, 254, 240, pHColor[pos]);
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <processAni+0x514>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003992:	b29b      	uxth	r3, r3
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	23f0      	movs	r3, #240	; 0xf0
 8003998:	22fe      	movs	r2, #254	; 0xfe
 800399a:	21eb      	movs	r1, #235	; 0xeb
 800399c:	20fe      	movs	r0, #254	; 0xfe
 800399e:	f7fd fe2f 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 245, 254, 250, pHColor[pos]);
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <processAni+0x514>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	23fa      	movs	r3, #250	; 0xfa
 80039b0:	22fe      	movs	r2, #254	; 0xfe
 80039b2:	21f5      	movs	r1, #245	; 0xf5
 80039b4:	20fe      	movs	r0, #254	; 0xfe
 80039b6:	f7fd fe23 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 255, 254, 260, pHColor[pos]);
 80039ba:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <processAni+0x514>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039ca:	22fe      	movs	r2, #254	; 0xfe
 80039cc:	21ff      	movs	r1, #255	; 0xff
 80039ce:	20fe      	movs	r0, #254	; 0xfe
 80039d0:	f7fd fe16 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 250, 254, 255, pHColor[pos]);
		gfx_drawLine(254, 260, 254, 265, pHColor[pos]);
	}


}
 80039d4:	e0cc      	b.n	8003b70 <processAni+0x698>
 80039d6:	bf00      	nop
 80039d8:	2000000c 	.word	0x2000000c
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004
 80039e4:	20000008 	.word	0x20000008
 80039e8:	20000078 	.word	0x20000078
 80039ec:	20000030 	.word	0x20000030
		test=0;
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <processAni+0x6a0>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
		gfx_drawLine(238, 235, 238, 240, BLACK);
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	23f0      	movs	r3, #240	; 0xf0
 80039fc:	22ee      	movs	r2, #238	; 0xee
 80039fe:	21eb      	movs	r1, #235	; 0xeb
 8003a00:	20ee      	movs	r0, #238	; 0xee
 8003a02:	f7fd fdfd 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 245, 238, 250, BLACK);
 8003a06:	2300      	movs	r3, #0
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	23fa      	movs	r3, #250	; 0xfa
 8003a0c:	22ee      	movs	r2, #238	; 0xee
 8003a0e:	21f5      	movs	r1, #245	; 0xf5
 8003a10:	20ee      	movs	r0, #238	; 0xee
 8003a12:	f7fd fdf5 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 255, 238, 260, BLACK);
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a1e:	22ee      	movs	r2, #238	; 0xee
 8003a20:	21ff      	movs	r1, #255	; 0xff
 8003a22:	20ee      	movs	r0, #238	; 0xee
 8003a24:	f7fd fdec 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 240, 246, 245, BLACK);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	23f5      	movs	r3, #245	; 0xf5
 8003a2e:	22f6      	movs	r2, #246	; 0xf6
 8003a30:	21f0      	movs	r1, #240	; 0xf0
 8003a32:	20f6      	movs	r0, #246	; 0xf6
 8003a34:	f7fd fde4 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 250, 246, 255, BLACK);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	23ff      	movs	r3, #255	; 0xff
 8003a3e:	22f6      	movs	r2, #246	; 0xf6
 8003a40:	21fa      	movs	r1, #250	; 0xfa
 8003a42:	20f6      	movs	r0, #246	; 0xf6
 8003a44:	f7fd fddc 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 260, 246, 266, BLACK);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003a50:	22f6      	movs	r2, #246	; 0xf6
 8003a52:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a56:	20f6      	movs	r0, #246	; 0xf6
 8003a58:	f7fd fdd2 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 235, 254, 240, BLACK);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	23f0      	movs	r3, #240	; 0xf0
 8003a62:	22fe      	movs	r2, #254	; 0xfe
 8003a64:	21eb      	movs	r1, #235	; 0xeb
 8003a66:	20fe      	movs	r0, #254	; 0xfe
 8003a68:	f7fd fdca 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 245, 254, 250, BLACK);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	23fa      	movs	r3, #250	; 0xfa
 8003a72:	22fe      	movs	r2, #254	; 0xfe
 8003a74:	21f5      	movs	r1, #245	; 0xf5
 8003a76:	20fe      	movs	r0, #254	; 0xfe
 8003a78:	f7fd fdc2 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 255, 254, 260, BLACK);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a84:	22fe      	movs	r2, #254	; 0xfe
 8003a86:	21ff      	movs	r1, #255	; 0xff
 8003a88:	20fe      	movs	r0, #254	; 0xfe
 8003a8a:	f7fd fdb9 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 240, 238, 245, pHColor[pos]);
 8003a8e:	4a3b      	ldr	r2, [pc, #236]	; (8003b7c <processAni+0x6a4>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	23f5      	movs	r3, #245	; 0xf5
 8003a9c:	22ee      	movs	r2, #238	; 0xee
 8003a9e:	21f0      	movs	r1, #240	; 0xf0
 8003aa0:	20ee      	movs	r0, #238	; 0xee
 8003aa2:	f7fd fdad 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 250, 238, 255, pHColor[pos]);
 8003aa6:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <processAni+0x6a4>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	23ff      	movs	r3, #255	; 0xff
 8003ab4:	22ee      	movs	r2, #238	; 0xee
 8003ab6:	21fa      	movs	r1, #250	; 0xfa
 8003ab8:	20ee      	movs	r0, #238	; 0xee
 8003aba:	f7fd fda1 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 260, 238, 265, pHColor[pos]);
 8003abe:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <processAni+0x6a4>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	f240 1309 	movw	r3, #265	; 0x109
 8003ace:	22ee      	movs	r2, #238	; 0xee
 8003ad0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003ad4:	20ee      	movs	r0, #238	; 0xee
 8003ad6:	f7fd fd93 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 235, 246, 240, pHColor[pos]);
 8003ada:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <processAni+0x6a4>)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	23f0      	movs	r3, #240	; 0xf0
 8003ae8:	22f6      	movs	r2, #246	; 0xf6
 8003aea:	21eb      	movs	r1, #235	; 0xeb
 8003aec:	20f6      	movs	r0, #246	; 0xf6
 8003aee:	f7fd fd87 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 245, 246, 250, pHColor[pos]);
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <processAni+0x6a4>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	23fa      	movs	r3, #250	; 0xfa
 8003b00:	22f6      	movs	r2, #246	; 0xf6
 8003b02:	21f5      	movs	r1, #245	; 0xf5
 8003b04:	20f6      	movs	r0, #246	; 0xf6
 8003b06:	f7fd fd7b 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 255, 246, 260, pHColor[pos]);
 8003b0a:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <processAni+0x6a4>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b1a:	22f6      	movs	r2, #246	; 0xf6
 8003b1c:	21ff      	movs	r1, #255	; 0xff
 8003b1e:	20f6      	movs	r0, #246	; 0xf6
 8003b20:	f7fd fd6e 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 240, 254, 245, pHColor[pos]);
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <processAni+0x6a4>)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	23f5      	movs	r3, #245	; 0xf5
 8003b32:	22fe      	movs	r2, #254	; 0xfe
 8003b34:	21f0      	movs	r1, #240	; 0xf0
 8003b36:	20fe      	movs	r0, #254	; 0xfe
 8003b38:	f7fd fd62 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 250, 254, 255, pHColor[pos]);
 8003b3c:	4a0f      	ldr	r2, [pc, #60]	; (8003b7c <processAni+0x6a4>)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	23ff      	movs	r3, #255	; 0xff
 8003b4a:	22fe      	movs	r2, #254	; 0xfe
 8003b4c:	21fa      	movs	r1, #250	; 0xfa
 8003b4e:	20fe      	movs	r0, #254	; 0xfe
 8003b50:	f7fd fd56 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 260, 254, 265, pHColor[pos]);
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <processAni+0x6a4>)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f240 1309 	movw	r3, #265	; 0x109
 8003b64:	22fe      	movs	r2, #254	; 0xfe
 8003b66:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b6a:	20fe      	movs	r0, #254	; 0xfe
 8003b6c:	f7fd fd48 	bl	8001600 <gfx_drawLine>
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	20000078 	.word	0x20000078
 8003b7c:	20000030 	.word	0x20000030

08003b80 <destroyTap>:

void destroyTap(int pos){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af06      	add	r7, sp, #24
 8003b86:	6078      	str	r0, [r7, #4]

	switch(pos){
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	f200 8090 	bhi.w	8003cb0 <destroyTap+0x130>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <destroyTap+0x18>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003c2f 	.word	0x08003c2f
 8003ba4:	08003c6f 	.word	0x08003c6f
			case 0: gfx_FillRectWithAngle(220,150,40,10,210, BLACK);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	23d2      	movs	r3, #210	; 0xd2
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	230a      	movs	r3, #10
 8003bb2:	2228      	movs	r2, #40	; 0x28
 8003bb4:	2196      	movs	r1, #150	; 0x96
 8003bb6:	20dc      	movs	r0, #220	; 0xdc
 8003bb8:	f7fe faae 	bl	8002118 <gfx_FillRectWithAngle>
					gfx_btn_initButton(120,120,150,80,BLACK,LIGHTGREEN,WHITE,"pH 8",1);
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	9304      	str	r3, [sp, #16]
 8003bc0:	4b3e      	ldr	r3, [pc, #248]	; (8003cbc <destroyTap+0x13c>)
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	f248 431f 	movw	r3, #33823	; 0x841f
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2350      	movs	r3, #80	; 0x50
 8003bd6:	2296      	movs	r2, #150	; 0x96
 8003bd8:	2178      	movs	r1, #120	; 0x78
 8003bda:	2078      	movs	r0, #120	; 0x78
 8003bdc:	f7fe ff5c 	bl	8002a98 <gfx_btn_initButton>
					gfx_btn_drawButton(0);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f7ff f801 	bl	8002be8 <gfx_btn_drawButton>
					break;
 8003be6:	e064      	b.n	8003cb2 <destroyTap+0x132>
			case 1: gfx_FillRectWithAngle(265,150,40,10,330, BLACK);
 8003be8:	2300      	movs	r3, #0
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	2228      	movs	r2, #40	; 0x28
 8003bf6:	2196      	movs	r1, #150	; 0x96
 8003bf8:	f240 1009 	movw	r0, #265	; 0x109
 8003bfc:	f7fe fa8c 	bl	8002118 <gfx_FillRectWithAngle>
					gfx_btn_initButton(370,120,150,80,BLACK,0x658C,WHITE,"pH 9",1);
 8003c00:	2301      	movs	r3, #1
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <destroyTap+0x140>)
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c0c:	9302      	str	r3, [sp, #8]
 8003c0e:	f246 538c 	movw	r3, #25996	; 0x658c
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2350      	movs	r3, #80	; 0x50
 8003c1a:	2296      	movs	r2, #150	; 0x96
 8003c1c:	2178      	movs	r1, #120	; 0x78
 8003c1e:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003c22:	f7fe ff39 	bl	8002a98 <gfx_btn_initButton>
					gfx_btn_drawButton(0);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fe ffde 	bl	8002be8 <gfx_btn_drawButton>
					break;
 8003c2c:	e041      	b.n	8003cb2 <destroyTap+0x132>
			case 2: gfx_FillRectWithAngle(210,180,40,10,150, BLACK);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	2396      	movs	r3, #150	; 0x96
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	230a      	movs	r3, #10
 8003c38:	2228      	movs	r2, #40	; 0x28
 8003c3a:	21b4      	movs	r1, #180	; 0xb4
 8003c3c:	20d2      	movs	r0, #210	; 0xd2
 8003c3e:	f7fe fa6b 	bl	8002118 <gfx_FillRectWithAngle>
		  	  		gfx_btn_initButton(120,230,150,80,BLACK,0x36B9,WHITE,"pH 10",1);
 8003c42:	2301      	movs	r3, #1
 8003c44:	9304      	str	r3, [sp, #16]
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <destroyTap+0x144>)
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	f243 63b9 	movw	r3, #14009	; 0x36b9
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	2300      	movs	r3, #0
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2350      	movs	r3, #80	; 0x50
 8003c5c:	2296      	movs	r2, #150	; 0x96
 8003c5e:	21e6      	movs	r1, #230	; 0xe6
 8003c60:	2078      	movs	r0, #120	; 0x78
 8003c62:	f7fe ff19 	bl	8002a98 <gfx_btn_initButton>
			  	  	gfx_btn_drawButton(0);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7fe ffbe 	bl	8002be8 <gfx_btn_drawButton>
			  	  	break;
 8003c6c:	e021      	b.n	8003cb2 <destroyTap+0x132>
			case 3: gfx_FillRectWithAngle(270,190,40,10,30, BLACK);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	231e      	movs	r3, #30
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	230a      	movs	r3, #10
 8003c78:	2228      	movs	r2, #40	; 0x28
 8003c7a:	21be      	movs	r1, #190	; 0xbe
 8003c7c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003c80:	f7fe fa4a 	bl	8002118 <gfx_FillRectWithAngle>
					gfx_btn_initButton(370,230,150,80,BLACK,BLUE,WHITE,"pH 11",1);
 8003c84:	2301      	movs	r3, #1
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <destroyTap+0x148>)
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c90:	9302      	str	r3, [sp, #8]
 8003c92:	231f      	movs	r3, #31
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2300      	movs	r3, #0
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2350      	movs	r3, #80	; 0x50
 8003c9c:	2296      	movs	r2, #150	; 0x96
 8003c9e:	21e6      	movs	r1, #230	; 0xe6
 8003ca0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003ca4:	f7fe fef8 	bl	8002a98 <gfx_btn_initButton>
					gfx_btn_drawButton(0);
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f7fe ff9d 	bl	8002be8 <gfx_btn_drawButton>
					break;
 8003cae:	e000      	b.n	8003cb2 <destroyTap+0x132>
			default: break;
 8003cb0:	bf00      	nop
		}
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08006a48 	.word	0x08006a48
 8003cc0:	08006a50 	.word	0x08006a50
 8003cc4:	08006a58 	.word	0x08006a58
 8003cc8:	08006a60 	.word	0x08006a60

08003ccc <createTap>:

void createTap(uint8_t pos){
 8003ccc:	b5b0      	push	{r4, r5, r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
	gfx_fillCircle(245, 170, 35, pHColor[pos]);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	4a71      	ldr	r2, [pc, #452]	; (8003ea0 <createTap+0x1d4>)
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2223      	movs	r2, #35	; 0x23
 8003ce2:	21aa      	movs	r1, #170	; 0xaa
 8003ce4:	20f5      	movs	r0, #245	; 0xf5
 8003ce6:	f7fd feb3 	bl	8001a50 <gfx_fillCircle>
	gfx_drawCircle(245, 170, 25, WHITE);
 8003cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cee:	2219      	movs	r2, #25
 8003cf0:	21aa      	movs	r1, #170	; 0xaa
 8003cf2:	20f5      	movs	r0, #245	; 0xf5
 8003cf4:	f7fd fcea 	bl	80016cc <gfx_drawCircle>
	gfx_fillCircle(245, 170, 25, RED);
 8003cf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cfc:	2219      	movs	r2, #25
 8003cfe:	21aa      	movs	r1, #170	; 0xaa
 8003d00:	20f5      	movs	r0, #245	; 0xf5
 8003d02:	f7fd fea5 	bl	8001a50 <gfx_fillCircle>
	gfx_drawCircle(245, 170, 26, WHITE);
 8003d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0a:	221a      	movs	r2, #26
 8003d0c:	21aa      	movs	r1, #170	; 0xaa
 8003d0e:	20f5      	movs	r0, #245	; 0xf5
 8003d10:	f7fd fcdc 	bl	80016cc <gfx_drawCircle>
	gfx_fillRoundRect(235, 200, 22, 30, 2,pHColor[pos] );
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	4a62      	ldr	r2, [pc, #392]	; (8003ea0 <createTap+0x1d4>)
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	2302      	movs	r3, #2
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	231e      	movs	r3, #30
 8003d26:	2216      	movs	r2, #22
 8003d28:	21c8      	movs	r1, #200	; 0xc8
 8003d2a:	20eb      	movs	r0, #235	; 0xeb
 8003d2c:	f7fe f863 	bl	8001df6 <gfx_fillRoundRect>

	gfx_drawLine(225,310,265,310, WHITE);
 8003d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003d3a:	f240 1209 	movw	r2, #265	; 0x109
 8003d3e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003d42:	20e1      	movs	r0, #225	; 0xe1
 8003d44:	f7fd fc5c 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(225,310,215,270, WHITE);
 8003d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003d52:	22d7      	movs	r2, #215	; 0xd7
 8003d54:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003d58:	20e1      	movs	r0, #225	; 0xe1
 8003d5a:	f7fd fc51 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(265,310,275,270, WHITE);
 8003d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003d68:	f240 1213 	movw	r2, #275	; 0x113
 8003d6c:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003d70:	f240 1009 	movw	r0, #265	; 0x109
 8003d74:	f7fd fc44 	bl	8001600 <gfx_drawLine>

	int xr=0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
	for(int i=0;i<5;i++){
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e032      	b.n	8003de8 <createTap+0x11c>
		for(int j=0;j<5;j++){
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e029      	b.n	8003ddc <createTap+0x110>
			gfx_drawLine(225-i,309-xr,265+i,309-xr, pHColor[pos]);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f1c3 03e1 	rsb	r3, r3, #225	; 0xe1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b218      	sxth	r0, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f5c3 739a 	rsb	r3, r3, #308	; 0x134
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b219      	sxth	r1, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f203 1309 	addw	r3, r3, #265	; 0x109
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	b21c      	sxth	r4, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f5c3 739a 	rsb	r3, r3, #308	; 0x134
 8003db6:	3301      	adds	r3, #1
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b21d      	sxth	r5, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <createTap+0x1d4>)
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	462b      	mov	r3, r5
 8003dca:	4622      	mov	r2, r4
 8003dcc:	f7fd fc18 	bl	8001600 <gfx_drawLine>
			xr++;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
		for(int j=0;j<5;j++){
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	ddd2      	ble.n	8003d88 <createTap+0xbc>
	for(int i=0;i<5;i++){
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3301      	adds	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	ddc9      	ble.n	8003d82 <createTap+0xb6>
		}
	}

	gfx_drawEllipse(245, 270, 30, 3, WHITE);
 8003dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2303      	movs	r3, #3
 8003df6:	221e      	movs	r2, #30
 8003df8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003dfc:	20f5      	movs	r0, #245	; 0xf5
 8003dfe:	f7fe f877 	bl	8001ef0 <gfx_drawEllipse>

	switch(pos){
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d846      	bhi.n	8003e96 <createTap+0x1ca>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <createTap+0x144>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e5d 	.word	0x08003e5d
 8003e1c:	08003e79 	.word	0x08003e79
			case 0: gfx_FillRectWithAngle(220,150,40,10,210, pHColor[pos]); break;
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <createTap+0x1d4>)
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	23d2      	movs	r3, #210	; 0xd2
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	230a      	movs	r3, #10
 8003e30:	2228      	movs	r2, #40	; 0x28
 8003e32:	2196      	movs	r1, #150	; 0x96
 8003e34:	20dc      	movs	r0, #220	; 0xdc
 8003e36:	f7fe f96f 	bl	8002118 <gfx_FillRectWithAngle>
 8003e3a:	e02d      	b.n	8003e98 <createTap+0x1cc>
			case 1: gfx_FillRectWithAngle(265,150,40,10,330, pHColor[pos]); break;
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <createTap+0x1d4>)
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	230a      	movs	r3, #10
 8003e4e:	2228      	movs	r2, #40	; 0x28
 8003e50:	2196      	movs	r1, #150	; 0x96
 8003e52:	f240 1009 	movw	r0, #265	; 0x109
 8003e56:	f7fe f95f 	bl	8002118 <gfx_FillRectWithAngle>
 8003e5a:	e01d      	b.n	8003e98 <createTap+0x1cc>
			case 2: gfx_FillRectWithAngle(210,180,40,10,150, pHColor[pos]); break;
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <createTap+0x1d4>)
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	2396      	movs	r3, #150	; 0x96
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	230a      	movs	r3, #10
 8003e6c:	2228      	movs	r2, #40	; 0x28
 8003e6e:	21b4      	movs	r1, #180	; 0xb4
 8003e70:	20d2      	movs	r0, #210	; 0xd2
 8003e72:	f7fe f951 	bl	8002118 <gfx_FillRectWithAngle>
 8003e76:	e00f      	b.n	8003e98 <createTap+0x1cc>
			case 3: gfx_FillRectWithAngle(270,190,40,10,30, pHColor[pos]); break;
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <createTap+0x1d4>)
 8003e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	231e      	movs	r3, #30
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	230a      	movs	r3, #10
 8003e88:	2228      	movs	r2, #40	; 0x28
 8003e8a:	21be      	movs	r1, #190	; 0xbe
 8003e8c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003e90:	f7fe f942 	bl	8002118 <gfx_FillRectWithAngle>
 8003e94:	e000      	b.n	8003e98 <createTap+0x1cc>
			default: break;
 8003e96:	bf00      	nop
		}


}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea0:	20000030 	.word	0x20000030

08003ea4 <tapLoop>:

void tapLoop(uint8_t pos){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
	ClearprocessAni(aniAngle[aniAnglePos]);
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <tapLoop+0x54>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <tapLoop+0x58>)
 8003eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff f9e0 	bl	8003280 <ClearprocessAni>
	aniAnglePos++;
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <tapLoop+0x54>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <tapLoop+0x54>)
 8003eca:	801a      	strh	r2, [r3, #0]
	if(aniAnglePos>=6) aniAnglePos=0;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <tapLoop+0x54>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d902      	bls.n	8003eda <tapLoop+0x36>
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <tapLoop+0x54>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	801a      	strh	r2, [r3, #0]
	processAni(aniAngle[aniAnglePos],pos);
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <tapLoop+0x54>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <tapLoop+0x58>)
 8003ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee6:	79fa      	ldrb	r2, [r7, #7]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff faf4 	bl	80034d8 <processAni>


}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000074 	.word	0x20000074
 8003efc:	20000010 	.word	0x20000010

08003f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f06:	f000 fa89 	bl	800441c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f0a:	f000 f8b7 	bl	800407c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f0e:	f000 f921 	bl	8004154 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003f12:	f000 f8f5 	bl	8004100 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8003f16:	f7ff f821 	bl	8002f5c <LCD_Init>

  gfx_init(LCD_H,LCD_W);
 8003f1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003f1e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003f22:	f7fd f999 	bl	8001258 <gfx_init>
  gfx_fillScreen(BLACK);
 8003f26:	2000      	movs	r0, #0
 8003f28:	f7fd fb50 	bl	80015cc <gfx_fillScreen>
  gfx_setFont(&FreeMonoBold18pt7b);
 8003f2c:	484c      	ldr	r0, [pc, #304]	; (8004060 <main+0x160>)
 8003f2e:	f7fe fd85 	bl	8002a3c <gfx_setFont>
  gfx_setTextColor(WHITE);
 8003f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f36:	f7fd f979 	bl	800122c <gfx_setTextColor>
  gfx_setCursor(160, 40);
 8003f3a:	2128      	movs	r1, #40	; 0x28
 8003f3c:	20a0      	movs	r0, #160	; 0xa0
 8003f3e:	f7fd f95d 	bl	80011fc <gfx_setCursor>
  gfx_print("Manthan Jal");
 8003f42:	4848      	ldr	r0, [pc, #288]	; (8004064 <main+0x164>)
 8003f44:	f7fe fd42 	bl	80029cc <gfx_print>
  gfx_drawRGBBitmap1(100,10,gImage_testImg,40,40);
 8003f48:	2328      	movs	r3, #40	; 0x28
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2328      	movs	r3, #40	; 0x28
 8003f4e:	4a46      	ldr	r2, [pc, #280]	; (8004068 <main+0x168>)
 8003f50:	210a      	movs	r1, #10
 8003f52:	2064      	movs	r0, #100	; 0x64
 8003f54:	f7fe f9b6 	bl	80022c4 <gfx_drawRGBBitmap1>
  gfx_btn_initButton(120,120,150,80,BLACK,LIGHTGREEN,WHITE,"pH 8",1);
 8003f58:	2301      	movs	r3, #1
 8003f5a:	9304      	str	r3, [sp, #16]
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <main+0x16c>)
 8003f5e:	9303      	str	r3, [sp, #12]
 8003f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f64:	9302      	str	r3, [sp, #8]
 8003f66:	f248 431f 	movw	r3, #33823	; 0x841f
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2350      	movs	r3, #80	; 0x50
 8003f72:	2296      	movs	r2, #150	; 0x96
 8003f74:	2178      	movs	r1, #120	; 0x78
 8003f76:	2078      	movs	r0, #120	; 0x78
 8003f78:	f7fe fd8e 	bl	8002a98 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f7fe fe33 	bl	8002be8 <gfx_btn_drawButton>
  gfx_btn_initButton(370,120,150,80,BLACK,0x658C,WHITE,"pH 9",1);
 8003f82:	2301      	movs	r3, #1
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <main+0x170>)
 8003f88:	9303      	str	r3, [sp, #12]
 8003f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	f246 538c 	movw	r3, #25996	; 0x658c
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2350      	movs	r3, #80	; 0x50
 8003f9c:	2296      	movs	r2, #150	; 0x96
 8003f9e:	2178      	movs	r1, #120	; 0x78
 8003fa0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003fa4:	f7fe fd78 	bl	8002a98 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fe fe1d 	bl	8002be8 <gfx_btn_drawButton>
  gfx_btn_initButton(120,230,150,80,BLACK,0x36B9,WHITE,"pH 10",1);
 8003fae:	2301      	movs	r3, #1
 8003fb0:	9304      	str	r3, [sp, #16]
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <main+0x174>)
 8003fb4:	9303      	str	r3, [sp, #12]
 8003fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	f243 63b9 	movw	r3, #14009	; 0x36b9
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2350      	movs	r3, #80	; 0x50
 8003fc8:	2296      	movs	r2, #150	; 0x96
 8003fca:	21e6      	movs	r1, #230	; 0xe6
 8003fcc:	2078      	movs	r0, #120	; 0x78
 8003fce:	f7fe fd63 	bl	8002a98 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f7fe fe08 	bl	8002be8 <gfx_btn_drawButton>
  gfx_btn_initButton(370,230,150,80,BLACK,BLUE,WHITE,"pH 11",1);
 8003fd8:	2301      	movs	r3, #1
 8003fda:	9304      	str	r3, [sp, #16]
 8003fdc:	4b26      	ldr	r3, [pc, #152]	; (8004078 <main+0x178>)
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	231f      	movs	r3, #31
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2350      	movs	r3, #80	; 0x50
 8003ff0:	2296      	movs	r2, #150	; 0x96
 8003ff2:	21e6      	movs	r1, #230	; 0xe6
 8003ff4:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003ff8:	f7fe fd4e 	bl	8002a98 <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7fe fdf3 	bl	8002be8 <gfx_btn_drawButton>

  long ts=0;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
  int post=0;
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
  createTap(post);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fe5c 	bl	8003ccc <createTap>

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);


	if(HAL_GetTick()-ts>6000){
 8004014:	f000 fa5a 	bl	80044cc <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004022:	4293      	cmp	r3, r2
 8004024:	d913      	bls.n	800404e <main+0x14e>
		ts=HAL_GetTick();
 8004026:	f000 fa51 	bl	80044cc <HAL_GetTick>
 800402a:	4603      	mov	r3, r0
 800402c:	607b      	str	r3, [r7, #4]
		destroyTap(post);
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f7ff fda6 	bl	8003b80 <destroyTap>
		post++;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	603b      	str	r3, [r7, #0]
		if(post>=4){
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b03      	cmp	r3, #3
 800403e:	dd01      	ble.n	8004044 <main+0x144>
			post=0;
 8004040:	2300      	movs	r3, #0
 8004042:	603b      	str	r3, [r7, #0]
		}
		createTap(post);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe3f 	bl	8003ccc <createTap>

	}
	tapLoop(post);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff26 	bl	8003ea4 <tapLoop>
	HAL_Delay(200);
 8004058:	20c8      	movs	r0, #200	; 0xc8
 800405a:	f000 fa41 	bl	80044e0 <HAL_Delay>
	if(HAL_GetTick()-ts>6000){
 800405e:	e7d9      	b.n	8004014 <main+0x114>
 8004060:	08008168 	.word	0x08008168
 8004064:	08006a68 	.word	0x08006a68
 8004068:	08008178 	.word	0x08008178
 800406c:	08006a48 	.word	0x08006a48
 8004070:	08006a50 	.word	0x08006a50
 8004074:	08006a58 	.word	0x08006a58
 8004078:	08006a60 	.word	0x08006a60

0800407c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b090      	sub	sp, #64	; 0x40
 8004080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004082:	f107 0318 	add.w	r3, r7, #24
 8004086:	2228      	movs	r2, #40	; 0x28
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fc92 	bl	80059b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800409e:	2302      	movs	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040a2:	2301      	movs	r3, #1
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040a6:	2310      	movs	r3, #16
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040aa:	2302      	movs	r3, #2
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80040ae:	2300      	movs	r3, #0
 80040b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80040b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040b8:	f107 0318 	add.w	r3, r7, #24
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fd27 	bl	8004b10 <HAL_RCC_OscConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80040c8:	f000 f8bc 	bl	8004244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040cc:	230f      	movs	r3, #15
 80040ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040d0:	2302      	movs	r3, #2
 80040d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff92 	bl	8005010 <HAL_RCC_ClockConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80040f2:	f000 f8a7 	bl	8004244 <Error_Handler>
  }
}
 80040f6:	bf00      	nop
 80040f8:	3740      	adds	r7, #64	; 0x40
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <MX_USART1_UART_Init+0x4c>)
 8004106:	4a12      	ldr	r2, [pc, #72]	; (8004150 <MX_USART1_UART_Init+0x50>)
 8004108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <MX_USART1_UART_Init+0x4c>)
 800410c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <MX_USART1_UART_Init+0x4c>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <MX_USART1_UART_Init+0x4c>)
 800411a:	2200      	movs	r2, #0
 800411c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <MX_USART1_UART_Init+0x4c>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <MX_USART1_UART_Init+0x4c>)
 8004126:	220c      	movs	r2, #12
 8004128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <MX_USART1_UART_Init+0x4c>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <MX_USART1_UART_Init+0x4c>)
 8004132:	2200      	movs	r2, #0
 8004134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004136:	4805      	ldr	r0, [pc, #20]	; (800414c <MX_USART1_UART_Init+0x4c>)
 8004138:	f001 f908 	bl	800534c <HAL_UART_Init>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004142:	f000 f87f 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200000dc 	.word	0x200000dc
 8004150:	40013800 	.word	0x40013800

08004154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415a:	f107 0310 	add.w	r3, r7, #16
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <MX_GPIO_Init+0xe0>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a31      	ldr	r2, [pc, #196]	; (8004234 <MX_GPIO_Init+0xe0>)
 800416e:	f043 0310 	orr.w	r3, r3, #16
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <MX_GPIO_Init+0xe0>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <MX_GPIO_Init+0xe0>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <MX_GPIO_Init+0xe0>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	6193      	str	r3, [r2, #24]
 800418c:	4b29      	ldr	r3, [pc, #164]	; (8004234 <MX_GPIO_Init+0xe0>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004198:	4b26      	ldr	r3, [pc, #152]	; (8004234 <MX_GPIO_Init+0xe0>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4a25      	ldr	r2, [pc, #148]	; (8004234 <MX_GPIO_Init+0xe0>)
 800419e:	f043 0308 	orr.w	r3, r3, #8
 80041a2:	6193      	str	r3, [r2, #24]
 80041a4:	4b23      	ldr	r3, [pc, #140]	; (8004234 <MX_GPIO_Init+0xe0>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041b6:	4820      	ldr	r0, [pc, #128]	; (8004238 <MX_GPIO_Init+0xe4>)
 80041b8:	f000 fc92 	bl	8004ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80041bc:	2200      	movs	r2, #0
 80041be:	211e      	movs	r1, #30
 80041c0:	481e      	ldr	r0, [pc, #120]	; (800423c <MX_GPIO_Init+0xe8>)
 80041c2:	f000 fc8d 	bl	8004ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin
 80041c6:	2200      	movs	r2, #0
 80041c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041cc:	481c      	ldr	r0, [pc, #112]	; (8004240 <MX_GPIO_Init+0xec>)
 80041ce:	f000 fc87 	bl	8004ae0 <HAL_GPIO_WritePin>
                          |LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin|LCD_D14_Pin
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80041d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041e0:	2303      	movs	r3, #3
 80041e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80041e4:	f107 0310 	add.w	r3, r7, #16
 80041e8:	4619      	mov	r1, r3
 80041ea:	4813      	ldr	r0, [pc, #76]	; (8004238 <MX_GPIO_Init+0xe4>)
 80041ec:	f000 fb1e 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_WR_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80041f0:	231e      	movs	r3, #30
 80041f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4619      	mov	r1, r3
 8004206:	480d      	ldr	r0, [pc, #52]	; (800423c <MX_GPIO_Init+0xe8>)
 8004208:	f000 fb10 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D10_Pin
                           LCD_D11_Pin LCD_D12_Pin LCD_D13_Pin LCD_D14_Pin
                           LCD_D15_Pin LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin LCD_D8_Pin LCD_D9_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin
 800420c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004210:	613b      	str	r3, [r7, #16]
                          |LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin|LCD_D14_Pin
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004212:	2301      	movs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800421a:	2303      	movs	r3, #3
 800421c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	4619      	mov	r1, r3
 8004224:	4806      	ldr	r0, [pc, #24]	; (8004240 <MX_GPIO_Init+0xec>)
 8004226:	f000 fb01 	bl	800482c <HAL_GPIO_Init>

}
 800422a:	bf00      	nop
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	40011000 	.word	0x40011000
 800423c:	40010800 	.word	0x40010800
 8004240:	40010c00 	.word	0x40010c00

08004244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <HAL_MspInit+0x5c>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	4a14      	ldr	r2, [pc, #80]	; (80042ac <HAL_MspInit+0x5c>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6193      	str	r3, [r2, #24]
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_MspInit+0x5c>)
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_MspInit+0x5c>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_MspInit+0x5c>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	61d3      	str	r3, [r2, #28]
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_MspInit+0x5c>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_MspInit+0x60>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <HAL_MspInit+0x60>)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40010000 	.word	0x40010000

080042b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <HAL_UART_MspInit+0x9c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d139      	bne.n	8004348 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <HAL_UART_MspInit+0xa0>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <HAL_UART_MspInit+0xa0>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	6193      	str	r3, [r2, #24]
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <HAL_UART_MspInit+0xa0>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_UART_MspInit+0xa0>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_UART_MspInit+0xa0>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6193      	str	r3, [r2, #24]
 80042f8:	4b16      	ldr	r3, [pc, #88]	; (8004354 <HAL_UART_MspInit+0xa0>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800430e:	2303      	movs	r3, #3
 8004310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	4619      	mov	r1, r3
 8004318:	480f      	ldr	r0, [pc, #60]	; (8004358 <HAL_UART_MspInit+0xa4>)
 800431a:	f000 fa87 	bl	800482c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800431e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f107 0310 	add.w	r3, r7, #16
 8004330:	4619      	mov	r1, r3
 8004332:	4809      	ldr	r0, [pc, #36]	; (8004358 <HAL_UART_MspInit+0xa4>)
 8004334:	f000 fa7a 	bl	800482c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004338:	2200      	movs	r2, #0
 800433a:	2100      	movs	r1, #0
 800433c:	2025      	movs	r0, #37	; 0x25
 800433e:	f000 f9c8 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004342:	2025      	movs	r0, #37	; 0x25
 8004344:	f000 f9e1 	bl	800470a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004348:	bf00      	nop
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40013800 	.word	0x40013800
 8004354:	40021000 	.word	0x40021000
 8004358:	40010800 	.word	0x40010800

0800435c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436c:	e7fe      	b.n	800436c <HardFault_Handler+0x4>

0800436e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004372:	e7fe      	b.n	8004372 <MemManage_Handler+0x4>

08004374 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004378:	e7fe      	b.n	8004378 <BusFault_Handler+0x4>

0800437a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800437e:	e7fe      	b.n	800437e <UsageFault_Handler+0x4>

08004380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043a8:	f000 f87e 	bl	80044a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043b4:	4802      	ldr	r0, [pc, #8]	; (80043c0 <USART1_IRQHandler+0x10>)
 80043b6:	f001 f817 	bl	80053e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200000dc 	.word	0x200000dc

080043c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043c8:	bf00      	nop
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80043d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80043d2:	e003      	b.n	80043dc <LoopCopyDataInit>

080043d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80043d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80043d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80043da:	3104      	adds	r1, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80043dc:	480a      	ldr	r0, [pc, #40]	; (8004408 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80043e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80043e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80043e4:	d3f6      	bcc.n	80043d4 <CopyDataInit>
  ldr r2, =_sbss
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80043e8:	e002      	b.n	80043f0 <LoopFillZerobss>

080043ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80043ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80043ec:	f842 3b04 	str.w	r3, [r2], #4

080043f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80043f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80043f4:	d3f9      	bcc.n	80043ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043f6:	f7ff ffe5 	bl	80043c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043fa:	f001 fab7 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043fe:	f7ff fd7f 	bl	8003f00 <main>
  bx lr
 8004402:	4770      	bx	lr
  ldr r3, =_sidata
 8004404:	08008ff8 	.word	0x08008ff8
  ldr r0, =_sdata
 8004408:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800440c:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 8004410:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 8004414:	20000120 	.word	0x20000120

08004418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004418:	e7fe      	b.n	8004418 <ADC1_2_IRQHandler>
	...

0800441c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <HAL_Init+0x28>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a07      	ldr	r2, [pc, #28]	; (8004444 <HAL_Init+0x28>)
 8004426:	f043 0310 	orr.w	r3, r3, #16
 800442a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800442c:	2003      	movs	r0, #3
 800442e:	f000 f945 	bl	80046bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004432:	2000      	movs	r0, #0
 8004434:	f000 f808 	bl	8004448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004438:	f7ff ff0a 	bl	8004250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40022000 	.word	0x40022000

08004448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_InitTick+0x54>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_InitTick+0x58>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800445e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f95d 	bl	8004726 <HAL_SYSTICK_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e00e      	b.n	8004494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d80a      	bhi.n	8004492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800447c:	2200      	movs	r2, #0
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	f000 f925 	bl	80046d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004488:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <HAL_InitTick+0x5c>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000040 	.word	0x20000040
 80044a0:	20000048 	.word	0x20000048
 80044a4:	20000044 	.word	0x20000044

080044a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_IncTick+0x1c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_IncTick+0x20>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	4a03      	ldr	r2, [pc, #12]	; (80044c8 <HAL_IncTick+0x20>)
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	20000048 	.word	0x20000048
 80044c8:	2000011c 	.word	0x2000011c

080044cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return uwTick;
 80044d0:	4b02      	ldr	r3, [pc, #8]	; (80044dc <HAL_GetTick+0x10>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	2000011c 	.word	0x2000011c

080044e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7ff fff0 	bl	80044cc <HAL_GetTick>
 80044ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d005      	beq.n	8004506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_Delay+0x40>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004506:	bf00      	nop
 8004508:	f7ff ffe0 	bl	80044cc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d8f7      	bhi.n	8004508 <HAL_Delay+0x28>
  {
  }
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000048 	.word	0x20000048

08004524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004540:	4013      	ands	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800454c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004556:	4a04      	ldr	r2, [pc, #16]	; (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	60d3      	str	r3, [r2, #12]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <__NVIC_GetPriorityGrouping+0x18>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 0307 	and.w	r3, r3, #7
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	db0b      	blt.n	80045b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <__NVIC_EnableIRQ+0x34>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2001      	movs	r0, #1
 80045aa:	fa00 f202 	lsl.w	r2, r0, r2
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0a      	blt.n	80045ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	490c      	ldr	r1, [pc, #48]	; (800460c <__NVIC_SetPriority+0x4c>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	440b      	add	r3, r1
 80045e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e8:	e00a      	b.n	8004600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4908      	ldr	r1, [pc, #32]	; (8004610 <__NVIC_SetPriority+0x50>)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3b04      	subs	r3, #4
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	440b      	add	r3, r1
 80045fe:	761a      	strb	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e100 	.word	0xe000e100
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f1c3 0307 	rsb	r3, r3, #7
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf28      	it	cs
 8004632:	2304      	movcs	r3, #4
 8004634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3304      	adds	r3, #4
 800463a:	2b06      	cmp	r3, #6
 800463c:	d902      	bls.n	8004644 <NVIC_EncodePriority+0x30>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3b03      	subs	r3, #3
 8004642:	e000      	b.n	8004646 <NVIC_EncodePriority+0x32>
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	401a      	ands	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800465c:	f04f 31ff 	mov.w	r1, #4294967295
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa01 f303 	lsl.w	r3, r1, r3
 8004666:	43d9      	mvns	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	4313      	orrs	r3, r2
         );
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004688:	d301      	bcc.n	800468e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800468a:	2301      	movs	r3, #1
 800468c:	e00f      	b.n	80046ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800468e:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <SysTick_Config+0x40>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004696:	210f      	movs	r1, #15
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	f7ff ff90 	bl	80045c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <SysTick_Config+0x40>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a6:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <SysTick_Config+0x40>)
 80046a8:	2207      	movs	r2, #7
 80046aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000e010 	.word	0xe000e010

080046bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff2d 	bl	8004524 <__NVIC_SetPriorityGrouping>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4603      	mov	r3, r0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e4:	f7ff ff42 	bl	800456c <__NVIC_GetPriorityGrouping>
 80046e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7ff ff90 	bl	8004614 <NVIC_EncodePriority>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff5f 	bl	80045c0 <__NVIC_SetPriority>
}
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff35 	bl	8004588 <__NVIC_EnableIRQ>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ffa2 	bl	8004678 <SysTick_Config>
 8004734:	4603      	mov	r3, r0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004752:	2b02      	cmp	r3, #2
 8004754:	d005      	beq.n	8004762 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2204      	movs	r2, #4
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e051      	b.n	8004806 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 020e 	bic.w	r2, r2, #14
 8004770:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_DMA_Abort_IT+0xd0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d029      	beq.n	80047e0 <HAL_DMA_Abort_IT+0xa0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_DMA_Abort_IT+0xd4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_DMA_Abort_IT+0x9c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_DMA_Abort_IT+0xd8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01a      	beq.n	80047d6 <HAL_DMA_Abort_IT+0x96>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <HAL_DMA_Abort_IT+0xdc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d012      	beq.n	80047d0 <HAL_DMA_Abort_IT+0x90>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_DMA_Abort_IT+0xe0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00a      	beq.n	80047ca <HAL_DMA_Abort_IT+0x8a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <HAL_DMA_Abort_IT+0xe4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d102      	bne.n	80047c4 <HAL_DMA_Abort_IT+0x84>
 80047be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047c2:	e00e      	b.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 80047c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c8:	e00b      	b.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 80047ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ce:	e008      	b.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 80047d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d4:	e005      	b.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 80047d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047da:	e002      	b.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 80047dc:	2310      	movs	r3, #16
 80047de:	e000      	b.n	80047e2 <HAL_DMA_Abort_IT+0xa2>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <HAL_DMA_Abort_IT+0xe8>)
 80047e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
    } 
  }
  return status;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40020008 	.word	0x40020008
 8004814:	4002001c 	.word	0x4002001c
 8004818:	40020030 	.word	0x40020030
 800481c:	40020044 	.word	0x40020044
 8004820:	40020058 	.word	0x40020058
 8004824:	4002006c 	.word	0x4002006c
 8004828:	40020000 	.word	0x40020000

0800482c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800482c:	b480      	push	{r7}
 800482e:	b08b      	sub	sp, #44	; 0x2c
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800483e:	e127      	b.n	8004a90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004840:	2201      	movs	r2, #1
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	429a      	cmp	r2, r3
 800485a:	f040 8116 	bne.w	8004a8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b12      	cmp	r3, #18
 8004864:	d034      	beq.n	80048d0 <HAL_GPIO_Init+0xa4>
 8004866:	2b12      	cmp	r3, #18
 8004868:	d80d      	bhi.n	8004886 <HAL_GPIO_Init+0x5a>
 800486a:	2b02      	cmp	r3, #2
 800486c:	d02b      	beq.n	80048c6 <HAL_GPIO_Init+0x9a>
 800486e:	2b02      	cmp	r3, #2
 8004870:	d804      	bhi.n	800487c <HAL_GPIO_Init+0x50>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d031      	beq.n	80048da <HAL_GPIO_Init+0xae>
 8004876:	2b01      	cmp	r3, #1
 8004878:	d01c      	beq.n	80048b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800487a:	e048      	b.n	800490e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800487c:	2b03      	cmp	r3, #3
 800487e:	d043      	beq.n	8004908 <HAL_GPIO_Init+0xdc>
 8004880:	2b11      	cmp	r3, #17
 8004882:	d01b      	beq.n	80048bc <HAL_GPIO_Init+0x90>
          break;
 8004884:	e043      	b.n	800490e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004886:	4a89      	ldr	r2, [pc, #548]	; (8004aac <HAL_GPIO_Init+0x280>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d026      	beq.n	80048da <HAL_GPIO_Init+0xae>
 800488c:	4a87      	ldr	r2, [pc, #540]	; (8004aac <HAL_GPIO_Init+0x280>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d806      	bhi.n	80048a0 <HAL_GPIO_Init+0x74>
 8004892:	4a87      	ldr	r2, [pc, #540]	; (8004ab0 <HAL_GPIO_Init+0x284>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d020      	beq.n	80048da <HAL_GPIO_Init+0xae>
 8004898:	4a86      	ldr	r2, [pc, #536]	; (8004ab4 <HAL_GPIO_Init+0x288>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01d      	beq.n	80048da <HAL_GPIO_Init+0xae>
          break;
 800489e:	e036      	b.n	800490e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80048a0:	4a85      	ldr	r2, [pc, #532]	; (8004ab8 <HAL_GPIO_Init+0x28c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0xae>
 80048a6:	4a85      	ldr	r2, [pc, #532]	; (8004abc <HAL_GPIO_Init+0x290>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d016      	beq.n	80048da <HAL_GPIO_Init+0xae>
 80048ac:	4a84      	ldr	r2, [pc, #528]	; (8004ac0 <HAL_GPIO_Init+0x294>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_GPIO_Init+0xae>
          break;
 80048b2:	e02c      	b.n	800490e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	623b      	str	r3, [r7, #32]
          break;
 80048ba:	e028      	b.n	800490e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	623b      	str	r3, [r7, #32]
          break;
 80048c4:	e023      	b.n	800490e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	3308      	adds	r3, #8
 80048cc:	623b      	str	r3, [r7, #32]
          break;
 80048ce:	e01e      	b.n	800490e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	330c      	adds	r3, #12
 80048d6:	623b      	str	r3, [r7, #32]
          break;
 80048d8:	e019      	b.n	800490e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80048e2:	2304      	movs	r3, #4
 80048e4:	623b      	str	r3, [r7, #32]
          break;
 80048e6:	e012      	b.n	800490e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048f0:	2308      	movs	r3, #8
 80048f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	611a      	str	r2, [r3, #16]
          break;
 80048fa:	e008      	b.n	800490e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048fc:	2308      	movs	r3, #8
 80048fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	615a      	str	r2, [r3, #20]
          break;
 8004906:	e002      	b.n	800490e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
          break;
 800490c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2bff      	cmp	r3, #255	; 0xff
 8004912:	d801      	bhi.n	8004918 <HAL_GPIO_Init+0xec>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	e001      	b.n	800491c <HAL_GPIO_Init+0xf0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2bff      	cmp	r3, #255	; 0xff
 8004922:	d802      	bhi.n	800492a <HAL_GPIO_Init+0xfe>
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	e002      	b.n	8004930 <HAL_GPIO_Init+0x104>
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	3b08      	subs	r3, #8
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	210f      	movs	r1, #15
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	401a      	ands	r2, r3
 8004942:	6a39      	ldr	r1, [r7, #32]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	431a      	orrs	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8096 	beq.w	8004a8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800495e:	4b59      	ldr	r3, [pc, #356]	; (8004ac4 <HAL_GPIO_Init+0x298>)
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	4a58      	ldr	r2, [pc, #352]	; (8004ac4 <HAL_GPIO_Init+0x298>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6193      	str	r3, [r2, #24]
 800496a:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <HAL_GPIO_Init+0x298>)
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004976:	4a54      	ldr	r2, [pc, #336]	; (8004ac8 <HAL_GPIO_Init+0x29c>)
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	3302      	adds	r3, #2
 800497e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004982:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4013      	ands	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4b      	ldr	r2, [pc, #300]	; (8004acc <HAL_GPIO_Init+0x2a0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_GPIO_Init+0x19e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4a      	ldr	r2, [pc, #296]	; (8004ad0 <HAL_GPIO_Init+0x2a4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00d      	beq.n	80049c6 <HAL_GPIO_Init+0x19a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a49      	ldr	r2, [pc, #292]	; (8004ad4 <HAL_GPIO_Init+0x2a8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <HAL_GPIO_Init+0x196>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a48      	ldr	r2, [pc, #288]	; (8004ad8 <HAL_GPIO_Init+0x2ac>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_GPIO_Init+0x192>
 80049ba:	2303      	movs	r3, #3
 80049bc:	e006      	b.n	80049cc <HAL_GPIO_Init+0x1a0>
 80049be:	2304      	movs	r3, #4
 80049c0:	e004      	b.n	80049cc <HAL_GPIO_Init+0x1a0>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e002      	b.n	80049cc <HAL_GPIO_Init+0x1a0>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_GPIO_Init+0x1a0>
 80049ca:	2300      	movs	r3, #0
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	f002 0203 	and.w	r2, r2, #3
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	4093      	lsls	r3, r2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80049dc:	493a      	ldr	r1, [pc, #232]	; (8004ac8 <HAL_GPIO_Init+0x29c>)
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4938      	ldr	r1, [pc, #224]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	e006      	b.n	8004a12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a04:	4b35      	ldr	r3, [pc, #212]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	4933      	ldr	r1, [pc, #204]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a1e:	4b2f      	ldr	r3, [pc, #188]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	492e      	ldr	r1, [pc, #184]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]
 8004a2a:	e006      	b.n	8004a3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	4929      	ldr	r1, [pc, #164]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a46:	4b25      	ldr	r3, [pc, #148]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	4924      	ldr	r1, [pc, #144]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
 8004a52:	e006      	b.n	8004a62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a54:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	491f      	ldr	r1, [pc, #124]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	491a      	ldr	r1, [pc, #104]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
 8004a7a:	e006      	b.n	8004a8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a7c:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	4915      	ldr	r1, [pc, #84]	; (8004adc <HAL_GPIO_Init+0x2b0>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f47f aed0 	bne.w	8004840 <HAL_GPIO_Init+0x14>
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	372c      	adds	r7, #44	; 0x2c
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	10210000 	.word	0x10210000
 8004ab0:	10110000 	.word	0x10110000
 8004ab4:	10120000 	.word	0x10120000
 8004ab8:	10310000 	.word	0x10310000
 8004abc:	10320000 	.word	0x10320000
 8004ac0:	10220000 	.word	0x10220000
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010800 	.word	0x40010800
 8004ad0:	40010c00 	.word	0x40010c00
 8004ad4:	40011000 	.word	0x40011000
 8004ad8:	40011400 	.word	0x40011400
 8004adc:	40010400 	.word	0x40010400

08004ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
 8004aec:	4613      	mov	r3, r2
 8004aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004af0:	787b      	ldrb	r3, [r7, #1]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004afc:	e003      	b.n	8004b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004afe:	887b      	ldrh	r3, [r7, #2]
 8004b00:	041a      	lsls	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e26c      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8087 	beq.w	8004c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b30:	4b92      	ldr	r3, [pc, #584]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d00c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b3c:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x5e>
 8004b48:	4b8c      	ldr	r3, [pc, #560]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b56:	4b89      	ldr	r3, [pc, #548]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d06c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x12c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d168      	bne.n	8004c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e246      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x76>
 8004b78:	4b80      	ldr	r3, [pc, #512]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7f      	ldr	r2, [pc, #508]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e02e      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x98>
 8004b8e:	4b7b      	ldr	r3, [pc, #492]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7a      	ldr	r2, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b78      	ldr	r3, [pc, #480]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a77      	ldr	r2, [pc, #476]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e01d      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0xbc>
 8004bb2:	4b72      	ldr	r3, [pc, #456]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a71      	ldr	r2, [pc, #452]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6a      	ldr	r2, [pc, #424]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a67      	ldr	r2, [pc, #412]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7ff fc6e 	bl	80044cc <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7ff fc6a 	bl	80044cc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1fa      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0xe4>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7ff fc5a 	bl	80044cc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7ff fc56 	bl	80044cc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1e6      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x10c>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d063      	beq.n	8004d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4a:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c56:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d11c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x18c>
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d116      	bne.n	8004c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6e:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e1ba      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4939      	ldr	r1, [pc, #228]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	e03a      	b.n	8004d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d020      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca4:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7ff fc0f 	bl	80044cc <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb2:	f7ff fc0b 	bl	80044cc <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e19b      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd0:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4927      	ldr	r1, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
 8004ce4:	e015      	b.n	8004d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7ff fbee 	bl	80044cc <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7ff fbea 	bl	80044cc <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e17a      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d03a      	beq.n	8004d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d019      	beq.n	8004d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2c:	f7ff fbce 	bl	80044cc <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7ff fbca 	bl	80044cc <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e15a      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f000 fadc 	bl	8005310 <RCC_Delay>
 8004d58:	e01c      	b.n	8004d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d60:	f7ff fbb4 	bl	80044cc <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d66:	e00f      	b.n	8004d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7ff fbb0 	bl	80044cc <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d908      	bls.n	8004d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e140      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	42420000 	.word	0x42420000
 8004d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	4b9e      	ldr	r3, [pc, #632]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e9      	bne.n	8004d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a6 	beq.w	8004eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b97      	ldr	r3, [pc, #604]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	4b94      	ldr	r3, [pc, #592]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4a93      	ldr	r2, [pc, #588]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	61d3      	str	r3, [r2, #28]
 8004dbe:	4b91      	ldr	r3, [pc, #580]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	4b8e      	ldr	r3, [pc, #568]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d118      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dda:	4b8b      	ldr	r3, [pc, #556]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a8a      	ldr	r2, [pc, #552]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de6:	f7ff fb71 	bl	80044cc <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7ff fb6d 	bl	80044cc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	; 0x64
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e0fd      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b81      	ldr	r3, [pc, #516]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x312>
 8004e14:	4b7b      	ldr	r3, [pc, #492]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4a7a      	ldr	r2, [pc, #488]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6213      	str	r3, [r2, #32]
 8004e20:	e02d      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x334>
 8004e2a:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6213      	str	r3, [r2, #32]
 8004e36:	4b73      	ldr	r3, [pc, #460]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a72      	ldr	r2, [pc, #456]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	6213      	str	r3, [r2, #32]
 8004e42:	e01c      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x356>
 8004e4c:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a6c      	ldr	r2, [pc, #432]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a69      	ldr	r2, [pc, #420]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	e00b      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e66:	4b67      	ldr	r3, [pc, #412]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a66      	ldr	r2, [pc, #408]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6213      	str	r3, [r2, #32]
 8004e72:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4a63      	ldr	r2, [pc, #396]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d015      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e86:	f7ff fb21 	bl	80044cc <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8e:	f7ff fb1d 	bl	80044cc <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0ab      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	4b57      	ldr	r3, [pc, #348]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ee      	beq.n	8004e8e <HAL_RCC_OscConfig+0x37e>
 8004eb0:	e014      	b.n	8004edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7ff fb0b 	bl	80044cc <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7ff fb07 	bl	80044cc <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e095      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	4b4c      	ldr	r3, [pc, #304]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ee      	bne.n	8004eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b48      	ldr	r3, [pc, #288]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a47      	ldr	r2, [pc, #284]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8081 	beq.w	8004ffa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef8:	4b42      	ldr	r3, [pc, #264]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d061      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d146      	bne.n	8004f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b3f      	ldr	r3, [pc, #252]	; (800500c <HAL_RCC_OscConfig+0x4fc>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f12:	f7ff fadb 	bl	80044cc <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7ff fad7 	bl	80044cc <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e067      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f42:	4b30      	ldr	r3, [pc, #192]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	492d      	ldr	r1, [pc, #180]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a19      	ldr	r1, [r3, #32]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	430b      	orrs	r3, r1
 8004f66:	4927      	ldr	r1, [pc, #156]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b27      	ldr	r3, [pc, #156]	; (800500c <HAL_RCC_OscConfig+0x4fc>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7ff faab 	bl	80044cc <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7ff faa7 	bl	80044cc <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e037      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x46a>
 8004f98:	e02f      	b.n	8004ffa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b1c      	ldr	r3, [pc, #112]	; (800500c <HAL_RCC_OscConfig+0x4fc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7ff fa94 	bl	80044cc <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7ff fa90 	bl	80044cc <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e020      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x498>
 8004fc6:	e018      	b.n	8004ffa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e013      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <HAL_RCC_OscConfig+0x4f4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d106      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000
 8005008:	40007000 	.word	0x40007000
 800500c:	42420060 	.word	0x42420060

08005010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0d0      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b6a      	ldr	r3, [pc, #424]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d910      	bls.n	8005054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b67      	ldr	r3, [pc, #412]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0207 	bic.w	r2, r3, #7
 800503a:	4965      	ldr	r1, [pc, #404]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b63      	ldr	r3, [pc, #396]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0b8      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d020      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800506c:	4b59      	ldr	r3, [pc, #356]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a58      	ldr	r2, [pc, #352]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005084:	4b53      	ldr	r3, [pc, #332]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4a52      	ldr	r2, [pc, #328]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800508e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005090:	4b50      	ldr	r3, [pc, #320]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	494d      	ldr	r1, [pc, #308]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d040      	beq.n	8005130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d115      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e07f      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e073      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050de:	4b3d      	ldr	r3, [pc, #244]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e06b      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4936      	ldr	r1, [pc, #216]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005100:	f7ff f9e4 	bl	80044cc <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7ff f9e0 	bl	80044cc <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e053      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 020c 	and.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	429a      	cmp	r2, r3
 800512e:	d1eb      	bne.n	8005108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d210      	bcs.n	8005160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 0207 	bic.w	r2, r3, #7
 8005146:	4922      	ldr	r1, [pc, #136]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514e:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e032      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4916      	ldr	r1, [pc, #88]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	490e      	ldr	r1, [pc, #56]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800519e:	f000 f821 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80051a2:	4601      	mov	r1, r0
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
 80051b2:	fa21 f303 	lsr.w	r3, r1, r3
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <HAL_RCC_ClockConfig+0x1cc>)
 80051b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <HAL_RCC_ClockConfig+0x1d0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff f942 	bl	8004448 <HAL_InitTick>

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40022000 	.word	0x40022000
 80051d4:	40021000 	.word	0x40021000
 80051d8:	08008e00 	.word	0x08008e00
 80051dc:	20000040 	.word	0x20000040
 80051e0:	20000044 	.word	0x20000044

080051e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e4:	b490      	push	{r4, r7}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051ea:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051ec:	1d3c      	adds	r4, r7, #4
 80051ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051f4:	4b28      	ldr	r3, [pc, #160]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800520e:	4b23      	ldr	r3, [pc, #140]	; (800529c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b04      	cmp	r3, #4
 800521c:	d002      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x40>
 800521e:	2b08      	cmp	r3, #8
 8005220:	d003      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x46>
 8005222:	e02d      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005226:	623b      	str	r3, [r7, #32]
      break;
 8005228:	e02d      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	0c9b      	lsrs	r3, r3, #18
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005236:	4413      	add	r3, r2
 8005238:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800523c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005248:	4b14      	ldr	r3, [pc, #80]	; (800529c <HAL_RCC_GetSysClockFreq+0xb8>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	0c5b      	lsrs	r3, r3, #17
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005256:	4413      	add	r3, r2
 8005258:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800525c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005262:	fb02 f203 	mul.w	r2, r2, r3
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e004      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	623b      	str	r3, [r7, #32]
      break;
 800527e:	e002      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005282:	623b      	str	r3, [r7, #32]
      break;
 8005284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005286:	6a3b      	ldr	r3, [r7, #32]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bc90      	pop	{r4, r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	08006a74 	.word	0x08006a74
 8005298:	08006a84 	.word	0x08006a84
 800529c:	40021000 	.word	0x40021000
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	003d0900 	.word	0x003d0900
 80052a8:	007a1200 	.word	0x007a1200

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <HAL_RCC_GetHCLKFreq+0x10>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	20000040 	.word	0x20000040

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c4:	f7ff fff2 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052c8:	4601      	mov	r1, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4a03      	ldr	r2, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	08008e10 	.word	0x08008e10

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052ec:	f7ff ffde 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052f0:	4601      	mov	r1, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	0adb      	lsrs	r3, r3, #11
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4a03      	ldr	r2, [pc, #12]	; (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	08008e10 	.word	0x08008e10

08005310 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <RCC_Delay+0x34>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <RCC_Delay+0x38>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	0a5b      	lsrs	r3, r3, #9
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800532c:	bf00      	nop
  }
  while (Delay --);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1e5a      	subs	r2, r3, #1
 8005332:	60fa      	str	r2, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f9      	bne.n	800532c <RCC_Delay+0x1c>
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000040 	.word	0x20000040
 8005348:	10624dd3 	.word	0x10624dd3

0800534c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e03f      	b.n	80053de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fe ff9e 	bl	80042b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2224      	movs	r2, #36	; 0x24
 800537c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800538e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fa5d 	bl	8005850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10d      	bne.n	800543a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_UART_IRQHandler+0x52>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f98b 	bl	800574e <UART_Receive_IT>
      return;
 8005438:	e0d1      	b.n	80055de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80b0 	beq.w	80055a2 <HAL_UART_IRQHandler+0x1ba>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <HAL_UART_IRQHandler+0x70>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80a5 	beq.w	80055a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_UART_IRQHandler+0x90>
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_UART_IRQHandler+0xb0>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	f043 0202 	orr.w	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_UART_IRQHandler+0xd0>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00f      	beq.n	80054e2 <HAL_UART_IRQHandler+0xfa>
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <HAL_UART_IRQHandler+0xee>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	f043 0208 	orr.w	r2, r3, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d078      	beq.n	80055dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_UART_IRQHandler+0x11c>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f925 	bl	800574e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <HAL_UART_IRQHandler+0x144>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d031      	beq.n	8005590 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f876 	bl	800561e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d023      	beq.n	8005588 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <HAL_UART_IRQHandler+0x1fc>)
 800555e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f8eb 	bl	8004740 <HAL_DMA_Abort_IT>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d016      	beq.n	800559e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800557a:	4610      	mov	r0, r2
 800557c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557e:	e00e      	b.n	800559e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f843 	bl	800560c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005586:	e00a      	b.n	800559e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f83f 	bl	800560c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558e:	e006      	b.n	800559e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f83b 	bl	800560c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800559c:	e01e      	b.n	80055dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559e:	bf00      	nop
    return;
 80055a0:	e01c      	b.n	80055dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_UART_IRQHandler+0x1d6>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f862 	bl	8005680 <UART_Transmit_IT>
    return;
 80055bc:	e00f      	b.n	80055de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_UART_IRQHandler+0x1f6>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8a3 	bl	800571e <UART_EndTransmit_IT>
    return;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HAL_UART_IRQHandler+0x1f6>
    return;
 80055dc:	bf00      	nop
  }
}
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	08005659 	.word	0x08005659

080055e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005634:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff ffca 	bl	800560c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b21      	cmp	r3, #33	; 0x21
 8005692:	d13e      	bne.n	8005712 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d114      	bne.n	80056c8 <UART_Transmit_IT+0x48>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d110      	bne.n	80056c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]
 80056c6:	e008      	b.n	80056da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6211      	str	r1, [r2, #32]
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10f      	bne.n	800570e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr

0800571e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005734:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff ff52 	bl	80055e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b22      	cmp	r3, #34	; 0x22
 8005760:	d170      	bne.n	8005844 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	d117      	bne.n	800579c <UART_Receive_IT+0x4e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d113      	bne.n	800579c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	b29a      	uxth	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	629a      	str	r2, [r3, #40]	; 0x28
 800579a:	e026      	b.n	80057ea <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d007      	beq.n	80057c0 <UART_Receive_IT+0x72>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <UART_Receive_IT+0x80>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d106      	bne.n	80057ce <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e008      	b.n	80057e0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4619      	mov	r1, r3
 80057f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d120      	bne.n	8005840 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0220 	bic.w	r2, r2, #32
 800580c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800581c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fedf 	bl	80055fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e002      	b.n	8005846 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800588a:	f023 030c 	bic.w	r3, r3, #12
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	430b      	orrs	r3, r1
 8005896:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2c      	ldr	r2, [pc, #176]	; (8005964 <UART_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7ff fd16 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	e002      	b.n	80058c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7ff fcfe 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 80058c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009a      	lsls	r2, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <UART_SetConfig+0x118>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	0119      	lsls	r1, r3, #4
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009a      	lsls	r2, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <UART_SetConfig+0x118>)
 80058fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2064      	movs	r0, #100	; 0x64
 8005906:	fb00 f303 	mul.w	r3, r0, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	3332      	adds	r3, #50	; 0x32
 8005910:	4a15      	ldr	r2, [pc, #84]	; (8005968 <UART_SetConfig+0x118>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591c:	4419      	add	r1, r3
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	fbb2 f2f3 	udiv	r2, r2, r3
 8005934:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <UART_SetConfig+0x118>)
 8005936:	fba3 0302 	umull	r0, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2064      	movs	r0, #100	; 0x64
 800593e:	fb00 f303 	mul.w	r3, r0, r3
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	3332      	adds	r3, #50	; 0x32
 8005948:	4a07      	ldr	r2, [pc, #28]	; (8005968 <UART_SetConfig+0x118>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	f003 020f 	and.w	r2, r3, #15
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	440a      	add	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40013800 	.word	0x40013800
 8005968:	51eb851f 	.word	0x51eb851f

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	2500      	movs	r5, #0
 8005970:	4e0c      	ldr	r6, [pc, #48]	; (80059a4 <__libc_init_array+0x38>)
 8005972:	4c0d      	ldr	r4, [pc, #52]	; (80059a8 <__libc_init_array+0x3c>)
 8005974:	1ba4      	subs	r4, r4, r6
 8005976:	10a4      	asrs	r4, r4, #2
 8005978:	42a5      	cmp	r5, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	f001 f858 	bl	8006a30 <_init>
 8005980:	2500      	movs	r5, #0
 8005982:	4e0a      	ldr	r6, [pc, #40]	; (80059ac <__libc_init_array+0x40>)
 8005984:	4c0a      	ldr	r4, [pc, #40]	; (80059b0 <__libc_init_array+0x44>)
 8005986:	1ba4      	subs	r4, r4, r6
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	42a5      	cmp	r5, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005994:	4798      	blx	r3
 8005996:	3501      	adds	r5, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800599e:	4798      	blx	r3
 80059a0:	3501      	adds	r5, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	08008ff0 	.word	0x08008ff0
 80059a8:	08008ff0 	.word	0x08008ff0
 80059ac:	08008ff0 	.word	0x08008ff0
 80059b0:	08008ff4 	.word	0x08008ff4

080059b4 <memset>:
 80059b4:	4603      	mov	r3, r0
 80059b6:	4402      	add	r2, r0
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	f803 1b01 	strb.w	r1, [r3], #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <strncpy>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4604      	mov	r4, r0
 80059c8:	3901      	subs	r1, #1
 80059ca:	b902      	cbnz	r2, 80059ce <strncpy+0xa>
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	4623      	mov	r3, r4
 80059d0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80059d4:	1e56      	subs	r6, r2, #1
 80059d6:	f803 5b01 	strb.w	r5, [r3], #1
 80059da:	b92d      	cbnz	r5, 80059e8 <strncpy+0x24>
 80059dc:	4414      	add	r4, r2
 80059de:	42a3      	cmp	r3, r4
 80059e0:	d0f4      	beq.n	80059cc <strncpy+0x8>
 80059e2:	f803 5b01 	strb.w	r5, [r3], #1
 80059e6:	e7fa      	b.n	80059de <strncpy+0x1a>
 80059e8:	461c      	mov	r4, r3
 80059ea:	4632      	mov	r2, r6
 80059ec:	e7ed      	b.n	80059ca <strncpy+0x6>
	...

080059f0 <cos>:
 80059f0:	b530      	push	{r4, r5, lr}
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <cos+0x64>)
 80059f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059f8:	4293      	cmp	r3, r2
 80059fa:	b087      	sub	sp, #28
 80059fc:	dc04      	bgt.n	8005a08 <cos+0x18>
 80059fe:	2200      	movs	r2, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	f000 fa55 	bl	8005eb0 <__kernel_cos>
 8005a06:	e006      	b.n	8005a16 <cos+0x26>
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <cos+0x68>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	dd05      	ble.n	8005a1a <cos+0x2a>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	f7fa fba9 	bl	8000168 <__aeabi_dsub>
 8005a16:	b007      	add	sp, #28
 8005a18:	bd30      	pop	{r4, r5, pc}
 8005a1a:	aa02      	add	r2, sp, #8
 8005a1c:	f000 f858 	bl	8005ad0 <__ieee754_rem_pio2>
 8005a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a24:	f000 0403 	and.w	r4, r0, #3
 8005a28:	2c01      	cmp	r4, #1
 8005a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2e:	d008      	beq.n	8005a42 <cos+0x52>
 8005a30:	2c02      	cmp	r4, #2
 8005a32:	d00c      	beq.n	8005a4e <cos+0x5e>
 8005a34:	2c00      	cmp	r4, #0
 8005a36:	d0e4      	beq.n	8005a02 <cos+0x12>
 8005a38:	2401      	movs	r4, #1
 8005a3a:	9400      	str	r4, [sp, #0]
 8005a3c:	f000 fe40 	bl	80066c0 <__kernel_sin>
 8005a40:	e7e9      	b.n	8005a16 <cos+0x26>
 8005a42:	9400      	str	r4, [sp, #0]
 8005a44:	f000 fe3c 	bl	80066c0 <__kernel_sin>
 8005a48:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a4c:	e7e3      	b.n	8005a16 <cos+0x26>
 8005a4e:	f000 fa2f 	bl	8005eb0 <__kernel_cos>
 8005a52:	e7f9      	b.n	8005a48 <cos+0x58>
 8005a54:	3fe921fb 	.word	0x3fe921fb
 8005a58:	7fefffff 	.word	0x7fefffff

08005a5c <sin>:
 8005a5c:	b530      	push	{r4, r5, lr}
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <sin+0x6c>)
 8005a60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a64:	4293      	cmp	r3, r2
 8005a66:	b087      	sub	sp, #28
 8005a68:	dc06      	bgt.n	8005a78 <sin+0x1c>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	f000 fe25 	bl	80066c0 <__kernel_sin>
 8005a76:	e006      	b.n	8005a86 <sin+0x2a>
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <sin+0x70>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	dd05      	ble.n	8005a8a <sin+0x2e>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	f7fa fb71 	bl	8000168 <__aeabi_dsub>
 8005a86:	b007      	add	sp, #28
 8005a88:	bd30      	pop	{r4, r5, pc}
 8005a8a:	aa02      	add	r2, sp, #8
 8005a8c:	f000 f820 	bl	8005ad0 <__ieee754_rem_pio2>
 8005a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a94:	f000 0403 	and.w	r4, r0, #3
 8005a98:	2c01      	cmp	r4, #1
 8005a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a9e:	d005      	beq.n	8005aac <sin+0x50>
 8005aa0:	2c02      	cmp	r4, #2
 8005aa2:	d006      	beq.n	8005ab2 <sin+0x56>
 8005aa4:	b964      	cbnz	r4, 8005ac0 <sin+0x64>
 8005aa6:	2401      	movs	r4, #1
 8005aa8:	9400      	str	r4, [sp, #0]
 8005aaa:	e7e2      	b.n	8005a72 <sin+0x16>
 8005aac:	f000 fa00 	bl	8005eb0 <__kernel_cos>
 8005ab0:	e7e9      	b.n	8005a86 <sin+0x2a>
 8005ab2:	2401      	movs	r4, #1
 8005ab4:	9400      	str	r4, [sp, #0]
 8005ab6:	f000 fe03 	bl	80066c0 <__kernel_sin>
 8005aba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005abe:	e7e2      	b.n	8005a86 <sin+0x2a>
 8005ac0:	f000 f9f6 	bl	8005eb0 <__kernel_cos>
 8005ac4:	e7f9      	b.n	8005aba <sin+0x5e>
 8005ac6:	bf00      	nop
 8005ac8:	3fe921fb 	.word	0x3fe921fb
 8005acc:	7fefffff 	.word	0x7fefffff

08005ad0 <__ieee754_rem_pio2>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	4ac2      	ldr	r2, [pc, #776]	; (8005de0 <__ieee754_rem_pio2+0x310>)
 8005ad8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005adc:	4592      	cmp	sl, r2
 8005ade:	b08d      	sub	sp, #52	; 0x34
 8005ae0:	468b      	mov	fp, r1
 8005ae2:	dc07      	bgt.n	8005af4 <__ieee754_rem_pio2+0x24>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e9c4 0100 	strd	r0, r1, [r4]
 8005aec:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005af0:	2500      	movs	r5, #0
 8005af2:	e023      	b.n	8005b3c <__ieee754_rem_pio2+0x6c>
 8005af4:	4abb      	ldr	r2, [pc, #748]	; (8005de4 <__ieee754_rem_pio2+0x314>)
 8005af6:	4592      	cmp	sl, r2
 8005af8:	dc71      	bgt.n	8005bde <__ieee754_rem_pio2+0x10e>
 8005afa:	a3ab      	add	r3, pc, #684	; (adr r3, 8005da8 <__ieee754_rem_pio2+0x2d8>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	2900      	cmp	r1, #0
 8005b02:	4db9      	ldr	r5, [pc, #740]	; (8005de8 <__ieee754_rem_pio2+0x318>)
 8005b04:	dd36      	ble.n	8005b74 <__ieee754_rem_pio2+0xa4>
 8005b06:	f7fa fb2f 	bl	8000168 <__aeabi_dsub>
 8005b0a:	45aa      	cmp	sl, r5
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	460f      	mov	r7, r1
 8005b10:	d018      	beq.n	8005b44 <__ieee754_rem_pio2+0x74>
 8005b12:	a3a7      	add	r3, pc, #668	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb26 	bl	8000168 <__aeabi_dsub>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4630      	mov	r0, r6
 8005b22:	e9c4 2300 	strd	r2, r3, [r4]
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa fb1e 	bl	8000168 <__aeabi_dsub>
 8005b2c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f7fa fb19 	bl	8000168 <__aeabi_dsub>
 8005b36:	2501      	movs	r5, #1
 8005b38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	b00d      	add	sp, #52	; 0x34
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	a39c      	add	r3, pc, #624	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fb0d 	bl	8000168 <__aeabi_dsub>
 8005b4e:	a39c      	add	r3, pc, #624	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa fb06 	bl	8000168 <__aeabi_dsub>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	e9c4 2300 	strd	r2, r3, [r4]
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa fafe 	bl	8000168 <__aeabi_dsub>
 8005b6c:	a394      	add	r3, pc, #592	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	e7de      	b.n	8005b32 <__ieee754_rem_pio2+0x62>
 8005b74:	f7fa fafa 	bl	800016c <__adddf3>
 8005b78:	45aa      	cmp	sl, r5
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	d016      	beq.n	8005bae <__ieee754_rem_pio2+0xde>
 8005b80:	a38b      	add	r3, pc, #556	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa faf1 	bl	800016c <__adddf3>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4630      	mov	r0, r6
 8005b90:	e9c4 2300 	strd	r2, r3, [r4]
 8005b94:	4639      	mov	r1, r7
 8005b96:	f7fa fae7 	bl	8000168 <__aeabi_dsub>
 8005b9a:	a385      	add	r3, pc, #532	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fae4 	bl	800016c <__adddf3>
 8005ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ba8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bac:	e7c6      	b.n	8005b3c <__ieee754_rem_pio2+0x6c>
 8005bae:	a382      	add	r3, pc, #520	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f7fa fada 	bl	800016c <__adddf3>
 8005bb8:	a381      	add	r3, pc, #516	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	f7fa fad3 	bl	800016c <__adddf3>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4630      	mov	r0, r6
 8005bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	f7fa fac9 	bl	8000168 <__aeabi_dsub>
 8005bd6:	a37a      	add	r3, pc, #488	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	e7e0      	b.n	8005ba0 <__ieee754_rem_pio2+0xd0>
 8005bde:	4a83      	ldr	r2, [pc, #524]	; (8005dec <__ieee754_rem_pio2+0x31c>)
 8005be0:	4592      	cmp	sl, r2
 8005be2:	f300 80d2 	bgt.w	8005d8a <__ieee754_rem_pio2+0x2ba>
 8005be6:	f000 fe21 	bl	800682c <fabs>
 8005bea:	a377      	add	r3, pc, #476	; (adr r3, 8005dc8 <__ieee754_rem_pio2+0x2f8>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	f7fa fc70 	bl	80004d8 <__aeabi_dmul>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4b7d      	ldr	r3, [pc, #500]	; (8005df0 <__ieee754_rem_pio2+0x320>)
 8005bfc:	f7fa fab6 	bl	800016c <__adddf3>
 8005c00:	f7fa ff04 	bl	8000a0c <__aeabi_d2iz>
 8005c04:	4605      	mov	r5, r0
 8005c06:	f7fa fbfd 	bl	8000404 <__aeabi_i2d>
 8005c0a:	a367      	add	r3, pc, #412	; (adr r3, 8005da8 <__ieee754_rem_pio2+0x2d8>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c14:	f7fa fc60 	bl	80004d8 <__aeabi_dmul>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f7fa faa2 	bl	8000168 <__aeabi_dsub>
 8005c24:	a362      	add	r3, pc, #392	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460f      	mov	r7, r1
 8005c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c32:	f7fa fc51 	bl	80004d8 <__aeabi_dmul>
 8005c36:	2d1f      	cmp	r5, #31
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	dc0e      	bgt.n	8005c5c <__ieee754_rem_pio2+0x18c>
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	; (8005df4 <__ieee754_rem_pio2+0x324>)
 8005c40:	1e6a      	subs	r2, r5, #1
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	4553      	cmp	r3, sl
 8005c48:	d008      	beq.n	8005c5c <__ieee754_rem_pio2+0x18c>
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa fa89 	bl	8000168 <__aeabi_dsub>
 8005c56:	e9c4 0100 	strd	r0, r1, [r4]
 8005c5a:	e011      	b.n	8005c80 <__ieee754_rem_pio2+0x1b0>
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	4642      	mov	r2, r8
 8005c60:	4630      	mov	r0, r6
 8005c62:	4639      	mov	r1, r7
 8005c64:	f7fa fa80 	bl	8000168 <__aeabi_dsub>
 8005c68:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005c6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c70:	ebaa 0303 	sub.w	r3, sl, r3
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	dc1f      	bgt.n	8005cb8 <__ieee754_rem_pio2+0x1e8>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	e9c4 2300 	strd	r2, r3, [r4]
 8005c80:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005c84:	4630      	mov	r0, r6
 8005c86:	4653      	mov	r3, sl
 8005c88:	4639      	mov	r1, r7
 8005c8a:	f7fa fa6d 	bl	8000168 <__aeabi_dsub>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	f7fa fa69 	bl	8000168 <__aeabi_dsub>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	f1bb 0f00 	cmp.w	fp, #0
 8005c9e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005ca2:	f6bf af4b 	bge.w	8005b3c <__ieee754_rem_pio2+0x6c>
 8005ca6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005caa:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8005cae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005cb2:	60e1      	str	r1, [r4, #12]
 8005cb4:	426d      	negs	r5, r5
 8005cb6:	e741      	b.n	8005b3c <__ieee754_rem_pio2+0x6c>
 8005cb8:	a33f      	add	r3, pc, #252	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc2:	f7fa fc09 	bl	80004d8 <__aeabi_dmul>
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4689      	mov	r9, r1
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	f7fa fa49 	bl	8000168 <__aeabi_dsub>
 8005cd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4630      	mov	r0, r6
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	f7fa fa41 	bl	8000168 <__aeabi_dsub>
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	f7fa fa3d 	bl	8000168 <__aeabi_dsub>
 8005cee:	a334      	add	r3, pc, #208	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	460f      	mov	r7, r1
 8005cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cfc:	f7fa fbec 	bl	80004d8 <__aeabi_dmul>
 8005d00:	4632      	mov	r2, r6
 8005d02:	463b      	mov	r3, r7
 8005d04:	f7fa fa30 	bl	8000168 <__aeabi_dsub>
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4680      	mov	r8, r0
 8005d0e:	4689      	mov	r9, r1
 8005d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d14:	f7fa fa28 	bl	8000168 <__aeabi_dsub>
 8005d18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d1c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005d20:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005d24:	dc06      	bgt.n	8005d34 <__ieee754_rem_pio2+0x264>
 8005d26:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	e9c4 2300 	strd	r2, r3, [r4]
 8005d32:	e7a5      	b.n	8005c80 <__ieee754_rem_pio2+0x1b0>
 8005d34:	a326      	add	r3, pc, #152	; (adr r3, 8005dd0 <__ieee754_rem_pio2+0x300>)
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3e:	f7fa fbcb 	bl	80004d8 <__aeabi_dmul>
 8005d42:	4680      	mov	r8, r0
 8005d44:	4689      	mov	r9, r1
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d4e:	f7fa fa0b 	bl	8000168 <__aeabi_dsub>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4606      	mov	r6, r0
 8005d58:	460f      	mov	r7, r1
 8005d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d5e:	f7fa fa03 	bl	8000168 <__aeabi_dsub>
 8005d62:	4642      	mov	r2, r8
 8005d64:	464b      	mov	r3, r9
 8005d66:	f7fa f9ff 	bl	8000168 <__aeabi_dsub>
 8005d6a:	a31b      	add	r3, pc, #108	; (adr r3, 8005dd8 <__ieee754_rem_pio2+0x308>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d78:	f7fa fbae 	bl	80004d8 <__aeabi_dmul>
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	f7fa f9f2 	bl	8000168 <__aeabi_dsub>
 8005d84:	4680      	mov	r8, r0
 8005d86:	4689      	mov	r9, r1
 8005d88:	e75f      	b.n	8005c4a <__ieee754_rem_pio2+0x17a>
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <__ieee754_rem_pio2+0x328>)
 8005d8c:	4592      	cmp	sl, r2
 8005d8e:	dd35      	ble.n	8005dfc <__ieee754_rem_pio2+0x32c>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	f7fa f9e8 	bl	8000168 <__aeabi_dsub>
 8005d98:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d9c:	e9c4 0100 	strd	r0, r1, [r4]
 8005da0:	e6a6      	b.n	8005af0 <__ieee754_rem_pio2+0x20>
 8005da2:	bf00      	nop
 8005da4:	f3af 8000 	nop.w
 8005da8:	54400000 	.word	0x54400000
 8005dac:	3ff921fb 	.word	0x3ff921fb
 8005db0:	1a626331 	.word	0x1a626331
 8005db4:	3dd0b461 	.word	0x3dd0b461
 8005db8:	1a600000 	.word	0x1a600000
 8005dbc:	3dd0b461 	.word	0x3dd0b461
 8005dc0:	2e037073 	.word	0x2e037073
 8005dc4:	3ba3198a 	.word	0x3ba3198a
 8005dc8:	6dc9c883 	.word	0x6dc9c883
 8005dcc:	3fe45f30 	.word	0x3fe45f30
 8005dd0:	2e000000 	.word	0x2e000000
 8005dd4:	3ba3198a 	.word	0x3ba3198a
 8005dd8:	252049c1 	.word	0x252049c1
 8005ddc:	397b839a 	.word	0x397b839a
 8005de0:	3fe921fb 	.word	0x3fe921fb
 8005de4:	4002d97b 	.word	0x4002d97b
 8005de8:	3ff921fb 	.word	0x3ff921fb
 8005dec:	413921fb 	.word	0x413921fb
 8005df0:	3fe00000 	.word	0x3fe00000
 8005df4:	08008e18 	.word	0x08008e18
 8005df8:	7fefffff 	.word	0x7fefffff
 8005dfc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005e00:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005e04:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005e08:	460f      	mov	r7, r1
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	f7fa fdfe 	bl	8000a0c <__aeabi_d2iz>
 8005e10:	f7fa faf8 	bl	8000404 <__aeabi_i2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4630      	mov	r0, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e20:	f7fa f9a2 	bl	8000168 <__aeabi_dsub>
 8005e24:	2200      	movs	r2, #0
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <__ieee754_rem_pio2+0x3d8>)
 8005e28:	f7fa fb56 	bl	80004d8 <__aeabi_dmul>
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	4606      	mov	r6, r0
 8005e30:	f7fa fdec 	bl	8000a0c <__aeabi_d2iz>
 8005e34:	f7fa fae6 	bl	8000404 <__aeabi_i2d>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	4639      	mov	r1, r7
 8005e40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e44:	f7fa f990 	bl	8000168 <__aeabi_dsub>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <__ieee754_rem_pio2+0x3d8>)
 8005e4c:	f7fa fb44 	bl	80004d8 <__aeabi_dmul>
 8005e50:	f04f 0803 	mov.w	r8, #3
 8005e54:	2600      	movs	r6, #0
 8005e56:	2700      	movs	r7, #0
 8005e58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005e60:	4632      	mov	r2, r6
 8005e62:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005e66:	463b      	mov	r3, r7
 8005e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8005e6c:	f7fa fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005e70:	b9b8      	cbnz	r0, 8005ea2 <__ieee754_rem_pio2+0x3d2>
 8005e72:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <__ieee754_rem_pio2+0x3dc>)
 8005e74:	462a      	mov	r2, r5
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	2302      	movs	r3, #2
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	a806      	add	r0, sp, #24
 8005e80:	4643      	mov	r3, r8
 8005e82:	f000 f8d3 	bl	800602c <__kernel_rem_pio2>
 8005e86:	f1bb 0f00 	cmp.w	fp, #0
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	f6bf ae56 	bge.w	8005b3c <__ieee754_rem_pio2+0x6c>
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e96:	6063      	str	r3, [r4, #4]
 8005e98:	68e3      	ldr	r3, [r4, #12]
 8005e9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e9e:	60e3      	str	r3, [r4, #12]
 8005ea0:	e708      	b.n	8005cb4 <__ieee754_rem_pio2+0x1e4>
 8005ea2:	46d0      	mov	r8, sl
 8005ea4:	e7dc      	b.n	8005e60 <__ieee754_rem_pio2+0x390>
 8005ea6:	bf00      	nop
 8005ea8:	41700000 	.word	0x41700000
 8005eac:	08008e98 	.word	0x08008e98

08005eb0 <__kernel_cos>:
 8005eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005eb8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	460f      	mov	r7, r1
 8005ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8005ec4:	da04      	bge.n	8005ed0 <__kernel_cos+0x20>
 8005ec6:	f7fa fda1 	bl	8000a0c <__aeabi_d2iz>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f000 8086 	beq.w	8005fdc <__kernel_cos+0x12c>
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	f7fa fafe 	bl	80004d8 <__aeabi_dmul>
 8005edc:	2200      	movs	r2, #0
 8005ede:	4b4e      	ldr	r3, [pc, #312]	; (8006018 <__kernel_cos+0x168>)
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	f7fa faf8 	bl	80004d8 <__aeabi_dmul>
 8005ee8:	a33f      	add	r3, pc, #252	; (adr r3, 8005fe8 <__kernel_cos+0x138>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	4682      	mov	sl, r0
 8005ef0:	468b      	mov	fp, r1
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7fa faef 	bl	80004d8 <__aeabi_dmul>
 8005efa:	a33d      	add	r3, pc, #244	; (adr r3, 8005ff0 <__kernel_cos+0x140>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f934 	bl	800016c <__adddf3>
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	f7fa fae6 	bl	80004d8 <__aeabi_dmul>
 8005f0c:	a33a      	add	r3, pc, #232	; (adr r3, 8005ff8 <__kernel_cos+0x148>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f929 	bl	8000168 <__aeabi_dsub>
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	f7fa fadd 	bl	80004d8 <__aeabi_dmul>
 8005f1e:	a338      	add	r3, pc, #224	; (adr r3, 8006000 <__kernel_cos+0x150>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f922 	bl	800016c <__adddf3>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	f7fa fad4 	bl	80004d8 <__aeabi_dmul>
 8005f30:	a335      	add	r3, pc, #212	; (adr r3, 8006008 <__kernel_cos+0x158>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f917 	bl	8000168 <__aeabi_dsub>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	f7fa facb 	bl	80004d8 <__aeabi_dmul>
 8005f42:	a333      	add	r3, pc, #204	; (adr r3, 8006010 <__kernel_cos+0x160>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f910 	bl	800016c <__adddf3>
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	462b      	mov	r3, r5
 8005f50:	f7fa fac2 	bl	80004d8 <__aeabi_dmul>
 8005f54:	4622      	mov	r2, r4
 8005f56:	462b      	mov	r3, r5
 8005f58:	f7fa fabe 	bl	80004d8 <__aeabi_dmul>
 8005f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	4640      	mov	r0, r8
 8005f66:	4639      	mov	r1, r7
 8005f68:	f7fa fab6 	bl	80004d8 <__aeabi_dmul>
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4602      	mov	r2, r0
 8005f70:	4629      	mov	r1, r5
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7fa f8f8 	bl	8000168 <__aeabi_dsub>
 8005f78:	4b28      	ldr	r3, [pc, #160]	; (800601c <__kernel_cos+0x16c>)
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	429e      	cmp	r6, r3
 8005f7e:	4689      	mov	r9, r1
 8005f80:	dc0e      	bgt.n	8005fa0 <__kernel_cos+0xf0>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4650      	mov	r0, sl
 8005f88:	4659      	mov	r1, fp
 8005f8a:	f7fa f8ed 	bl	8000168 <__aeabi_dsub>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	2000      	movs	r0, #0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4922      	ldr	r1, [pc, #136]	; (8006020 <__kernel_cos+0x170>)
 8005f96:	f7fa f8e7 	bl	8000168 <__aeabi_dsub>
 8005f9a:	b003      	add	sp, #12
 8005f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa0:	2400      	movs	r4, #0
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <__kernel_cos+0x174>)
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	429e      	cmp	r6, r3
 8005fa8:	bfcc      	ite	gt
 8005faa:	4d1f      	ldrgt	r5, [pc, #124]	; (8006028 <__kernel_cos+0x178>)
 8005fac:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	491a      	ldr	r1, [pc, #104]	; (8006020 <__kernel_cos+0x170>)
 8005fb6:	f7fa f8d7 	bl	8000168 <__aeabi_dsub>
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	460f      	mov	r7, r1
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	f7fa f8cf 	bl	8000168 <__aeabi_dsub>
 8005fca:	4642      	mov	r2, r8
 8005fcc:	464b      	mov	r3, r9
 8005fce:	f7fa f8cb 	bl	8000168 <__aeabi_dsub>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	4639      	mov	r1, r7
 8005fda:	e7dc      	b.n	8005f96 <__kernel_cos+0xe6>
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4910      	ldr	r1, [pc, #64]	; (8006020 <__kernel_cos+0x170>)
 8005fe0:	e7db      	b.n	8005f9a <__kernel_cos+0xea>
 8005fe2:	bf00      	nop
 8005fe4:	f3af 8000 	nop.w
 8005fe8:	be8838d4 	.word	0xbe8838d4
 8005fec:	bda8fae9 	.word	0xbda8fae9
 8005ff0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ff4:	3e21ee9e 	.word	0x3e21ee9e
 8005ff8:	809c52ad 	.word	0x809c52ad
 8005ffc:	3e927e4f 	.word	0x3e927e4f
 8006000:	19cb1590 	.word	0x19cb1590
 8006004:	3efa01a0 	.word	0x3efa01a0
 8006008:	16c15177 	.word	0x16c15177
 800600c:	3f56c16c 	.word	0x3f56c16c
 8006010:	5555554c 	.word	0x5555554c
 8006014:	3fa55555 	.word	0x3fa55555
 8006018:	3fe00000 	.word	0x3fe00000
 800601c:	3fd33332 	.word	0x3fd33332
 8006020:	3ff00000 	.word	0x3ff00000
 8006024:	3fe90000 	.word	0x3fe90000
 8006028:	3fd20000 	.word	0x3fd20000

0800602c <__kernel_rem_pio2>:
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006034:	9307      	str	r3, [sp, #28]
 8006036:	9104      	str	r1, [sp, #16]
 8006038:	4bbf      	ldr	r3, [pc, #764]	; (8006338 <__kernel_rem_pio2+0x30c>)
 800603a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800603c:	1ed4      	subs	r4, r2, #3
 800603e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006042:	2500      	movs	r5, #0
 8006044:	9302      	str	r3, [sp, #8]
 8006046:	9b07      	ldr	r3, [sp, #28]
 8006048:	9008      	str	r0, [sp, #32]
 800604a:	3b01      	subs	r3, #1
 800604c:	9306      	str	r3, [sp, #24]
 800604e:	2318      	movs	r3, #24
 8006050:	fb94 f4f3 	sdiv	r4, r4, r3
 8006054:	f06f 0317 	mvn.w	r3, #23
 8006058:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800605c:	fb04 3303 	mla	r3, r4, r3, r3
 8006060:	eb03 0a02 	add.w	sl, r3, r2
 8006064:	9a06      	ldr	r2, [sp, #24]
 8006066:	9b02      	ldr	r3, [sp, #8]
 8006068:	1aa7      	subs	r7, r4, r2
 800606a:	eb03 0802 	add.w	r8, r3, r2
 800606e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006070:	2200      	movs	r2, #0
 8006072:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006076:	2300      	movs	r3, #0
 8006078:	ae1e      	add	r6, sp, #120	; 0x78
 800607a:	4545      	cmp	r5, r8
 800607c:	dd14      	ble.n	80060a8 <__kernel_rem_pio2+0x7c>
 800607e:	2600      	movs	r6, #0
 8006080:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8006084:	9b02      	ldr	r3, [sp, #8]
 8006086:	429e      	cmp	r6, r3
 8006088:	dc39      	bgt.n	80060fe <__kernel_rem_pio2+0xd2>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	f04f 0800 	mov.w	r8, #0
 8006090:	3b08      	subs	r3, #8
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	f04f 0900 	mov.w	r9, #0
 800609a:	199d      	adds	r5, r3, r6
 800609c:	ab20      	add	r3, sp, #128	; 0x80
 800609e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	2700      	movs	r7, #0
 80060a6:	e023      	b.n	80060f0 <__kernel_rem_pio2+0xc4>
 80060a8:	42ef      	cmn	r7, r5
 80060aa:	d40b      	bmi.n	80060c4 <__kernel_rem_pio2+0x98>
 80060ac:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80060b0:	e9cd 2300 	strd	r2, r3, [sp]
 80060b4:	f7fa f9a6 	bl	8000404 <__aeabi_i2d>
 80060b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060bc:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80060c0:	3501      	adds	r5, #1
 80060c2:	e7da      	b.n	800607a <__kernel_rem_pio2+0x4e>
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	e7f8      	b.n	80060bc <__kernel_rem_pio2+0x90>
 80060ca:	9905      	ldr	r1, [sp, #20]
 80060cc:	9d00      	ldr	r5, [sp, #0]
 80060ce:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80060d2:	9105      	str	r1, [sp, #20]
 80060d4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80060d8:	9500      	str	r5, [sp, #0]
 80060da:	f7fa f9fd 	bl	80004d8 <__aeabi_dmul>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	f7fa f841 	bl	800016c <__adddf3>
 80060ea:	4680      	mov	r8, r0
 80060ec:	4689      	mov	r9, r1
 80060ee:	3701      	adds	r7, #1
 80060f0:	9b06      	ldr	r3, [sp, #24]
 80060f2:	429f      	cmp	r7, r3
 80060f4:	dde9      	ble.n	80060ca <__kernel_rem_pio2+0x9e>
 80060f6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7c2      	b.n	8006084 <__kernel_rem_pio2+0x58>
 80060fe:	9b02      	ldr	r3, [sp, #8]
 8006100:	aa0c      	add	r2, sp, #48	; 0x30
 8006102:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006106:	930b      	str	r3, [sp, #44]	; 0x2c
 8006108:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800610a:	9f02      	ldr	r7, [sp, #8]
 800610c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006110:	930a      	str	r3, [sp, #40]	; 0x28
 8006112:	2600      	movs	r6, #0
 8006114:	ab98      	add	r3, sp, #608	; 0x260
 8006116:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800611a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800611e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006122:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006126:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800612a:	ab98      	add	r3, sp, #608	; 0x260
 800612c:	445b      	add	r3, fp
 800612e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8006132:	1bbb      	subs	r3, r7, r6
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc71      	bgt.n	800621c <__kernel_rem_pio2+0x1f0>
 8006138:	4652      	mov	r2, sl
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f000 fbff 	bl	8006940 <scalbn>
 8006142:	2200      	movs	r2, #0
 8006144:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006148:	4604      	mov	r4, r0
 800614a:	460d      	mov	r5, r1
 800614c:	f7fa f9c4 	bl	80004d8 <__aeabi_dmul>
 8006150:	f000 fb72 	bl	8006838 <floor>
 8006154:	2200      	movs	r2, #0
 8006156:	4b79      	ldr	r3, [pc, #484]	; (800633c <__kernel_rem_pio2+0x310>)
 8006158:	f7fa f9be 	bl	80004d8 <__aeabi_dmul>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4620      	mov	r0, r4
 8006162:	4629      	mov	r1, r5
 8006164:	f7fa f800 	bl	8000168 <__aeabi_dsub>
 8006168:	460d      	mov	r5, r1
 800616a:	4604      	mov	r4, r0
 800616c:	f7fa fc4e 	bl	8000a0c <__aeabi_d2iz>
 8006170:	9005      	str	r0, [sp, #20]
 8006172:	f7fa f947 	bl	8000404 <__aeabi_i2d>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f7f9 fff3 	bl	8000168 <__aeabi_dsub>
 8006182:	f1ba 0f00 	cmp.w	sl, #0
 8006186:	4680      	mov	r8, r0
 8006188:	4689      	mov	r9, r1
 800618a:	dd6c      	ble.n	8006266 <__kernel_rem_pio2+0x23a>
 800618c:	1e7a      	subs	r2, r7, #1
 800618e:	ab0c      	add	r3, sp, #48	; 0x30
 8006190:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006194:	f1ca 0118 	rsb	r1, sl, #24
 8006198:	9c05      	ldr	r4, [sp, #20]
 800619a:	fa40 f301 	asr.w	r3, r0, r1
 800619e:	441c      	add	r4, r3
 80061a0:	408b      	lsls	r3, r1
 80061a2:	1ac0      	subs	r0, r0, r3
 80061a4:	ab0c      	add	r3, sp, #48	; 0x30
 80061a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80061aa:	f1ca 0317 	rsb	r3, sl, #23
 80061ae:	9405      	str	r4, [sp, #20]
 80061b0:	fa40 f303 	asr.w	r3, r0, r3
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dd62      	ble.n	8006282 <__kernel_rem_pio2+0x256>
 80061bc:	2200      	movs	r2, #0
 80061be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80061c2:	4614      	mov	r4, r2
 80061c4:	9b05      	ldr	r3, [sp, #20]
 80061c6:	3301      	adds	r3, #1
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	4297      	cmp	r7, r2
 80061cc:	f300 809f 	bgt.w	800630e <__kernel_rem_pio2+0x2e2>
 80061d0:	f1ba 0f00 	cmp.w	sl, #0
 80061d4:	dd07      	ble.n	80061e6 <__kernel_rem_pio2+0x1ba>
 80061d6:	f1ba 0f01 	cmp.w	sl, #1
 80061da:	f000 80bb 	beq.w	8006354 <__kernel_rem_pio2+0x328>
 80061de:	f1ba 0f02 	cmp.w	sl, #2
 80061e2:	f000 80c1 	beq.w	8006368 <__kernel_rem_pio2+0x33c>
 80061e6:	9b00      	ldr	r3, [sp, #0]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d14a      	bne.n	8006282 <__kernel_rem_pio2+0x256>
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	2000      	movs	r0, #0
 80061f2:	4953      	ldr	r1, [pc, #332]	; (8006340 <__kernel_rem_pio2+0x314>)
 80061f4:	f7f9 ffb8 	bl	8000168 <__aeabi_dsub>
 80061f8:	4680      	mov	r8, r0
 80061fa:	4689      	mov	r9, r1
 80061fc:	2c00      	cmp	r4, #0
 80061fe:	d040      	beq.n	8006282 <__kernel_rem_pio2+0x256>
 8006200:	4652      	mov	r2, sl
 8006202:	2000      	movs	r0, #0
 8006204:	494e      	ldr	r1, [pc, #312]	; (8006340 <__kernel_rem_pio2+0x314>)
 8006206:	f000 fb9b 	bl	8006940 <scalbn>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7f9 ffa9 	bl	8000168 <__aeabi_dsub>
 8006216:	4680      	mov	r8, r0
 8006218:	4689      	mov	r9, r1
 800621a:	e032      	b.n	8006282 <__kernel_rem_pio2+0x256>
 800621c:	2200      	movs	r2, #0
 800621e:	4b49      	ldr	r3, [pc, #292]	; (8006344 <__kernel_rem_pio2+0x318>)
 8006220:	4640      	mov	r0, r8
 8006222:	4649      	mov	r1, r9
 8006224:	f7fa f958 	bl	80004d8 <__aeabi_dmul>
 8006228:	f7fa fbf0 	bl	8000a0c <__aeabi_d2iz>
 800622c:	f7fa f8ea 	bl	8000404 <__aeabi_i2d>
 8006230:	2200      	movs	r2, #0
 8006232:	4b45      	ldr	r3, [pc, #276]	; (8006348 <__kernel_rem_pio2+0x31c>)
 8006234:	e9cd 0100 	strd	r0, r1, [sp]
 8006238:	f7fa f94e 	bl	80004d8 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	f7f9 ff90 	bl	8000168 <__aeabi_dsub>
 8006248:	f7fa fbe0 	bl	8000a0c <__aeabi_d2iz>
 800624c:	ab0c      	add	r3, sp, #48	; 0x30
 800624e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006252:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800625a:	f7f9 ff87 	bl	800016c <__adddf3>
 800625e:	3601      	adds	r6, #1
 8006260:	4680      	mov	r8, r0
 8006262:	4689      	mov	r9, r1
 8006264:	e765      	b.n	8006132 <__kernel_rem_pio2+0x106>
 8006266:	d105      	bne.n	8006274 <__kernel_rem_pio2+0x248>
 8006268:	1e7b      	subs	r3, r7, #1
 800626a:	aa0c      	add	r2, sp, #48	; 0x30
 800626c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006270:	15c3      	asrs	r3, r0, #23
 8006272:	e79f      	b.n	80061b4 <__kernel_rem_pio2+0x188>
 8006274:	2200      	movs	r2, #0
 8006276:	4b35      	ldr	r3, [pc, #212]	; (800634c <__kernel_rem_pio2+0x320>)
 8006278:	f7fa fbb4 	bl	80009e4 <__aeabi_dcmpge>
 800627c:	2800      	cmp	r0, #0
 800627e:	d143      	bne.n	8006308 <__kernel_rem_pio2+0x2dc>
 8006280:	9000      	str	r0, [sp, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	2300      	movs	r3, #0
 8006286:	4640      	mov	r0, r8
 8006288:	4649      	mov	r1, r9
 800628a:	f7fa fb8d 	bl	80009a8 <__aeabi_dcmpeq>
 800628e:	2800      	cmp	r0, #0
 8006290:	f000 80c3 	beq.w	800641a <__kernel_rem_pio2+0x3ee>
 8006294:	1e7c      	subs	r4, r7, #1
 8006296:	4623      	mov	r3, r4
 8006298:	2200      	movs	r2, #0
 800629a:	9902      	ldr	r1, [sp, #8]
 800629c:	428b      	cmp	r3, r1
 800629e:	da6a      	bge.n	8006376 <__kernel_rem_pio2+0x34a>
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	f000 8084 	beq.w	80063ae <__kernel_rem_pio2+0x382>
 80062a6:	ab0c      	add	r3, sp, #48	; 0x30
 80062a8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80062ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80b0 	beq.w	8006416 <__kernel_rem_pio2+0x3ea>
 80062b6:	4652      	mov	r2, sl
 80062b8:	2000      	movs	r0, #0
 80062ba:	4921      	ldr	r1, [pc, #132]	; (8006340 <__kernel_rem_pio2+0x314>)
 80062bc:	f000 fb40 	bl	8006940 <scalbn>
 80062c0:	4625      	mov	r5, r4
 80062c2:	4606      	mov	r6, r0
 80062c4:	460f      	mov	r7, r1
 80062c6:	f04f 0a00 	mov.w	sl, #0
 80062ca:	00e3      	lsls	r3, r4, #3
 80062cc:	aa98      	add	r2, sp, #608	; 0x260
 80062ce:	eb02 0803 	add.w	r8, r2, r3
 80062d2:	f8df b070 	ldr.w	fp, [pc, #112]	; 8006344 <__kernel_rem_pio2+0x318>
 80062d6:	9306      	str	r3, [sp, #24]
 80062d8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80062dc:	2d00      	cmp	r5, #0
 80062de:	f280 80d2 	bge.w	8006486 <__kernel_rem_pio2+0x45a>
 80062e2:	2500      	movs	r5, #0
 80062e4:	9a06      	ldr	r2, [sp, #24]
 80062e6:	ab98      	add	r3, sp, #608	; 0x260
 80062e8:	189e      	adds	r6, r3, r2
 80062ea:	3ea8      	subs	r6, #168	; 0xa8
 80062ec:	1b63      	subs	r3, r4, r5
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f2c0 80f9 	blt.w	80064e6 <__kernel_rem_pio2+0x4ba>
 80062f4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006350 <__kernel_rem_pio2+0x324>
 80062f8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80062fc:	f04f 0a00 	mov.w	sl, #0
 8006300:	f04f 0b00 	mov.w	fp, #0
 8006304:	2700      	movs	r7, #0
 8006306:	e0e2      	b.n	80064ce <__kernel_rem_pio2+0x4a2>
 8006308:	2302      	movs	r3, #2
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	e756      	b.n	80061bc <__kernel_rem_pio2+0x190>
 800630e:	ab0c      	add	r3, sp, #48	; 0x30
 8006310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006314:	b94c      	cbnz	r4, 800632a <__kernel_rem_pio2+0x2fe>
 8006316:	b12b      	cbz	r3, 8006324 <__kernel_rem_pio2+0x2f8>
 8006318:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800631c:	a80c      	add	r0, sp, #48	; 0x30
 800631e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006322:	2301      	movs	r3, #1
 8006324:	3201      	adds	r2, #1
 8006326:	461c      	mov	r4, r3
 8006328:	e74f      	b.n	80061ca <__kernel_rem_pio2+0x19e>
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	a80c      	add	r0, sp, #48	; 0x30
 800632e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006332:	4623      	mov	r3, r4
 8006334:	e7f6      	b.n	8006324 <__kernel_rem_pio2+0x2f8>
 8006336:	bf00      	nop
 8006338:	08008fe0 	.word	0x08008fe0
 800633c:	40200000 	.word	0x40200000
 8006340:	3ff00000 	.word	0x3ff00000
 8006344:	3e700000 	.word	0x3e700000
 8006348:	41700000 	.word	0x41700000
 800634c:	3fe00000 	.word	0x3fe00000
 8006350:	08008f98 	.word	0x08008f98
 8006354:	1e7a      	subs	r2, r7, #1
 8006356:	ab0c      	add	r3, sp, #48	; 0x30
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006360:	a90c      	add	r1, sp, #48	; 0x30
 8006362:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006366:	e73e      	b.n	80061e6 <__kernel_rem_pio2+0x1ba>
 8006368:	1e7a      	subs	r2, r7, #1
 800636a:	ab0c      	add	r3, sp, #48	; 0x30
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006374:	e7f4      	b.n	8006360 <__kernel_rem_pio2+0x334>
 8006376:	a90c      	add	r1, sp, #48	; 0x30
 8006378:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800637c:	3b01      	subs	r3, #1
 800637e:	430a      	orrs	r2, r1
 8006380:	e78b      	b.n	800629a <__kernel_rem_pio2+0x26e>
 8006382:	3401      	adds	r4, #1
 8006384:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006388:	2a00      	cmp	r2, #0
 800638a:	d0fa      	beq.n	8006382 <__kernel_rem_pio2+0x356>
 800638c:	ab98      	add	r3, sp, #608	; 0x260
 800638e:	449b      	add	fp, r3
 8006390:	9b07      	ldr	r3, [sp, #28]
 8006392:	1c7e      	adds	r6, r7, #1
 8006394:	19dd      	adds	r5, r3, r7
 8006396:	ab98      	add	r3, sp, #608	; 0x260
 8006398:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800639c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80063a0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80063a4:	443c      	add	r4, r7
 80063a6:	42b4      	cmp	r4, r6
 80063a8:	da04      	bge.n	80063b4 <__kernel_rem_pio2+0x388>
 80063aa:	4627      	mov	r7, r4
 80063ac:	e6b1      	b.n	8006112 <__kernel_rem_pio2+0xe6>
 80063ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b0:	2401      	movs	r4, #1
 80063b2:	e7e7      	b.n	8006384 <__kernel_rem_pio2+0x358>
 80063b4:	f105 0308 	add.w	r3, r5, #8
 80063b8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063bc:	2700      	movs	r7, #0
 80063be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063c2:	f7fa f81f 	bl	8000404 <__aeabi_i2d>
 80063c6:	f04f 0800 	mov.w	r8, #0
 80063ca:	f04f 0900 	mov.w	r9, #0
 80063ce:	9b08      	ldr	r3, [sp, #32]
 80063d0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80063d4:	3b08      	subs	r3, #8
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	f105 0310 	add.w	r3, r5, #16
 80063dc:	9305      	str	r3, [sp, #20]
 80063de:	9b06      	ldr	r3, [sp, #24]
 80063e0:	429f      	cmp	r7, r3
 80063e2:	dd04      	ble.n	80063ee <__kernel_rem_pio2+0x3c2>
 80063e4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80063e8:	3601      	adds	r6, #1
 80063ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063ec:	e7db      	b.n	80063a6 <__kernel_rem_pio2+0x37a>
 80063ee:	9905      	ldr	r1, [sp, #20]
 80063f0:	9d00      	ldr	r5, [sp, #0]
 80063f2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80063f6:	9105      	str	r1, [sp, #20]
 80063f8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80063fc:	9500      	str	r5, [sp, #0]
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4640      	mov	r0, r8
 8006408:	4649      	mov	r1, r9
 800640a:	f7f9 feaf 	bl	800016c <__adddf3>
 800640e:	3701      	adds	r7, #1
 8006410:	4680      	mov	r8, r0
 8006412:	4689      	mov	r9, r1
 8006414:	e7e3      	b.n	80063de <__kernel_rem_pio2+0x3b2>
 8006416:	3c01      	subs	r4, #1
 8006418:	e745      	b.n	80062a6 <__kernel_rem_pio2+0x27a>
 800641a:	f1ca 0200 	rsb	r2, sl, #0
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f000 fa8d 	bl	8006940 <scalbn>
 8006426:	2200      	movs	r2, #0
 8006428:	4ba3      	ldr	r3, [pc, #652]	; (80066b8 <__kernel_rem_pio2+0x68c>)
 800642a:	4604      	mov	r4, r0
 800642c:	460d      	mov	r5, r1
 800642e:	f7fa fad9 	bl	80009e4 <__aeabi_dcmpge>
 8006432:	b1f8      	cbz	r0, 8006474 <__kernel_rem_pio2+0x448>
 8006434:	2200      	movs	r2, #0
 8006436:	4ba1      	ldr	r3, [pc, #644]	; (80066bc <__kernel_rem_pio2+0x690>)
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7fa f84c 	bl	80004d8 <__aeabi_dmul>
 8006440:	f7fa fae4 	bl	8000a0c <__aeabi_d2iz>
 8006444:	4606      	mov	r6, r0
 8006446:	f7f9 ffdd 	bl	8000404 <__aeabi_i2d>
 800644a:	2200      	movs	r2, #0
 800644c:	4b9a      	ldr	r3, [pc, #616]	; (80066b8 <__kernel_rem_pio2+0x68c>)
 800644e:	f7fa f843 	bl	80004d8 <__aeabi_dmul>
 8006452:	460b      	mov	r3, r1
 8006454:	4602      	mov	r2, r0
 8006456:	4629      	mov	r1, r5
 8006458:	4620      	mov	r0, r4
 800645a:	f7f9 fe85 	bl	8000168 <__aeabi_dsub>
 800645e:	f7fa fad5 	bl	8000a0c <__aeabi_d2iz>
 8006462:	1c7c      	adds	r4, r7, #1
 8006464:	ab0c      	add	r3, sp, #48	; 0x30
 8006466:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800646a:	f10a 0a18 	add.w	sl, sl, #24
 800646e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8006472:	e720      	b.n	80062b6 <__kernel_rem_pio2+0x28a>
 8006474:	4620      	mov	r0, r4
 8006476:	4629      	mov	r1, r5
 8006478:	f7fa fac8 	bl	8000a0c <__aeabi_d2iz>
 800647c:	ab0c      	add	r3, sp, #48	; 0x30
 800647e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006482:	463c      	mov	r4, r7
 8006484:	e717      	b.n	80062b6 <__kernel_rem_pio2+0x28a>
 8006486:	ab0c      	add	r3, sp, #48	; 0x30
 8006488:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800648c:	f7f9 ffba 	bl	8000404 <__aeabi_i2d>
 8006490:	4632      	mov	r2, r6
 8006492:	463b      	mov	r3, r7
 8006494:	f7fa f820 	bl	80004d8 <__aeabi_dmul>
 8006498:	4652      	mov	r2, sl
 800649a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800649e:	465b      	mov	r3, fp
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7fa f818 	bl	80004d8 <__aeabi_dmul>
 80064a8:	3d01      	subs	r5, #1
 80064aa:	4606      	mov	r6, r0
 80064ac:	460f      	mov	r7, r1
 80064ae:	e715      	b.n	80062dc <__kernel_rem_pio2+0x2b0>
 80064b0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80064b4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80064b8:	f7fa f80e 	bl	80004d8 <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	f7f9 fe52 	bl	800016c <__adddf3>
 80064c8:	4682      	mov	sl, r0
 80064ca:	468b      	mov	fp, r1
 80064cc:	3701      	adds	r7, #1
 80064ce:	9b02      	ldr	r3, [sp, #8]
 80064d0:	429f      	cmp	r7, r3
 80064d2:	dc01      	bgt.n	80064d8 <__kernel_rem_pio2+0x4ac>
 80064d4:	42bd      	cmp	r5, r7
 80064d6:	daeb      	bge.n	80064b0 <__kernel_rem_pio2+0x484>
 80064d8:	ab48      	add	r3, sp, #288	; 0x120
 80064da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80064de:	e9c3 ab00 	strd	sl, fp, [r3]
 80064e2:	3501      	adds	r5, #1
 80064e4:	e702      	b.n	80062ec <__kernel_rem_pio2+0x2c0>
 80064e6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d86c      	bhi.n	80065c6 <__kernel_rem_pio2+0x59a>
 80064ec:	e8df f003 	tbb	[pc, r3]
 80064f0:	022f2f59 	.word	0x022f2f59
 80064f4:	9a06      	ldr	r2, [sp, #24]
 80064f6:	ab48      	add	r3, sp, #288	; 0x120
 80064f8:	189d      	adds	r5, r3, r2
 80064fa:	46aa      	mov	sl, r5
 80064fc:	46a3      	mov	fp, r4
 80064fe:	f1bb 0f00 	cmp.w	fp, #0
 8006502:	f300 8087 	bgt.w	8006614 <__kernel_rem_pio2+0x5e8>
 8006506:	46a2      	mov	sl, r4
 8006508:	f1ba 0f01 	cmp.w	sl, #1
 800650c:	f300 809f 	bgt.w	800664e <__kernel_rem_pio2+0x622>
 8006510:	2700      	movs	r7, #0
 8006512:	463e      	mov	r6, r7
 8006514:	9d06      	ldr	r5, [sp, #24]
 8006516:	ab48      	add	r3, sp, #288	; 0x120
 8006518:	3508      	adds	r5, #8
 800651a:	441d      	add	r5, r3
 800651c:	2c01      	cmp	r4, #1
 800651e:	f300 80b3 	bgt.w	8006688 <__kernel_rem_pio2+0x65c>
 8006522:	9b00      	ldr	r3, [sp, #0]
 8006524:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8006526:	9849      	ldr	r0, [sp, #292]	; 0x124
 8006528:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800652a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 80b5 	bne.w	800669c <__kernel_rem_pio2+0x670>
 8006532:	4603      	mov	r3, r0
 8006534:	462a      	mov	r2, r5
 8006536:	9804      	ldr	r0, [sp, #16]
 8006538:	e9c0 2300 	strd	r2, r3, [r0]
 800653c:	4622      	mov	r2, r4
 800653e:	460b      	mov	r3, r1
 8006540:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006544:	463a      	mov	r2, r7
 8006546:	4633      	mov	r3, r6
 8006548:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800654c:	e03b      	b.n	80065c6 <__kernel_rem_pio2+0x59a>
 800654e:	f04f 0c00 	mov.w	ip, #0
 8006552:	4626      	mov	r6, r4
 8006554:	4667      	mov	r7, ip
 8006556:	9d06      	ldr	r5, [sp, #24]
 8006558:	ab48      	add	r3, sp, #288	; 0x120
 800655a:	3508      	adds	r5, #8
 800655c:	441d      	add	r5, r3
 800655e:	2e00      	cmp	r6, #0
 8006560:	da42      	bge.n	80065e8 <__kernel_rem_pio2+0x5bc>
 8006562:	9b00      	ldr	r3, [sp, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d049      	beq.n	80065fc <__kernel_rem_pio2+0x5d0>
 8006568:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800656c:	4662      	mov	r2, ip
 800656e:	460b      	mov	r3, r1
 8006570:	9904      	ldr	r1, [sp, #16]
 8006572:	2601      	movs	r6, #1
 8006574:	e9c1 2300 	strd	r2, r3, [r1]
 8006578:	a948      	add	r1, sp, #288	; 0x120
 800657a:	463b      	mov	r3, r7
 800657c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006580:	f7f9 fdf2 	bl	8000168 <__aeabi_dsub>
 8006584:	4684      	mov	ip, r0
 8006586:	460f      	mov	r7, r1
 8006588:	ad48      	add	r5, sp, #288	; 0x120
 800658a:	42b4      	cmp	r4, r6
 800658c:	da38      	bge.n	8006600 <__kernel_rem_pio2+0x5d4>
 800658e:	9b00      	ldr	r3, [sp, #0]
 8006590:	b10b      	cbz	r3, 8006596 <__kernel_rem_pio2+0x56a>
 8006592:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006596:	4662      	mov	r2, ip
 8006598:	463b      	mov	r3, r7
 800659a:	9904      	ldr	r1, [sp, #16]
 800659c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80065a0:	e011      	b.n	80065c6 <__kernel_rem_pio2+0x59a>
 80065a2:	2700      	movs	r7, #0
 80065a4:	463d      	mov	r5, r7
 80065a6:	9b06      	ldr	r3, [sp, #24]
 80065a8:	aa98      	add	r2, sp, #608	; 0x260
 80065aa:	4413      	add	r3, r2
 80065ac:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80065b0:	2c00      	cmp	r4, #0
 80065b2:	da0f      	bge.n	80065d4 <__kernel_rem_pio2+0x5a8>
 80065b4:	9b00      	ldr	r3, [sp, #0]
 80065b6:	b10b      	cbz	r3, 80065bc <__kernel_rem_pio2+0x590>
 80065b8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80065bc:	463a      	mov	r2, r7
 80065be:	462b      	mov	r3, r5
 80065c0:	9904      	ldr	r1, [sp, #16]
 80065c2:	e9c1 2300 	strd	r2, r3, [r1]
 80065c6:	9b05      	ldr	r3, [sp, #20]
 80065c8:	f003 0007 	and.w	r0, r3, #7
 80065cc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80065d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d4:	4638      	mov	r0, r7
 80065d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80065da:	4629      	mov	r1, r5
 80065dc:	f7f9 fdc6 	bl	800016c <__adddf3>
 80065e0:	3c01      	subs	r4, #1
 80065e2:	4607      	mov	r7, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	e7e3      	b.n	80065b0 <__kernel_rem_pio2+0x584>
 80065e8:	4660      	mov	r0, ip
 80065ea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80065ee:	4639      	mov	r1, r7
 80065f0:	f7f9 fdbc 	bl	800016c <__adddf3>
 80065f4:	3e01      	subs	r6, #1
 80065f6:	4684      	mov	ip, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	e7b0      	b.n	800655e <__kernel_rem_pio2+0x532>
 80065fc:	4639      	mov	r1, r7
 80065fe:	e7b5      	b.n	800656c <__kernel_rem_pio2+0x540>
 8006600:	4660      	mov	r0, ip
 8006602:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 fdb0 	bl	800016c <__adddf3>
 800660c:	3601      	adds	r6, #1
 800660e:	4684      	mov	ip, r0
 8006610:	460f      	mov	r7, r1
 8006612:	e7ba      	b.n	800658a <__kernel_rem_pio2+0x55e>
 8006614:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8006618:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006624:	f7f9 fda2 	bl	800016c <__adddf3>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7f9 fd98 	bl	8000168 <__aeabi_dsub>
 8006638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800663c:	f7f9 fd96 	bl	800016c <__adddf3>
 8006640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006644:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006648:	e9ca 6700 	strd	r6, r7, [sl]
 800664c:	e757      	b.n	80064fe <__kernel_rem_pio2+0x4d2>
 800664e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8006652:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800665e:	f7f9 fd85 	bl	800016c <__adddf3>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4680      	mov	r8, r0
 8006668:	4689      	mov	r9, r1
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7f9 fd7b 	bl	8000168 <__aeabi_dsub>
 8006672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006676:	f7f9 fd79 	bl	800016c <__adddf3>
 800667a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800667e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006682:	e9c5 8900 	strd	r8, r9, [r5]
 8006686:	e73f      	b.n	8006508 <__kernel_rem_pio2+0x4dc>
 8006688:	4638      	mov	r0, r7
 800668a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800668e:	4631      	mov	r1, r6
 8006690:	f7f9 fd6c 	bl	800016c <__adddf3>
 8006694:	3c01      	subs	r4, #1
 8006696:	4607      	mov	r7, r0
 8006698:	460e      	mov	r6, r1
 800669a:	e73f      	b.n	800651c <__kernel_rem_pio2+0x4f0>
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80066a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80066a6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80066aa:	601d      	str	r5, [r3, #0]
 80066ac:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80066b0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80066b4:	615e      	str	r6, [r3, #20]
 80066b6:	e786      	b.n	80065c6 <__kernel_rem_pio2+0x59a>
 80066b8:	41700000 	.word	0x41700000
 80066bc:	3e700000 	.word	0x3e700000

080066c0 <__kernel_sin>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	e9cd 2300 	strd	r2, r3, [sp]
 80066ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80066d2:	4682      	mov	sl, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80066d8:	da03      	bge.n	80066e2 <__kernel_sin+0x22>
 80066da:	f7fa f997 	bl	8000a0c <__aeabi_d2iz>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d050      	beq.n	8006784 <__kernel_sin+0xc4>
 80066e2:	4652      	mov	r2, sl
 80066e4:	4623      	mov	r3, r4
 80066e6:	4650      	mov	r0, sl
 80066e8:	4621      	mov	r1, r4
 80066ea:	f7f9 fef5 	bl	80004d8 <__aeabi_dmul>
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4650      	mov	r0, sl
 80066f8:	4621      	mov	r1, r4
 80066fa:	f7f9 feed 	bl	80004d8 <__aeabi_dmul>
 80066fe:	a33e      	add	r3, pc, #248	; (adr r3, 80067f8 <__kernel_sin+0x138>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	4680      	mov	r8, r0
 8006706:	4689      	mov	r9, r1
 8006708:	4630      	mov	r0, r6
 800670a:	4639      	mov	r1, r7
 800670c:	f7f9 fee4 	bl	80004d8 <__aeabi_dmul>
 8006710:	a33b      	add	r3, pc, #236	; (adr r3, 8006800 <__kernel_sin+0x140>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 fd27 	bl	8000168 <__aeabi_dsub>
 800671a:	4632      	mov	r2, r6
 800671c:	463b      	mov	r3, r7
 800671e:	f7f9 fedb 	bl	80004d8 <__aeabi_dmul>
 8006722:	a339      	add	r3, pc, #228	; (adr r3, 8006808 <__kernel_sin+0x148>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fd20 	bl	800016c <__adddf3>
 800672c:	4632      	mov	r2, r6
 800672e:	463b      	mov	r3, r7
 8006730:	f7f9 fed2 	bl	80004d8 <__aeabi_dmul>
 8006734:	a336      	add	r3, pc, #216	; (adr r3, 8006810 <__kernel_sin+0x150>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fd15 	bl	8000168 <__aeabi_dsub>
 800673e:	4632      	mov	r2, r6
 8006740:	463b      	mov	r3, r7
 8006742:	f7f9 fec9 	bl	80004d8 <__aeabi_dmul>
 8006746:	a334      	add	r3, pc, #208	; (adr r3, 8006818 <__kernel_sin+0x158>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd0e 	bl	800016c <__adddf3>
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	b9dd      	cbnz	r5, 800678e <__kernel_sin+0xce>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 febb 	bl	80004d8 <__aeabi_dmul>
 8006762:	a32f      	add	r3, pc, #188	; (adr r3, 8006820 <__kernel_sin+0x160>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 fcfe 	bl	8000168 <__aeabi_dsub>
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	f7f9 feb2 	bl	80004d8 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4650      	mov	r0, sl
 800677a:	4621      	mov	r1, r4
 800677c:	f7f9 fcf6 	bl	800016c <__adddf3>
 8006780:	4682      	mov	sl, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4650      	mov	r0, sl
 8006786:	4621      	mov	r1, r4
 8006788:	b006      	add	sp, #24
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	2200      	movs	r2, #0
 8006790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006794:	4b24      	ldr	r3, [pc, #144]	; (8006828 <__kernel_sin+0x168>)
 8006796:	f7f9 fe9f 	bl	80004d8 <__aeabi_dmul>
 800679a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800679e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a2:	4640      	mov	r0, r8
 80067a4:	4649      	mov	r1, r9
 80067a6:	f7f9 fe97 	bl	80004d8 <__aeabi_dmul>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b2:	f7f9 fcd9 	bl	8000168 <__aeabi_dsub>
 80067b6:	4632      	mov	r2, r6
 80067b8:	463b      	mov	r3, r7
 80067ba:	f7f9 fe8d 	bl	80004d8 <__aeabi_dmul>
 80067be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067c2:	f7f9 fcd1 	bl	8000168 <__aeabi_dsub>
 80067c6:	a316      	add	r3, pc, #88	; (adr r3, 8006820 <__kernel_sin+0x160>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7f9 fcc4 	bl	800016c <__adddf3>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4650      	mov	r0, sl
 80067ea:	4621      	mov	r1, r4
 80067ec:	f7f9 fcbc 	bl	8000168 <__aeabi_dsub>
 80067f0:	e7c6      	b.n	8006780 <__kernel_sin+0xc0>
 80067f2:	bf00      	nop
 80067f4:	f3af 8000 	nop.w
 80067f8:	5acfd57c 	.word	0x5acfd57c
 80067fc:	3de5d93a 	.word	0x3de5d93a
 8006800:	8a2b9ceb 	.word	0x8a2b9ceb
 8006804:	3e5ae5e6 	.word	0x3e5ae5e6
 8006808:	57b1fe7d 	.word	0x57b1fe7d
 800680c:	3ec71de3 	.word	0x3ec71de3
 8006810:	19c161d5 	.word	0x19c161d5
 8006814:	3f2a01a0 	.word	0x3f2a01a0
 8006818:	1110f8a6 	.word	0x1110f8a6
 800681c:	3f811111 	.word	0x3f811111
 8006820:	55555549 	.word	0x55555549
 8006824:	3fc55555 	.word	0x3fc55555
 8006828:	3fe00000 	.word	0x3fe00000

0800682c <fabs>:
 800682c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006830:	4619      	mov	r1, r3
 8006832:	4770      	bx	lr
 8006834:	0000      	movs	r0, r0
	...

08006838 <floor>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006840:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006844:	2e13      	cmp	r6, #19
 8006846:	4607      	mov	r7, r0
 8006848:	460b      	mov	r3, r1
 800684a:	460c      	mov	r4, r1
 800684c:	4605      	mov	r5, r0
 800684e:	dc35      	bgt.n	80068bc <floor+0x84>
 8006850:	2e00      	cmp	r6, #0
 8006852:	da16      	bge.n	8006882 <floor+0x4a>
 8006854:	a336      	add	r3, pc, #216	; (adr r3, 8006930 <floor+0xf8>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fc87 	bl	800016c <__adddf3>
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	f7fa f8c9 	bl	80009f8 <__aeabi_dcmpgt>
 8006866:	b148      	cbz	r0, 800687c <floor+0x44>
 8006868:	2c00      	cmp	r4, #0
 800686a:	da5b      	bge.n	8006924 <floor+0xec>
 800686c:	2500      	movs	r5, #0
 800686e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006872:	4a31      	ldr	r2, [pc, #196]	; (8006938 <floor+0x100>)
 8006874:	433b      	orrs	r3, r7
 8006876:	42ab      	cmp	r3, r5
 8006878:	bf18      	it	ne
 800687a:	4614      	movne	r4, r2
 800687c:	4623      	mov	r3, r4
 800687e:	462f      	mov	r7, r5
 8006880:	e026      	b.n	80068d0 <floor+0x98>
 8006882:	4a2e      	ldr	r2, [pc, #184]	; (800693c <floor+0x104>)
 8006884:	fa42 f806 	asr.w	r8, r2, r6
 8006888:	ea01 0208 	and.w	r2, r1, r8
 800688c:	4302      	orrs	r2, r0
 800688e:	d01f      	beq.n	80068d0 <floor+0x98>
 8006890:	a327      	add	r3, pc, #156	; (adr r3, 8006930 <floor+0xf8>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fc69 	bl	800016c <__adddf3>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	f7fa f8ab 	bl	80009f8 <__aeabi_dcmpgt>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0ea      	beq.n	800687c <floor+0x44>
 80068a6:	2c00      	cmp	r4, #0
 80068a8:	bfbe      	ittt	lt
 80068aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80068ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80068b2:	19a4      	addlt	r4, r4, r6
 80068b4:	ea24 0408 	bic.w	r4, r4, r8
 80068b8:	2500      	movs	r5, #0
 80068ba:	e7df      	b.n	800687c <floor+0x44>
 80068bc:	2e33      	cmp	r6, #51	; 0x33
 80068be:	dd0b      	ble.n	80068d8 <floor+0xa0>
 80068c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80068c4:	d104      	bne.n	80068d0 <floor+0x98>
 80068c6:	4602      	mov	r2, r0
 80068c8:	f7f9 fc50 	bl	800016c <__adddf3>
 80068cc:	4607      	mov	r7, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4638      	mov	r0, r7
 80068d2:	4619      	mov	r1, r3
 80068d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295
 80068dc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80068e0:	fa22 f808 	lsr.w	r8, r2, r8
 80068e4:	ea18 0f00 	tst.w	r8, r0
 80068e8:	d0f2      	beq.n	80068d0 <floor+0x98>
 80068ea:	a311      	add	r3, pc, #68	; (adr r3, 8006930 <floor+0xf8>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fc3c 	bl	800016c <__adddf3>
 80068f4:	2200      	movs	r2, #0
 80068f6:	2300      	movs	r3, #0
 80068f8:	f7fa f87e 	bl	80009f8 <__aeabi_dcmpgt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0bd      	beq.n	800687c <floor+0x44>
 8006900:	2c00      	cmp	r4, #0
 8006902:	da02      	bge.n	800690a <floor+0xd2>
 8006904:	2e14      	cmp	r6, #20
 8006906:	d103      	bne.n	8006910 <floor+0xd8>
 8006908:	3401      	adds	r4, #1
 800690a:	ea25 0508 	bic.w	r5, r5, r8
 800690e:	e7b5      	b.n	800687c <floor+0x44>
 8006910:	2301      	movs	r3, #1
 8006912:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006916:	fa03 f606 	lsl.w	r6, r3, r6
 800691a:	4435      	add	r5, r6
 800691c:	42bd      	cmp	r5, r7
 800691e:	bf38      	it	cc
 8006920:	18e4      	addcc	r4, r4, r3
 8006922:	e7f2      	b.n	800690a <floor+0xd2>
 8006924:	2500      	movs	r5, #0
 8006926:	462c      	mov	r4, r5
 8006928:	e7a8      	b.n	800687c <floor+0x44>
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
 8006930:	8800759c 	.word	0x8800759c
 8006934:	7e37e43c 	.word	0x7e37e43c
 8006938:	bff00000 	.word	0xbff00000
 800693c:	000fffff 	.word	0x000fffff

08006940 <scalbn>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	4616      	mov	r6, r2
 8006944:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	460b      	mov	r3, r1
 800694e:	b982      	cbnz	r2, 8006972 <scalbn+0x32>
 8006950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006954:	4303      	orrs	r3, r0
 8006956:	d034      	beq.n	80069c2 <scalbn+0x82>
 8006958:	4b2d      	ldr	r3, [pc, #180]	; (8006a10 <scalbn+0xd0>)
 800695a:	2200      	movs	r2, #0
 800695c:	f7f9 fdbc 	bl	80004d8 <__aeabi_dmul>
 8006960:	4b2c      	ldr	r3, [pc, #176]	; (8006a14 <scalbn+0xd4>)
 8006962:	4604      	mov	r4, r0
 8006964:	429e      	cmp	r6, r3
 8006966:	460d      	mov	r5, r1
 8006968:	da0d      	bge.n	8006986 <scalbn+0x46>
 800696a:	a325      	add	r3, pc, #148	; (adr r3, 8006a00 <scalbn+0xc0>)
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	e01c      	b.n	80069ac <scalbn+0x6c>
 8006972:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006976:	42ba      	cmp	r2, r7
 8006978:	d109      	bne.n	800698e <scalbn+0x4e>
 800697a:	4602      	mov	r2, r0
 800697c:	f7f9 fbf6 	bl	800016c <__adddf3>
 8006980:	4604      	mov	r4, r0
 8006982:	460d      	mov	r5, r1
 8006984:	e01d      	b.n	80069c2 <scalbn+0x82>
 8006986:	460b      	mov	r3, r1
 8006988:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800698c:	3a36      	subs	r2, #54	; 0x36
 800698e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006992:	4432      	add	r2, r6
 8006994:	428a      	cmp	r2, r1
 8006996:	dd0c      	ble.n	80069b2 <scalbn+0x72>
 8006998:	4622      	mov	r2, r4
 800699a:	462b      	mov	r3, r5
 800699c:	a11a      	add	r1, pc, #104	; (adr r1, 8006a08 <scalbn+0xc8>)
 800699e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a2:	f000 f83b 	bl	8006a1c <copysign>
 80069a6:	a318      	add	r3, pc, #96	; (adr r3, 8006a08 <scalbn+0xc8>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fd94 	bl	80004d8 <__aeabi_dmul>
 80069b0:	e7e6      	b.n	8006980 <scalbn+0x40>
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	dd08      	ble.n	80069c8 <scalbn+0x88>
 80069b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80069cc:	da0b      	bge.n	80069e6 <scalbn+0xa6>
 80069ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80069d2:	429e      	cmp	r6, r3
 80069d4:	4622      	mov	r2, r4
 80069d6:	462b      	mov	r3, r5
 80069d8:	dce0      	bgt.n	800699c <scalbn+0x5c>
 80069da:	a109      	add	r1, pc, #36	; (adr r1, 8006a00 <scalbn+0xc0>)
 80069dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e0:	f000 f81c 	bl	8006a1c <copysign>
 80069e4:	e7c1      	b.n	800696a <scalbn+0x2a>
 80069e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069ea:	3236      	adds	r2, #54	; 0x36
 80069ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	2200      	movs	r2, #0
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <scalbn+0xd8>)
 80069fc:	e7d6      	b.n	80069ac <scalbn+0x6c>
 80069fe:	bf00      	nop
 8006a00:	c2f8f359 	.word	0xc2f8f359
 8006a04:	01a56e1f 	.word	0x01a56e1f
 8006a08:	8800759c 	.word	0x8800759c
 8006a0c:	7e37e43c 	.word	0x7e37e43c
 8006a10:	43500000 	.word	0x43500000
 8006a14:	ffff3cb0 	.word	0xffff3cb0
 8006a18:	3c900000 	.word	0x3c900000

08006a1c <copysign>:
 8006a1c:	b530      	push	{r4, r5, lr}
 8006a1e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a26:	ea42 0503 	orr.w	r5, r2, r3
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	bd30      	pop	{r4, r5, pc}
	...

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
