
ManthanJal64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001920  08006998  08006998  00016998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b8  080082b8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080082b8  080082b8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082b8  080082b8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080082c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000004c  0800830c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800830c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc89  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d41  00000000  00000000  0002ccfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001801c  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008df5  00000000  00000000  00048254  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084060  00000000  00000000  00051049  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d50a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000d5124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000004c 	.word	0x2000004c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006980 	.word	0x08006980

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000050 	.word	0x20000050
 800014c:	08006980 	.word	0x08006980

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2iz>:
 8000fb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc0:	d30f      	bcc.n	8000fe2 <__aeabi_f2iz+0x2a>
 8000fc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d90d      	bls.n	8000fe8 <__aeabi_f2iz+0x30>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fdc:	bf18      	it	ne
 8000fde:	4240      	negne	r0, r0
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2iz+0x3a>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d105      	bne.n	8000ffe <__aeabi_f2iz+0x46>
 8000ff2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ff6:	bf08      	it	eq
 8000ff8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr

08001004 <Get_Width>:



//get lcd width
int16_t Get_Width(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	return lcddev.width;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <Get_Width+0x14>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	b21b      	sxth	r3, r3
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000cc 	.word	0x200000cc

0800101c <Get_Height>:

//get lcd height
int16_t Get_Height(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	return lcddev.height;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <Get_Height+0x14>)
 8001022:	885b      	ldrh	r3, [r3, #2]
 8001024:	b21b      	sxth	r3, r3
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200000cc 	.word	0x200000cc

08001034 <Draw_Pixe>:


//set x,y  coordinate and color to draw a pixel point
void Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	460b      	mov	r3, r1
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	807b      	strh	r3, [r7, #2]
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db1e      	blt.n	800108c <Draw_Pixe+0x58>
 800104e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <Draw_Pixe+0x58>
 8001056:	f7ff ffd5 	bl	8001004 <Get_Width>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	4293      	cmp	r3, r2
 8001064:	dc12      	bgt.n	800108c <Draw_Pixe+0x58>
 8001066:	f7ff ffd9 	bl	800101c <Get_Height>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001072:	4293      	cmp	r3, r2
 8001074:	dc0a      	bgt.n	800108c <Draw_Pixe+0x58>
	{
		return;
	}
	LCD_SetWindows(x, y, x, y);
 8001076:	88f8      	ldrh	r0, [r7, #6]
 8001078:	88b9      	ldrh	r1, [r7, #4]
 800107a:	88fa      	ldrh	r2, [r7, #6]
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	f002 f805 	bl	800308c <LCD_SetWindows>
	Lcd_WriteData_16Bit(color);
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	4618      	mov	r0, r3
 8001086:	f001 febb 	bl	8002e00 <Lcd_WriteData_16Bit>
 800108a:	e000      	b.n	800108e <Draw_Pixe+0x5a>
		return;
 800108c:	bf00      	nop
}
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Fill_Rect>:

//fill area from x to x+w,y to y+h
void Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4623      	mov	r3, r4
 80010a4:	80fb      	strh	r3, [r7, #6]
 80010a6:	4603      	mov	r3, r0
 80010a8:	80bb      	strh	r3, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]
 80010ae:	4613      	mov	r3, r2
 80010b0:	803b      	strh	r3, [r7, #0]
	int16_t end;
	if (w < 0)
 80010b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da08      	bge.n	80010cc <Fill_Rect+0x38>
	{
        w = -w;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	425b      	negs	r3, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	807b      	strh	r3, [r7, #2]
        x -= w;
 80010c2:	88fa      	ldrh	r2, [r7, #6]
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da01      	bge.n	80010e2 <Fill_Rect+0x4e>
    {
        x = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	80fb      	strh	r3, [r7, #6]
    }
    if (end > Get_Width())
 80010e2:	f7ff ff8f 	bl	8001004 <Get_Width>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd03      	ble.n	80010fa <Fill_Rect+0x66>
    {
        end = Get_Width();
 80010f2:	f7ff ff87 	bl	8001004 <Get_Width>
 80010f6:	4603      	mov	r3, r0
 80010f8:	81fb      	strh	r3, [r7, #14]
    }
    w = end - x;
 80010fa:	89fa      	ldrh	r2, [r7, #14]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	807b      	strh	r3, [r7, #2]
    if (h < 0)
 8001104:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da08      	bge.n	800111e <Fill_Rect+0x8a>
	{
        h = -h;
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	425b      	negs	r3, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	803b      	strh	r3, [r7, #0]
        y -= h;
 8001114:	88ba      	ldrh	r2, [r7, #4]
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	883b      	ldrh	r3, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8001128:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da01      	bge.n	8001134 <Fill_Rect+0xa0>
    {
        y = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	80bb      	strh	r3, [r7, #4]
    }
    if (end > Get_Height())
 8001134:	f7ff ff72 	bl	800101c <Get_Height>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001140:	4293      	cmp	r3, r2
 8001142:	dd03      	ble.n	800114c <Fill_Rect+0xb8>
    {
        end = Get_Height();
 8001144:	f7ff ff6a 	bl	800101c <Get_Height>
 8001148:	4603      	mov	r3, r0
 800114a:	81fb      	strh	r3, [r7, #14]
    }
    h = end - y;
 800114c:	89fa      	ldrh	r2, [r7, #14]
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	803b      	strh	r3, [r7, #0]
    LCD_SetWindows(x, y, x + w - 1, y + h - 1);//set area
 8001156:	88f8      	ldrh	r0, [r7, #6]
 8001158:	88b9      	ldrh	r1, [r7, #4]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	b29c      	uxth	r4, r3
 8001166:	88ba      	ldrh	r2, [r7, #4]
 8001168:	883b      	ldrh	r3, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	4622      	mov	r2, r4
 8001174:	f001 ff8a 	bl	800308c <LCD_SetWindows>
	if (h > w)
 8001178:	f9b7 2000 	ldrsh.w	r2, [r7]
 800117c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001180:	429a      	cmp	r2, r3
 8001182:	dd14      	ble.n	80011ae <Fill_Rect+0x11a>
	{
        end = h;
 8001184:	883b      	ldrh	r3, [r7, #0]
 8001186:	81fb      	strh	r3, [r7, #14]
        h = w;
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	803b      	strh	r3, [r7, #0]
        w = end;
 800118c:	89fb      	ldrh	r3, [r7, #14]
 800118e:	807b      	strh	r3, [r7, #2]
    }
	while (h-- > 0)
 8001190:	e00d      	b.n	80011ae <Fill_Rect+0x11a>
	{
		end = w;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	81fb      	strh	r3, [r7, #14]
		do
		{
			Lcd_WriteData_16Bit(color);//set color data
 8001196:	8c3b      	ldrh	r3, [r7, #32]
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fe31 	bl	8002e00 <Lcd_WriteData_16Bit>
        } while (--end != 0);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f3      	bne.n	8001196 <Fill_Rect+0x102>
	while (h-- > 0)
 80011ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	3a01      	subs	r2, #1
 80011b6:	b292      	uxth	r2, r2
 80011b8:	803a      	strh	r2, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dce9      	bgt.n	8001192 <Fill_Rect+0xfe>
	}
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}

080011c6 <pgm_read_glyph_ptr>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
  return gfxFont->glyph + c;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <pgm_read_bitmap_ptr>:

uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return gfxFont->bitmap;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <gfx_setCursor>:
  @brief  Set text cursor location
  @param  x    X coordinate in pixels
  @param  y    Y coordinate in pixels
*/
/**********************************************************************/
void gfx_setCursor(int16_t x, int16_t y) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
  cursor_x = x;
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <gfx_setCursor+0x28>)
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	8013      	strh	r3, [r2, #0]
  cursor_y = y;
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <gfx_setCursor+0x2c>)
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	8013      	strh	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200000bc 	.word	0x200000bc
 8001228:	20000084 	.word	0x20000084

0800122c <gfx_setTextColor>:
   @param   c   16-bit 5-6-5 Color to draw text with
   @note    For 'transparent' background, background and foreground
            are set to same color rather than using a separate flag.
 */
 /**********************************************************************/
 void gfx_setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <gfx_setTextColor+0x24>)
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	8013      	strh	r3, [r2, #0]
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <gfx_setTextColor+0x24>)
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <gfx_setTextColor+0x28>)
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200000c4 	.word	0x200000c4
 8001254:	200000c8 	.word	0x200000c8

08001258 <gfx_init>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
void gfx_init(int16_t w, int16_t h) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	80bb      	strh	r3, [r7, #4]
  _width = w;
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <gfx_init+0x6c>)
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	8013      	strh	r3, [r2, #0]
  _height = h;
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <gfx_init+0x70>)
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	8013      	strh	r3, [r2, #0]
  rotation = 0;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <gfx_init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
  cursor_y = cursor_x = 0;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <gfx_init+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <gfx_init+0x78>)
 8001282:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <gfx_init+0x7c>)
 8001288:	801a      	strh	r2, [r3, #0]
  textsize_x = textsize_y = 1;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <gfx_init+0x80>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <gfx_init+0x80>)
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <gfx_init+0x84>)
 8001296:	701a      	strb	r2, [r3, #0]
  textcolor = textbgcolor = 0xFFFF;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <gfx_init+0x88>)
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	801a      	strh	r2, [r3, #0]
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <gfx_init+0x88>)
 80012a2:	881a      	ldrh	r2, [r3, #0]
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <gfx_init+0x8c>)
 80012a6:	801a      	strh	r2, [r3, #0]
  wrap = true;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <gfx_init+0x90>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
  _cp437 = false;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <gfx_init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
  gfxFont = 0;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <gfx_init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	200000b8 	.word	0x200000b8
 80012c8:	200000c0 	.word	0x200000c0
 80012cc:	200000a2 	.word	0x200000a2
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	20000084 	.word	0x20000084
 80012d8:	200000c7 	.word	0x200000c7
 80012dc:	20000090 	.word	0x20000090
 80012e0:	200000c4 	.word	0x200000c4
 80012e4:	200000c8 	.word	0x200000c8
 80012e8:	200000be 	.word	0x200000be
 80012ec:	200000a6 	.word	0x200000a6
 80012f0:	2000008c 	.word	0x2000008c

080012f4 <gfx_writeLine>:
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	4603      	mov	r3, r0
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]
 800130e:	4613      	mov	r3, r2
 8001310:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001312:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001316:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001320:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001324:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	1acb      	subs	r3, r1, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	bfb8      	it	lt
 8001332:	425b      	neglt	r3, r3
 8001334:	429a      	cmp	r2, r3
 8001336:	bfcc      	ite	gt
 8001338:	2301      	movgt	r3, #1
 800133a:	2300      	movle	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001340:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <gfx_writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	833b      	strh	r3, [r7, #24]
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	80fb      	strh	r3, [r7, #6]
 8001350:	8b3b      	ldrh	r3, [r7, #24]
 8001352:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	82fb      	strh	r3, [r7, #22]
 8001358:	883b      	ldrh	r3, [r7, #0]
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001360:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001368:	429a      	cmp	r2, r3
 800136a:	dd0b      	ble.n	8001384 <gfx_writeLine+0x90>
    _swap_int16_t(x0, x1);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	82bb      	strh	r3, [r7, #20]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	8abb      	ldrh	r3, [r7, #20]
 8001376:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	827b      	strh	r3, [r7, #18]
 800137c:	883b      	ldrh	r3, [r7, #0]
 800137e:	80bb      	strh	r3, [r7, #4]
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800138e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bfb8      	it	lt
 800139c:	425b      	neglt	r3, r3
 800139e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80013a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013a4:	0fda      	lsrs	r2, r3, #31
 80013a6:	4413      	add	r3, r2
 80013a8:	105b      	asrs	r3, r3, #1
 80013aa:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80013ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	da02      	bge.n	80013be <gfx_writeLine+0xca>
    ystep = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	83bb      	strh	r3, [r7, #28]
 80013bc:	e031      	b.n	8001422 <gfx_writeLine+0x12e>
  } else {
    ystep = -1;
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 80013c4:	e02d      	b.n	8001422 <gfx_writeLine+0x12e>
    if (steep) {
 80013c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <gfx_writeLine+0xec>
    	gfx_writePixel(y0, x0, color);
 80013ce:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f832 	bl	8001442 <gfx_writePixel>
 80013de:	e007      	b.n	80013f0 <gfx_writeLine+0xfc>
    } else {
    	gfx_writePixel(x0, y0, color);
 80013e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f829 	bl	8001442 <gfx_writePixel>
    }
    err -= dy;
 80013f0:	8bfa      	ldrh	r2, [r7, #30]
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80013fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da09      	bge.n	8001416 <gfx_writeLine+0x122>
      y0 += ystep;
 8001402:	88ba      	ldrh	r2, [r7, #4]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	80bb      	strh	r3, [r7, #4]
      err += dx;
 800140c:	8bfa      	ldrh	r2, [r7, #30]
 800140e:	8a3b      	ldrh	r3, [r7, #16]
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	b29b      	uxth	r3, r3
 800141c:	3301      	adds	r3, #1
 800141e:	b29b      	uxth	r3, r3
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001426:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142a:	429a      	cmp	r2, r3
 800142c:	ddcb      	ble.n	80013c6 <gfx_writeLine+0xd2>
    }
  }
}
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}

08001436 <gfx_startWrite>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void gfx_startWrite() {}
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <gfx_writePixel>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writePixel(int16_t x, int16_t y, uint16_t color) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	460b      	mov	r3, r1
 800144e:	80bb      	strh	r3, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	807b      	strh	r3, [r7, #2]
	Draw_Pixe(x, y, color);
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fde8 	bl	8001034 <Draw_Pixe>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <gfx_writeFastVLine>:
    @param    y   Top-most y coordinate
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
	gfx_drawFastVLine(x, y, h, color);
 800148a:	883b      	ldrh	r3, [r7, #0]
 800148c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001490:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001494:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001498:	f000 f846 	bl	8001528 <gfx_drawFastVLine>
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <gfx_writeFastHLine>:
    @param    y   Left-most y coordinate
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
	gfx_drawFastHLine(x, y, w, color);
 80014c2:	883b      	ldrh	r3, [r7, #0]
 80014c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014d0:	f000 f853 	bl	800157a <gfx_drawFastHLine>
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}

080014dc <gfx_writeFillRect>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b085      	sub	sp, #20
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	4603      	mov	r3, r0
 80014f0:	80bb      	strh	r3, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]
 80014f6:	4613      	mov	r3, r2
 80014f8:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if desired!
	Fill_Rect(x, y, w, h, color);
 80014fa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80014fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001502:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001506:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4623      	mov	r3, r4
 8001510:	f7ff fdc0 	bl	8001094 <Fill_Rect>
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}

0800151c <gfx_endWrite>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void gfx_endWrite() {}
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <gfx_drawFastVLine>:
    @param    y   Top-most y coordinate
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b085      	sub	sp, #20
 800152c:	af02      	add	r7, sp, #8
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	4611      	mov	r1, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4623      	mov	r3, r4
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	803b      	strh	r3, [r7, #0]
	gfx_startWrite();
 8001546:	f7ff ff76 	bl	8001436 <gfx_startWrite>
    gfx_writeLine(x, y, x, y + h - 1, color);
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	b21c      	sxth	r4, r3
 8001558:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800155c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001560:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001564:	883b      	ldrh	r3, [r7, #0]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4623      	mov	r3, r4
 800156a:	f7ff fec3 	bl	80012f4 <gfx_writeLine>
    gfx_endWrite();
 800156e:	f7ff ffd5 	bl	800151c <gfx_endWrite>
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}

0800157a <gfx_drawFastHLine>:
    @param    y   Left-most y coordinate
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b085      	sub	sp, #20
 800157e:	af02      	add	r7, sp, #8
 8001580:	4604      	mov	r4, r0
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	461a      	mov	r2, r3
 8001588:	4623      	mov	r3, r4
 800158a:	80fb      	strh	r3, [r7, #6]
 800158c:	4603      	mov	r3, r0
 800158e:	80bb      	strh	r3, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	803b      	strh	r3, [r7, #0]
    gfx_startWrite();
 8001598:	f7ff ff4d 	bl	8001436 <gfx_startWrite>
    gfx_writeLine(x, y, x + w - 1, y, color);
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	4413      	add	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80015ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4623      	mov	r3, r4
 80015bc:	f7ff fe9a 	bl	80012f4 <gfx_writeLine>
    gfx_endWrite();
 80015c0:	f7ff ffac 	bl	800151c <gfx_endWrite>
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}

080015cc <gfx_fillScreen>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillScreen(uint16_t color) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	Fill_Rect(0, 0, _width, _height, color);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <gfx_fillScreen+0x2c>)
 80015d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <gfx_fillScreen+0x30>)
 80015de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	460b      	mov	r3, r1
 80015e8:	2100      	movs	r1, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fd52 	bl	8001094 <Fill_Rect>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000b8 	.word	0x200000b8
 80015fc:	200000c0 	.word	0x200000c0

08001600 <gfx_drawLine>:
    @param    x1  End point x coordinate
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af02      	add	r7, sp, #8
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	4603      	mov	r3, r0
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	803b      	strh	r3, [r7, #0]
  // Update in subclasses if desired!
  if (x0 == x1) {
 800161e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001626:	429a      	cmp	r2, r3
 8001628:	d11a      	bne.n	8001660 <gfx_drawLine+0x60>
    if (y0 > y1)
 800162a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800162e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001632:	429a      	cmp	r2, r3
 8001634:	dd05      	ble.n	8001642 <gfx_drawLine+0x42>
      _swap_int16_t(y0, y1);
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	81bb      	strh	r3, [r7, #12]
 800163a:	883b      	ldrh	r3, [r7, #0]
 800163c:	80bb      	strh	r3, [r7, #4]
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	803b      	strh	r3, [r7, #0]
    gfx_drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8001642:	883a      	ldrh	r2, [r7, #0]
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001656:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800165a:	f7ff ff65 	bl	8001528 <gfx_drawFastVLine>
  } else {
	  gfx_startWrite();
	  gfx_writeLine(x0, y0, x1, y1, color);
	  gfx_endWrite();
  }
}
 800165e:	e031      	b.n	80016c4 <gfx_drawLine+0xc4>
  } else if (y0 == y1) {
 8001660:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001664:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001668:	429a      	cmp	r2, r3
 800166a:	d11a      	bne.n	80016a2 <gfx_drawLine+0xa2>
    if (x0 > x1)
 800166c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001674:	429a      	cmp	r2, r3
 8001676:	dd05      	ble.n	8001684 <gfx_drawLine+0x84>
      _swap_int16_t(x0, x1);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	81fb      	strh	r3, [r7, #14]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	807b      	strh	r3, [r7, #2]
    gfx_drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	b21a      	sxth	r2, r3
 8001692:	8c3b      	ldrh	r3, [r7, #32]
 8001694:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001698:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800169c:	f7ff ff6d 	bl	800157a <gfx_drawFastHLine>
}
 80016a0:	e010      	b.n	80016c4 <gfx_drawLine+0xc4>
	  gfx_startWrite();
 80016a2:	f7ff fec8 	bl	8001436 <gfx_startWrite>
	  gfx_writeLine(x0, y0, x1, y1, color);
 80016a6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80016aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016b6:	8c3b      	ldrh	r3, [r7, #32]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff fe1a 	bl	80012f4 <gfx_writeLine>
	  gfx_endWrite();
 80016c0:	f7ff ff2c 	bl	800151c <gfx_endWrite>
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <gfx_drawCircle>:
    @param    y0   Center-point y coordinate
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4604      	mov	r4, r0
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	80fb      	strh	r3, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	80bb      	strh	r3, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	f1c3 0301 	rsb	r3, r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	461a      	mov	r2, r3
 80016fc:	03d2      	lsls	r2, r2, #15
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	81fb      	strh	r3, [r7, #14]

  gfx_startWrite();
 800170e:	f7ff fe92 	bl	8001436 <gfx_startWrite>
  gfx_writePixel(x0, y0 + r, color);
 8001712:	88ba      	ldrh	r2, [r7, #4]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4413      	add	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	b219      	sxth	r1, r3
 800171c:	883a      	ldrh	r2, [r7, #0]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe8d 	bl	8001442 <gfx_writePixel>
  gfx_writePixel(x0, y0 - r, color);
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	b219      	sxth	r1, r3
 8001732:	883a      	ldrh	r2, [r7, #0]
 8001734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe82 	bl	8001442 <gfx_writePixel>
  gfx_writePixel(x0 + r, y0, color);
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21b      	sxth	r3, r3
 8001748:	883a      	ldrh	r2, [r7, #0]
 800174a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe77 	bl	8001442 <gfx_writePixel>
  gfx_writePixel(x0 - r, y0, color);
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	b21b      	sxth	r3, r3
 800175e:	883a      	ldrh	r2, [r7, #0]
 8001760:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe6c 	bl	8001442 <gfx_writePixel>

  while (x < y) {
 800176a:	e091      	b.n	8001890 <gfx_drawCircle+0x1c4>
    if (f >= 0) {
 800176c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0e      	blt.n	8001792 <gfx_drawCircle+0xc6>
      y--;
 8001774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001780:	8a7b      	ldrh	r3, [r7, #18]
 8001782:	3302      	adds	r3, #2
 8001784:	b29b      	uxth	r3, r3
 8001786:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001788:	8afa      	ldrh	r2, [r7, #22]
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001792:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b29b      	uxth	r3, r3
 800179c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800179e:	8abb      	ldrh	r3, [r7, #20]
 80017a0:	3302      	adds	r3, #2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 80017a6:	8afa      	ldrh	r2, [r7, #22]
 80017a8:	8abb      	ldrh	r3, [r7, #20]
 80017aa:	4413      	add	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	82fb      	strh	r3, [r7, #22]

    gfx_writePixel(x0 + x, y0 + y, color);
 80017b0:	88fa      	ldrh	r2, [r7, #6]
 80017b2:	8a3b      	ldrh	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b218      	sxth	r0, r3
 80017ba:	88ba      	ldrh	r2, [r7, #4]
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	883a      	ldrh	r2, [r7, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff fe3b 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - x, y0 + y, color);
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	8a3b      	ldrh	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	88ba      	ldrh	r2, [r7, #4]
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	4413      	add	r3, r2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b21b      	sxth	r3, r3
 80017e0:	883a      	ldrh	r2, [r7, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fe2d 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 + x, y0 - y, color);
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	8a3b      	ldrh	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b218      	sxth	r0, r3
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	883a      	ldrh	r2, [r7, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff fe1f 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - x, y0 - y, color);
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	8a3b      	ldrh	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	b218      	sxth	r0, r3
 800180e:	88ba      	ldrh	r2, [r7, #4]
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	b21b      	sxth	r3, r3
 8001818:	883a      	ldrh	r2, [r7, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff fe11 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 + y, y0 + x, color);
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	4413      	add	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	b218      	sxth	r0, r3
 800182a:	88ba      	ldrh	r2, [r7, #4]
 800182c:	8a3b      	ldrh	r3, [r7, #16]
 800182e:	4413      	add	r3, r2
 8001830:	b29b      	uxth	r3, r3
 8001832:	b21b      	sxth	r3, r3
 8001834:	883a      	ldrh	r2, [r7, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fe03 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - y, y0 + x, color);
 800183c:	88fa      	ldrh	r2, [r7, #6]
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	b218      	sxth	r0, r3
 8001846:	88ba      	ldrh	r2, [r7, #4]
 8001848:	8a3b      	ldrh	r3, [r7, #16]
 800184a:	4413      	add	r3, r2
 800184c:	b29b      	uxth	r3, r3
 800184e:	b21b      	sxth	r3, r3
 8001850:	883a      	ldrh	r2, [r7, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff fdf5 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 + y, y0 - x, color);
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	b218      	sxth	r0, r3
 8001862:	88ba      	ldrh	r2, [r7, #4]
 8001864:	8a3b      	ldrh	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	b21b      	sxth	r3, r3
 800186c:	883a      	ldrh	r2, [r7, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff fde7 	bl	8001442 <gfx_writePixel>
    gfx_writePixel(x0 - y, y0 - x, color);
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	b218      	sxth	r0, r3
 800187e:	88ba      	ldrh	r2, [r7, #4]
 8001880:	8a3b      	ldrh	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21b      	sxth	r3, r3
 8001888:	883a      	ldrh	r2, [r7, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff fdd9 	bl	8001442 <gfx_writePixel>
  while (x < y) {
 8001890:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001898:	429a      	cmp	r2, r3
 800189a:	f6ff af67 	blt.w	800176c <gfx_drawCircle+0xa0>
  }
  gfx_endWrite();
 800189e:	f7ff fe3d 	bl	800151c <gfx_endWrite>
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <gfx_drawCircleHelper>:
    @param    cornername  Mask bit #1 or bit #2 to indicate which quarters of
   the circle we're doing
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4604      	mov	r4, r0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  int16_t f = 1 - r;
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	f1c3 0301 	rsb	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	461a      	mov	r2, r3
 80018da:	03d2      	lsls	r2, r2, #15
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	81fb      	strh	r3, [r7, #14]

  while (x < y) {
 80018ec:	e0a5      	b.n	8001a3a <gfx_drawCircleHelper+0x190>
    if (f >= 0) {
 80018ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0e      	blt.n	8001914 <gfx_drawCircleHelper+0x6a>
      y--;
 80018f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001902:	8a7b      	ldrh	r3, [r7, #18]
 8001904:	3302      	adds	r3, #2
 8001906:	b29b      	uxth	r3, r3
 8001908:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 800190a:	8afa      	ldrh	r2, [r7, #22]
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	4413      	add	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001914:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001918:	b29b      	uxth	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001920:	8abb      	ldrh	r3, [r7, #20]
 8001922:	3302      	adds	r3, #2
 8001924:	b29b      	uxth	r3, r3
 8001926:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001928:	8afa      	ldrh	r2, [r7, #22]
 800192a:	8abb      	ldrh	r3, [r7, #20]
 800192c:	4413      	add	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <gfx_drawCircleHelper+0xca>
    	gfx_writePixel(x0 + x, y0 + y, color);
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	8a3b      	ldrh	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	b218      	sxth	r0, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	4413      	add	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff fd75 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 + y, y0 + x, color);
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	b218      	sxth	r0, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	8a3b      	ldrh	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff fd67 	bl	8001442 <gfx_writePixel>
    }
    if (cornername & 0x2) {
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01b      	beq.n	80019b6 <gfx_drawCircleHelper+0x10c>
    	gfx_writePixel(x0 + x, y0 - y, color);
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	8a3b      	ldrh	r3, [r7, #16]
 8001982:	4413      	add	r3, r2
 8001984:	b29b      	uxth	r3, r3
 8001986:	b218      	sxth	r0, r3
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	b29b      	uxth	r3, r3
 8001990:	b21b      	sxth	r3, r3
 8001992:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff fd54 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 + y, y0 - x, color);
 800199a:	88fa      	ldrh	r2, [r7, #6]
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	4413      	add	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b218      	sxth	r0, r3
 80019a4:	88ba      	ldrh	r2, [r7, #4]
 80019a6:	8a3b      	ldrh	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff fd46 	bl	8001442 <gfx_writePixel>
    }
    if (cornername & 0x8) {
 80019b6:	787b      	ldrb	r3, [r7, #1]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01b      	beq.n	80019f8 <gfx_drawCircleHelper+0x14e>
    	gfx_writePixel(x0 - y, y0 + x, color);
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b218      	sxth	r0, r3
 80019ca:	88ba      	ldrh	r2, [r7, #4]
 80019cc:	8a3b      	ldrh	r3, [r7, #16]
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff fd33 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 - x, y0 + y, color);
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b218      	sxth	r0, r3
 80019e6:	88ba      	ldrh	r2, [r7, #4]
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff fd25 	bl	8001442 <gfx_writePixel>
    }
    if (cornername & 0x1) {
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01b      	beq.n	8001a3a <gfx_drawCircleHelper+0x190>
    	gfx_writePixel(x0 - y, y0 - x, color);
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b218      	sxth	r0, r3
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	8a3b      	ldrh	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff fd12 	bl	8001442 <gfx_writePixel>
    	gfx_writePixel(x0 - x, y0 - y, color);
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	8a3b      	ldrh	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b218      	sxth	r0, r3
 8001a28:	88ba      	ldrh	r2, [r7, #4]
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff fd04 	bl	8001442 <gfx_writePixel>
  while (x < y) {
 8001a3a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	f6ff af53 	blt.w	80018ee <gfx_drawCircleHelper+0x44>
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}

08001a50 <gfx_fillCircle>:
    @param    y0   Center-point y coordinate
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4604      	mov	r4, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	80fb      	strh	r3, [r7, #6]
 8001a62:	4603      	mov	r3, r0
 8001a64:	80bb      	strh	r3, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	803b      	strh	r3, [r7, #0]
	gfx_startWrite();
 8001a6e:	f7ff fce2 	bl	8001436 <gfx_startWrite>
	gfx_writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8001a72:	88ba      	ldrh	r2, [r7, #4]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b219      	sxth	r1, r3
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	883b      	ldrh	r3, [r7, #0]
 8001a8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a8e:	f7ff fced 	bl	800146c <gfx_writeFastVLine>
	gfx_fillCircleHelper(x0, y0, r, 3, 0, color);
 8001a92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a96:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f000 f806 	bl	8001ab8 <gfx_fillCircleHelper>
	gfx_endWrite();
 8001aac:	f7ff fd36 	bl	800151c <gfx_endWrite>
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <gfx_fillCircleHelper>:
    @param  corners  Mask bits indicating which quarters we're doing
    @param  delta    Offset from center-point, used for round-rects
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void gfx_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4604      	mov	r4, r0
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	80fb      	strh	r3, [r7, #6]
 8001aca:	4603      	mov	r3, r0
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	807b      	strh	r3, [r7, #2]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	707b      	strb	r3, [r7, #1]

  int16_t f = 1 - r;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	f1c3 0301 	rsb	r3, r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	03d2      	lsls	r2, r2, #15
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8001afa:	8a3b      	ldrh	r3, [r7, #16]
 8001afc:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	817b      	strh	r3, [r7, #10]

  delta++; // Avoid some +1's in the loop
 8001b02:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	853b      	strh	r3, [r7, #40]	; 0x28

  while (x < y) {
 8001b0e:	e096      	b.n	8001c3e <gfx_fillCircleHelper+0x186>
    if (f >= 0) {
 8001b10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0e      	blt.n	8001b36 <gfx_fillCircleHelper+0x7e>
      y--;
 8001b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001b24:	8a7b      	ldrh	r3, [r7, #18]
 8001b26:	3302      	adds	r3, #2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8001b2c:	8afa      	ldrh	r2, [r7, #22]
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	4413      	add	r3, r2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001b36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001b42:	8abb      	ldrh	r3, [r7, #20]
 8001b44:	3302      	adds	r3, #2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8001b4a:	8afa      	ldrh	r2, [r7, #22]
 8001b4c:	8abb      	ldrh	r3, [r7, #20]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	82fb      	strh	r3, [r7, #22]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8001b54:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da31      	bge.n	8001bc6 <gfx_fillCircleHelper+0x10e>
      if (corners & 1)
 8001b62:	787b      	ldrb	r3, [r7, #1]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <gfx_fillCircleHelper+0xdc>
    	  gfx_writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	8a3b      	ldrh	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b218      	sxth	r0, r3
 8001b76:	88ba      	ldrh	r2, [r7, #4]
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b219      	sxth	r1, r3
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b90:	f7ff fc6c 	bl	800146c <gfx_writeFastVLine>
      if (corners & 2)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d013      	beq.n	8001bc6 <gfx_fillCircleHelper+0x10e>
    	  gfx_writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	8a3b      	ldrh	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b218      	sxth	r0, r3
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b219      	sxth	r1, r3
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bc2:	f7ff fc53 	bl	800146c <gfx_writeFastVLine>
    }
    if (y != py) {
 8001bc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d033      	beq.n	8001c3a <gfx_fillCircleHelper+0x182>
      if (corners & 1)
 8001bd2:	787b      	ldrb	r3, [r7, #1]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <gfx_fillCircleHelper+0x14c>
    	  gfx_writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b218      	sxth	r0, r3
 8001be6:	88ba      	ldrh	r2, [r7, #4]
 8001be8:	89bb      	ldrh	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b219      	sxth	r1, r3
 8001bf0:	89bb      	ldrh	r3, [r7, #12]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c00:	f7ff fc34 	bl	800146c <gfx_writeFastVLine>
      if (corners & 2)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d013      	beq.n	8001c36 <gfx_fillCircleHelper+0x17e>
    	  gfx_writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b218      	sxth	r0, r3
 8001c18:	88ba      	ldrh	r2, [r7, #4]
 8001c1a:	89bb      	ldrh	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b219      	sxth	r1, r3
 8001c22:	89bb      	ldrh	r3, [r7, #12]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c32:	f7ff fc1b 	bl	800146c <gfx_writeFastVLine>
      py = y;
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 8001c3a:	8a3b      	ldrh	r3, [r7, #16]
 8001c3c:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 8001c3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	f6ff af62 	blt.w	8001b10 <gfx_fillCircleHelper+0x58>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <gfx_drawRoundRect>:
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void gfx_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	4603      	mov	r3, r0
 8001c68:	80bb      	strh	r3, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001c72:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	bfa8      	it	ge
 8001c7e:	4613      	movge	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	0fda      	lsrs	r2, r3, #31
 8001c84:	4413      	add	r3, r2
 8001c86:	105b      	asrs	r3, r3, #1
 8001c88:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 8001c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dd01      	ble.n	8001c9a <gfx_drawRoundRect+0x46>
    r = max_radius;
 8001c96:	89fb      	ldrh	r3, [r7, #14]
 8001c98:	843b      	strh	r3, [r7, #32]
  // smarter version
  gfx_startWrite();
 8001c9a:	f7ff fbcc 	bl	8001436 <gfx_startWrite>
  gfx_writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	8c3b      	ldrh	r3, [r7, #32]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b218      	sxth	r0, r3
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	8c3b      	ldrh	r3, [r7, #32]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cb8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cbc:	f7ff fbf2 	bl	80014a4 <gfx_writeFastHLine>
  gfx_writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8001cc0:	88fa      	ldrh	r2, [r7, #6]
 8001cc2:	8c3b      	ldrh	r3, [r7, #32]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b218      	sxth	r0, r3
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	883b      	ldrh	r3, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	887a      	ldrh	r2, [r7, #2]
 8001cda:	8c3b      	ldrh	r3, [r7, #32]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce8:	f7ff fbdc 	bl	80014a4 <gfx_writeFastHLine>
  gfx_writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 8001cec:	88ba      	ldrh	r2, [r7, #4]
 8001cee:	8c3b      	ldrh	r3, [r7, #32]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b219      	sxth	r1, r3
 8001cf6:	883a      	ldrh	r2, [r7, #0]
 8001cf8:	8c3b      	ldrh	r3, [r7, #32]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d06:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d0a:	f7ff fbaf 	bl	800146c <gfx_writeFastVLine>
  gfx_writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8001d0e:	88fa      	ldrh	r2, [r7, #6]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b218      	sxth	r0, r3
 8001d1c:	88ba      	ldrh	r2, [r7, #4]
 8001d1e:	8c3b      	ldrh	r3, [r7, #32]
 8001d20:	4413      	add	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b219      	sxth	r1, r3
 8001d26:	883a      	ldrh	r2, [r7, #0]
 8001d28:	8c3b      	ldrh	r3, [r7, #32]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d36:	f7ff fb99 	bl	800146c <gfx_writeFastVLine>
  // draw four corners
  gfx_drawCircleHelper(x + r, y + r, r, 1, color);
 8001d3a:	88fa      	ldrh	r2, [r7, #6]
 8001d3c:	8c3b      	ldrh	r3, [r7, #32]
 8001d3e:	4413      	add	r3, r2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	b218      	sxth	r0, r3
 8001d44:	88ba      	ldrh	r2, [r7, #4]
 8001d46:	8c3b      	ldrh	r3, [r7, #32]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b219      	sxth	r1, r3
 8001d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2301      	movs	r3, #1
 8001d58:	f7ff fda7 	bl	80018aa <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	4413      	add	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	8c3b      	ldrh	r3, [r7, #32]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b218      	sxth	r0, r3
 8001d70:	88ba      	ldrh	r2, [r7, #4]
 8001d72:	8c3b      	ldrh	r3, [r7, #32]
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b219      	sxth	r1, r3
 8001d7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	f7ff fd91 	bl	80018aa <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	8c3b      	ldrh	r3, [r7, #32]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b218      	sxth	r0, r3
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	8c3b      	ldrh	r3, [r7, #32]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b219      	sxth	r1, r3
 8001db0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2304      	movs	r3, #4
 8001dba:	f7ff fd76 	bl	80018aa <gfx_drawCircleHelper>
  gfx_drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	8c3b      	ldrh	r3, [r7, #32]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	b218      	sxth	r0, r3
 8001dc8:	88ba      	ldrh	r2, [r7, #4]
 8001dca:	883b      	ldrh	r3, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	8c3b      	ldrh	r3, [r7, #32]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b219      	sxth	r1, r3
 8001ddc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2308      	movs	r3, #8
 8001de6:	f7ff fd60 	bl	80018aa <gfx_drawCircleHelper>
  gfx_endWrite();
 8001dea:	f7ff fb97 	bl	800151c <gfx_endWrite>
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}

08001df6 <gfx_fillRoundRect>:
    @param    h   Height in pixels
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void gfx_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
 8001df6:	b590      	push	{r4, r7, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af02      	add	r7, sp, #8
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	4608      	mov	r0, r1
 8001e00:	4611      	mov	r1, r2
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	80fb      	strh	r3, [r7, #6]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	80bb      	strh	r3, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001e14:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001e18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bfa8      	it	ge
 8001e20:	4613      	movge	r3, r2
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	0fda      	lsrs	r2, r3, #31
 8001e26:	4413      	add	r3, r2
 8001e28:	105b      	asrs	r3, r3, #1
 8001e2a:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 8001e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dd01      	ble.n	8001e3c <gfx_fillRoundRect+0x46>
    r = max_radius;
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	843b      	strh	r3, [r7, #32]
  // smarter version
  gfx_startWrite();
 8001e3c:	f7ff fafb 	bl	8001436 <gfx_startWrite>
  gfx_writeFillRect(x + r, y, w - 2 * r, h, color);
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	8c3b      	ldrh	r3, [r7, #32]
 8001e44:	4413      	add	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b218      	sxth	r0, r3
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	8c3b      	ldrh	r3, [r7, #32]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001e5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4623      	mov	r3, r4
 8001e66:	f7ff fb39 	bl	80014dc <gfx_writeFillRect>
  // draw four corners
  gfx_fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001e6a:	88fa      	ldrh	r2, [r7, #6]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	8c3b      	ldrh	r3, [r7, #32]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b218      	sxth	r0, r3
 8001e7e:	88ba      	ldrh	r2, [r7, #4]
 8001e80:	8c3b      	ldrh	r3, [r7, #32]
 8001e82:	4413      	add	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b219      	sxth	r1, r3
 8001e88:	883a      	ldrh	r2, [r7, #0]
 8001e8a:	8c3b      	ldrh	r3, [r7, #32]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ea0:	9201      	str	r2, [sp, #4]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	f7ff fe06 	bl	8001ab8 <gfx_fillCircleHelper>
  gfx_fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	8c3b      	ldrh	r3, [r7, #32]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b218      	sxth	r0, r3
 8001eb6:	88ba      	ldrh	r2, [r7, #4]
 8001eb8:	8c3b      	ldrh	r3, [r7, #32]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b219      	sxth	r1, r3
 8001ec0:	883a      	ldrh	r2, [r7, #0]
 8001ec2:	8c3b      	ldrh	r3, [r7, #32]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001ed6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ed8:	9201      	str	r2, [sp, #4]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2302      	movs	r3, #2
 8001ede:	4622      	mov	r2, r4
 8001ee0:	f7ff fdea 	bl	8001ab8 <gfx_fillCircleHelper>
  gfx_endWrite();
 8001ee4:	f7ff fb1a 	bl	800151c <gfx_endWrite>
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <gfx_drawEllipse>:
/***************************************************************************************
** Function name:           drawEllipse
** Description:             Draw a ellipse outline
***************************************************************************************/
void gfx_drawEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4603      	mov	r3, r0
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	460b      	mov	r3, r1
 8001f00:	81bb      	strh	r3, [r7, #12]
  if (rx<2) return;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f340 80ff 	ble.w	8002108 <gfx_drawEllipse+0x218>
  if (ry<2) return;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	f340 80fd 	ble.w	800210c <gfx_drawEllipse+0x21c>
  int32_t x, y;
  int32_t rx2 = rx * rx;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	623b      	str	r3, [r7, #32]
  int32_t ry2 = ry * ry;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]
  int32_t fx2 = 4 * rx2;
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
  int32_t fy2 = 4 * ry2;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
  int32_t s;

  for (x = 0, y = ry, s = 2*ry2+rx2*(1-2*ry); ry2*x <= rx2*y; x++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005a      	lsls	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	f1c3 0301 	rsb	r3, r3, #1
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	e05a      	b.n	8002008 <gfx_drawEllipse+0x118>
    // These are ordered to minimise coordinate changes in x or y
    // drawPixel can then send fewer bounding box commands
	  gfx_writePixel(x0 + x, y0 + y, color);
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	89fb      	ldrh	r3, [r7, #14]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b218      	sxth	r0, r3
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	89bb      	ldrh	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7ff fa68 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 + y, color);
 8001f72:	89fa      	ldrh	r2, [r7, #14]
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b218      	sxth	r0, r3
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	89bb      	ldrh	r3, [r7, #12]
 8001f84:	4413      	add	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7ff fa58 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 - y, color);
 8001f92:	89fa      	ldrh	r2, [r7, #14]
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	b218      	sxth	r0, r3
 8001f9e:	89ba      	ldrh	r2, [r7, #12]
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7ff fa48 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 + x, y0 - y, color);
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b218      	sxth	r0, r3
 8001fbe:	89ba      	ldrh	r2, [r7, #12]
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff fa38 	bl	8001442 <gfx_writePixel>
    if (s >= 0) {
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0b      	blt.n	8001ff0 <gfx_drawEllipse+0x100>
      s += fx2 * (1 - y);
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	f1c3 0301 	rsb	r3, r3, #1
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	4413      	add	r3, r2
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
      y--;
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    s += ry2 * ((4 * x) + 6);
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	4413      	add	r3, r2
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  for (x = 0, y = ry, s = 2*ry2+rx2*(1-2*ry); ry2*x <= rx2*y; x++) {
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	3301      	adds	r3, #1
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200c:	fb02 f203 	mul.w	r2, r2, r3
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	429a      	cmp	r2, r3
 800201a:	dd9a      	ble.n	8001f52 <gfx_drawEllipse+0x62>
  }

  for (x = rx, y = 0, s = 2*rx2+ry2*(1-2*rx); rx2*y <= ry2*x; y++) {
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	005a      	lsls	r2, r3, #1
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	f1c3 0301 	rsb	r3, r3, #1
 8002030:	69f9      	ldr	r1, [r7, #28]
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e05a      	b.n	80020f2 <gfx_drawEllipse+0x202>
    // These are ordered to minimise coordinate changes in x or y
    // drawPixel can then send fewer bounding box commands
	  gfx_writePixel(x0 + x, y0 + y, color);
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	b29a      	uxth	r2, r3
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	4413      	add	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	b218      	sxth	r0, r3
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	b29a      	uxth	r2, r3
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21b      	sxth	r3, r3
 8002054:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002056:	4619      	mov	r1, r3
 8002058:	f7ff f9f3 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 + y, color);
 800205c:	89fa      	ldrh	r2, [r7, #14]
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	b29b      	uxth	r3, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b218      	sxth	r0, r3
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	b29a      	uxth	r2, r3
 800206c:	89bb      	ldrh	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff f9e3 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 - x, y0 - y, color);
 800207c:	89fa      	ldrh	r2, [r7, #14]
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	b29b      	uxth	r3, r3
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	b218      	sxth	r0, r3
 8002088:	89ba      	ldrh	r2, [r7, #12]
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	b29b      	uxth	r3, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	b21b      	sxth	r3, r3
 8002094:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002096:	4619      	mov	r1, r3
 8002098:	f7ff f9d3 	bl	8001442 <gfx_writePixel>
	  gfx_writePixel(x0 + x, y0 - y, color);
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	b29a      	uxth	r2, r3
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b218      	sxth	r0, r3
 80020a8:	89ba      	ldrh	r2, [r7, #12]
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7ff f9c3 	bl	8001442 <gfx_writePixel>
    if (s >= 0)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <gfx_drawEllipse+0x1ea>
    {
      s += fy2 * (1 - x);
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	f1c3 0301 	rsb	r3, r3, #1
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	4413      	add	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
      x--;
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	3b01      	subs	r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    s += rx2 * ((4 * y) + 6);
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3306      	adds	r3, #6
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	4413      	add	r3, r2
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (x = rx, y = 0, s = 2*rx2+ry2*(1-2*rx); rx2*y <= ry2*x; y++) {
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	3301      	adds	r3, #1
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	429a      	cmp	r2, r3
 8002104:	dd9a      	ble.n	800203c <gfx_drawEllipse+0x14c>
 8002106:	e002      	b.n	800210e <gfx_drawEllipse+0x21e>
  if (rx<2) return;
 8002108:	bf00      	nop
 800210a:	e000      	b.n	800210e <gfx_drawEllipse+0x21e>
  if (ry<2) return;
 800210c:	bf00      	nop
  }

}
 800210e:	3730      	adds	r7, #48	; 0x30
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0000      	movs	r0, r0
	...

08002118 <gfx_FillRectWithAngle>:

void gfx_drawRectWithAngle(int x, int y, int w, int h,int angle,int color){

}

void gfx_FillRectWithAngle(int x, int y, int w, int h,int angle,int color){
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b091      	sub	sp, #68	; 0x44
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
	int revert=0;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
	int x0=0,y0=0,x1=0,y1=0,xa=0,ya=0;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
	float cosAngle=0.0,sinAngle=0.0;
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
	cosAngle=cos(angle*3.14/180);
 800214e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002150:	f7fe f958 	bl	8000404 <__aeabi_i2d>
 8002154:	a358      	add	r3, pc, #352	; (adr r3, 80022b8 <gfx_FillRectWithAngle+0x1a0>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe f9bd 	bl	80004d8 <__aeabi_dmul>
 800215e:	4603      	mov	r3, r0
 8002160:	460c      	mov	r4, r1
 8002162:	4618      	mov	r0, r3
 8002164:	4621      	mov	r1, r4
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <gfx_FillRectWithAngle+0x1a8>)
 800216c:	f7fe fade 	bl	800072c <__aeabi_ddiv>
 8002170:	4603      	mov	r3, r0
 8002172:	460c      	mov	r4, r1
 8002174:	4618      	mov	r0, r3
 8002176:	4621      	mov	r1, r4
 8002178:	f003 fbe0 	bl	800593c <cos>
 800217c:	4603      	mov	r3, r0
 800217e:	460c      	mov	r4, r1
 8002180:	4618      	mov	r0, r3
 8002182:	4621      	mov	r1, r4
 8002184:	f7fe fc6a 	bl	8000a5c <__aeabi_d2f>
 8002188:	4603      	mov	r3, r0
 800218a:	617b      	str	r3, [r7, #20]
	sinAngle=sin(angle*3.14/180);
 800218c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800218e:	f7fe f939 	bl	8000404 <__aeabi_i2d>
 8002192:	a349      	add	r3, pc, #292	; (adr r3, 80022b8 <gfx_FillRectWithAngle+0x1a0>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f99e 	bl	80004d8 <__aeabi_dmul>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	4618      	mov	r0, r3
 80021a2:	4621      	mov	r1, r4
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <gfx_FillRectWithAngle+0x1a8>)
 80021aa:	f7fe fabf 	bl	800072c <__aeabi_ddiv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	4618      	mov	r0, r3
 80021b4:	4621      	mov	r1, r4
 80021b6:	f003 fbf7 	bl	80059a8 <sin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	4618      	mov	r0, r3
 80021c0:	4621      	mov	r1, r4
 80021c2:	f7fe fc4b 	bl	8000a5c <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]

	xa=w*cosAngle;
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fd50 	bl	8000c70 <__aeabi_i2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd9f 	bl	8000d18 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe feeb 	bl	8000fb8 <__aeabi_f2iz>
 80021e2:	4603      	mov	r3, r0
 80021e4:	61fb      	str	r3, [r7, #28]
	ya=w*sinAngle;
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe fd42 	bl	8000c70 <__aeabi_i2f>
 80021ec:	4603      	mov	r3, r0
 80021ee:	6939      	ldr	r1, [r7, #16]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd91 	bl	8000d18 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fedd 	bl	8000fb8 <__aeabi_f2iz>
 80021fe:	4603      	mov	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]

	if((angle>90 && angle<180 )|| ((angle>270 && angle<360 ))){
 8002202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002204:	2b5a      	cmp	r3, #90	; 0x5a
 8002206:	dd02      	ble.n	800220e <gfx_FillRectWithAngle+0xf6>
 8002208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220a:	2bb3      	cmp	r3, #179	; 0xb3
 800220c:	dd07      	ble.n	800221e <gfx_FillRectWithAngle+0x106>
 800220e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002210:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002214:	dd05      	ble.n	8002222 <gfx_FillRectWithAngle+0x10a>
 8002216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002218:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800221c:	da01      	bge.n	8002222 <gfx_FillRectWithAngle+0x10a>
		revert=1;
 800221e:	2301      	movs	r3, #1
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
	}

	for(int i=0;i<h;i++){
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002226:	e03c      	b.n	80022a2 <gfx_FillRectWithAngle+0x18a>
		x0=x+i;
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	4413      	add	r3, r2
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
		if(revert){
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <gfx_FillRectWithAngle+0x128>
			y0=y+i;
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	4413      	add	r3, r2
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
 800223e:	e003      	b.n	8002248 <gfx_FillRectWithAngle+0x130>
		}
		else{
			y0=y-i;
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
		}
		x1=x0+xa;
 8002248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
		y1=y0+ya;
 8002250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	623b      	str	r3, [r7, #32]
		gfx_drawLine(x0,y0,x1,y1, color);
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	b218      	sxth	r0, r3
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	b219      	sxth	r1, r3
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	b21a      	sxth	r2, r3
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	b21c      	sxth	r4, r3
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	b29b      	uxth	r3, r3
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4623      	mov	r3, r4
 8002270:	f7ff f9c6 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(x0,y0+1,x1,y1+1, color);
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	b218      	sxth	r0, r3
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	b29b      	uxth	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	b29b      	uxth	r3, r3
 8002280:	b219      	sxth	r1, r3
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	b21a      	sxth	r2, r3
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	b29b      	uxth	r3, r3
 800228a:	3301      	adds	r3, #1
 800228c:	b29b      	uxth	r3, r3
 800228e:	b21c      	sxth	r4, r3
 8002290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002292:	b29b      	uxth	r3, r3
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4623      	mov	r3, r4
 8002298:	f7ff f9b2 	bl	8001600 <gfx_drawLine>
	for(int i=0;i<h;i++){
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	3301      	adds	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbbe      	blt.n	8002228 <gfx_FillRectWithAngle+0x110>

	}

}
 80022aa:	bf00      	nop
 80022ac:	373c      	adds	r7, #60	; 0x3c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	f3af 8000 	nop.w
 80022b8:	51eb851f 	.word	0x51eb851f
 80022bc:	40091eb8 	.word	0x40091eb8
 80022c0:	40668000 	.word	0x40668000

080022c4 <gfx_drawChar1>:
   no background)
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void gfx_drawChar1(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08d      	sub	sp, #52	; 0x34
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	80fb      	strh	r3, [r7, #6]
 80022d6:	4603      	mov	r3, r0
 80022d8:	80bb      	strh	r3, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	70fb      	strb	r3, [r7, #3]
 80022de:	4613      	mov	r3, r2
 80022e0:	803b      	strh	r3, [r7, #0]

  if (!gfxFont) { // 'Classic' built-in font
 80022e2:	4bb8      	ldr	r3, [pc, #736]	; (80025c4 <gfx_drawChar1+0x300>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8126 	bne.w	8002538 <gfx_drawChar1+0x274>

    if ((x >= _width) ||              // Clip right
 80022ec:	4bb6      	ldr	r3, [pc, #728]	; (80025c8 <gfx_drawChar1+0x304>)
 80022ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	f280 81ec 	bge.w	80026d4 <gfx_drawChar1+0x410>
        (y >= _height) ||             // Clip bottom
 80022fc:	4bb3      	ldr	r3, [pc, #716]	; (80025cc <gfx_drawChar1+0x308>)
 80022fe:	f9b3 3000 	ldrsh.w	r3, [r3]
    if ((x >= _width) ||              // Clip right
 8002302:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	f280 81e4 	bge.w	80026d4 <gfx_drawChar1+0x410>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 800230c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002310:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	440b      	add	r3, r1
 800231e:	3b01      	subs	r3, #1
        (y >= _height) ||             // Clip bottom
 8002320:	2b00      	cmp	r3, #0
 8002322:	f2c0 81d7 	blt.w	80026d4 <gfx_drawChar1+0x410>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8002326:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800232a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8002334:	2b00      	cmp	r3, #0
 8002336:	f2c0 81cd 	blt.w	80026d4 <gfx_drawChar1+0x410>
      return;

    if (!_cp437 && (c >= 176))
 800233a:	4ba5      	ldr	r3, [pc, #660]	; (80025d0 <gfx_drawChar1+0x30c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <gfx_drawChar1+0x90>
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2baf      	cmp	r3, #175	; 0xaf
 800234c:	d902      	bls.n	8002354 <gfx_drawChar1+0x90>
      c++; // Handle 'classic' charset behavior
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	3301      	adds	r3, #1
 8002352:	70fb      	strb	r3, [r7, #3]

    gfx_startWrite();
 8002354:	f7ff f86f 	bl	8001436 <gfx_startWrite>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800235e:	e0b1      	b.n	80024c4 <gfx_drawChar1+0x200>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800236c:	4413      	add	r3, r2
 800236e:	4a99      	ldr	r2, [pc, #612]	; (80025d4 <gfx_drawChar1+0x310>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800237c:	e096      	b.n	80024ac <gfx_drawChar1+0x1e8>
        if (line & 1) {
 800237e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d040      	beq.n	800240c <gfx_drawChar1+0x148>
          if (size_x == 1 && size_y == 1)
 800238a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d116      	bne.n	80023c0 <gfx_drawChar1+0xfc>
 8002392:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002396:	2b01      	cmp	r3, #1
 8002398:	d112      	bne.n	80023c0 <gfx_drawChar1+0xfc>
        	  gfx_writePixel(x + i, y + j, color);
 800239a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800239e:	b29a      	uxth	r2, r3
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4413      	add	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b218      	sxth	r0, r3
 80023a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	883a      	ldrh	r2, [r7, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7ff f842 	bl	8001442 <gfx_writePixel>
 80023be:	e069      	b.n	8002494 <gfx_drawChar1+0x1d0>
          else
        	  gfx_writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 80023c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80023ca:	b292      	uxth	r2, r2
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4413      	add	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b218      	sxth	r0, r3
 80023da:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80023e4:	b292      	uxth	r2, r2
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	88bb      	ldrh	r3, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b219      	sxth	r1, r3
 80023f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80023f8:	b21a      	sxth	r2, r3
 80023fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80023fe:	b21c      	sxth	r4, r3
 8002400:	883b      	ldrh	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4623      	mov	r3, r4
 8002406:	f7ff f869 	bl	80014dc <gfx_writeFillRect>
 800240a:	e043      	b.n	8002494 <gfx_drawChar1+0x1d0>
                          color);
        } else if (bg != color) {
 800240c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800240e:	883b      	ldrh	r3, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d03f      	beq.n	8002494 <gfx_drawChar1+0x1d0>
          if (size_x == 1 && size_y == 1)
 8002414:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d116      	bne.n	800244a <gfx_drawChar1+0x186>
 800241c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002420:	2b01      	cmp	r3, #1
 8002422:	d112      	bne.n	800244a <gfx_drawChar1+0x186>
        	  gfx_writePixel(x + i, y + j, bg);
 8002424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002428:	b29a      	uxth	r2, r3
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	4413      	add	r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	b218      	sxth	r0, r3
 8002432:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002436:	b29a      	uxth	r2, r3
 8002438:	88bb      	ldrh	r3, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	b21b      	sxth	r3, r3
 8002440:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fffd 	bl	8001442 <gfx_writePixel>
 8002448:	e024      	b.n	8002494 <gfx_drawChar1+0x1d0>
          else
        	  gfx_writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800244a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800244e:	b29b      	uxth	r3, r3
 8002450:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002454:	b292      	uxth	r2, r2
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	b29a      	uxth	r2, r3
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	4413      	add	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	b218      	sxth	r0, r3
 8002464:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002468:	b29b      	uxth	r3, r3
 800246a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800246e:	b292      	uxth	r2, r2
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	b29a      	uxth	r2, r3
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	b219      	sxth	r1, r3
 800247e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002482:	b21a      	sxth	r2, r3
 8002484:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002488:	b21c      	sxth	r4, r3
 800248a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4623      	mov	r3, r4
 8002490:	f7ff f824 	bl	80014dc <gfx_writeFillRect>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002494:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80024a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80024ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	f77f af64 	ble.w	800237e <gfx_drawChar1+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80024b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	f77f af49 	ble.w	8002360 <gfx_drawChar1+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 80024ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80024d0:	883b      	ldrh	r3, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d02d      	beq.n	8002532 <gfx_drawChar1+0x26e>
      if (size_x == 1 && size_y == 1)
 80024d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d10e      	bne.n	80024fc <gfx_drawChar1+0x238>
 80024de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10a      	bne.n	80024fc <gfx_drawChar1+0x238>
    	  gfx_writeFastVLine(x + 5, y, 8, bg);
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	3305      	adds	r3, #5
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b218      	sxth	r0, r3
 80024ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80024f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80024f4:	2208      	movs	r2, #8
 80024f6:	f7fe ffb9 	bl	800146c <gfx_writeFastVLine>
 80024fa:	e01a      	b.n	8002532 <gfx_drawChar1+0x26e>
      else
    	  gfx_writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80024fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	4413      	add	r3, r2
 8002508:	b29a      	uxth	r2, r3
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	4413      	add	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	b218      	sxth	r0, r3
 8002512:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002516:	b21a      	sxth	r2, r3
 8002518:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800251c:	b29b      	uxth	r3, r3
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	b29b      	uxth	r3, r3
 8002522:	b21c      	sxth	r4, r3
 8002524:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002528:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4623      	mov	r3, r4
 800252e:	f7fe ffd5 	bl	80014dc <gfx_writeFillRect>
    }
    gfx_endWrite();
 8002532:	f7fe fff3 	bl	800151c <gfx_endWrite>
 8002536:	e0ce      	b.n	80026d6 <gfx_drawChar1+0x412>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <gfx_drawChar1+0x300>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3308      	adds	r3, #8
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	70fb      	strb	r3, [r7, #3]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <gfx_drawChar1+0x300>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fe39 	bl	80011c6 <pgm_read_glyph_ptr>
 8002554:	6178      	str	r0, [r7, #20]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <gfx_drawChar1+0x300>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fe43 	bl	80011e6 <pgm_read_bitmap_ptr>
 8002560:	6138      	str	r0, [r7, #16]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	847b      	strh	r3, [r7, #34]	; 0x22
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	789b      	ldrb	r3, [r3, #2]
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	73bb      	strb	r3, [r7, #14]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3305      	adds	r3, #5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	737b      	strb	r3, [r7, #13]
           yo = pgm_read_byte(&glyph->yOffset);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3306      	adds	r3, #6
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	733b      	strb	r3, [r7, #12]
    uint8_t xx, yy, bits = 0, bit = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
 8002588:	2300      	movs	r3, #0
 800258a:	77bb      	strb	r3, [r7, #30]
    int16_t xo16 = 0, yo16 = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	83bb      	strh	r3, [r7, #28]
 8002590:	2300      	movs	r3, #0
 8002592:	837b      	strh	r3, [r7, #26]

    if (size_x > 1 || size_y > 1) {
 8002594:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d803      	bhi.n	80025a4 <gfx_drawChar1+0x2e0>
 800259c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d905      	bls.n	80025b0 <gfx_drawChar1+0x2ec>
      xo16 = xo;
 80025a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025a8:	83bb      	strh	r3, [r7, #28]
      yo16 = yo;
 80025aa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80025ae:	837b      	strh	r3, [r7, #26]
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    gfx_startWrite();
 80025b0:	f7fe ff41 	bl	8001436 <gfx_startWrite>
    for (yy = 0; yy < h; yy++) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3020 	strb.w	r3, [r7, #32]
 80025ba:	e082      	b.n	80026c2 <gfx_drawChar1+0x3fe>
      for (xx = 0; xx < w; xx++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80025c2:	e074      	b.n	80026ae <gfx_drawChar1+0x3ea>
 80025c4:	2000008c 	.word	0x2000008c
 80025c8:	200000b8 	.word	0x200000b8
 80025cc:	200000c0 	.word	0x200000c0
 80025d0:	200000a6 	.word	0x200000a6
 80025d4:	080069d8 	.word	0x080069d8
        if (!(bit++ & 7)) {
 80025d8:	7fbb      	ldrb	r3, [r7, #30]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	77ba      	strb	r2, [r7, #30]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <gfx_drawChar1+0x332>
          bits = pgm_read_byte(&bitmap[bo++]);
 80025e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	847a      	strh	r2, [r7, #34]	; 0x22
 80025ec:	461a      	mov	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	77fb      	strb	r3, [r7, #31]
        }
        if (bits & 0x80) {
 80025f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da4f      	bge.n	800269e <gfx_drawChar1+0x3da>
          if (size_x == 1 && size_y == 1) {
 80025fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d120      	bne.n	8002648 <gfx_drawChar1+0x384>
 8002606:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11c      	bne.n	8002648 <gfx_drawChar1+0x384>
            gfx_writePixel(x + xo + xx, y + yo + yy, color);
 800260e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002612:	b29a      	uxth	r2, r3
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	4413      	add	r3, r2
 8002618:	b29a      	uxth	r2, r3
 800261a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800261e:	b29b      	uxth	r3, r3
 8002620:	4413      	add	r3, r2
 8002622:	b29b      	uxth	r3, r3
 8002624:	b218      	sxth	r0, r3
 8002626:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800262a:	b29a      	uxth	r2, r3
 800262c:	88bb      	ldrh	r3, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	b29a      	uxth	r2, r3
 8002632:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4413      	add	r3, r2
 800263a:	b29b      	uxth	r3, r3
 800263c:	b21b      	sxth	r3, r3
 800263e:	883a      	ldrh	r2, [r7, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fefe 	bl	8001442 <gfx_writePixel>
 8002646:	e02a      	b.n	800269e <gfx_drawChar1+0x3da>
          } else {
            gfx_writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8002648:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800264c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002650:	4413      	add	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002658:	b292      	uxth	r2, r2
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	b29a      	uxth	r2, r3
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	4413      	add	r3, r2
 8002664:	b29b      	uxth	r3, r3
 8002666:	b218      	sxth	r0, r3
 8002668:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800266c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002670:	4413      	add	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002678:	b292      	uxth	r2, r2
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	b29a      	uxth	r2, r3
 8002680:	88bb      	ldrh	r3, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	b219      	sxth	r1, r3
 8002688:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800268c:	b21a      	sxth	r2, r3
 800268e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002692:	b21c      	sxth	r4, r3
 8002694:	883b      	ldrh	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4623      	mov	r3, r4
 800269a:	f7fe ff1f 	bl	80014dc <gfx_writeFillRect>
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 800269e:	7ffb      	ldrb	r3, [r7, #31]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	77fb      	strb	r3, [r7, #31]
      for (xx = 0; xx < w; xx++) {
 80026a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026a8:	3301      	adds	r3, #1
 80026aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80026ae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d38f      	bcc.n	80025d8 <gfx_drawChar1+0x314>
    for (yy = 0; yy < h; yy++) {
 80026b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026bc:	3301      	adds	r3, #1
 80026be:	f887 3020 	strb.w	r3, [r7, #32]
 80026c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f4ff af77 	bcc.w	80025bc <gfx_drawChar1+0x2f8>
      }
    }
    gfx_endWrite();
 80026ce:	f7fe ff25 	bl	800151c <gfx_endWrite>
 80026d2:	e000      	b.n	80026d6 <gfx_drawChar1+0x412>
      return;
 80026d4:	bf00      	nop

  } // End classic vs custom font
}
 80026d6:	372c      	adds	r7, #44	; 0x2c
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}

080026dc <gfx_write>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
void gfx_write(uint8_t c) {
 80026dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026de:	b08b      	sub	sp, #44	; 0x2c
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if (!gfxFont) { // 'Classic' built-in font
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <gfx_write+0x230>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d167      	bne.n	80027be <gfx_write+0xe2>

    if (c == '\n') {              // Newline?
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b0a      	cmp	r3, #10
 80026f2:	d111      	bne.n	8002718 <gfx_write+0x3c>
      cursor_x = 0;               // Reset x to zero,
 80026f4:	4b86      	ldr	r3, [pc, #536]	; (8002910 <gfx_write+0x234>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	801a      	strh	r2, [r3, #0]
      cursor_y += textsize_y * 8; // advance y one line
 80026fa:	4b86      	ldr	r3, [pc, #536]	; (8002914 <gfx_write+0x238>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b84      	ldr	r3, [pc, #528]	; (8002918 <gfx_write+0x23c>)
 8002706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4413      	add	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	b21a      	sxth	r2, r3
 8002712:	4b81      	ldr	r3, [pc, #516]	; (8002918 <gfx_write+0x23c>)
 8002714:	801a      	strh	r2, [r3, #0]
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
}
 8002716:	e0f4      	b.n	8002902 <gfx_write+0x226>
    } else if (c != '\r') {       // Ignore carriage returns
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b0d      	cmp	r3, #13
 800271c:	f000 80f1 	beq.w	8002902 <gfx_write+0x226>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <gfx_write+0x240>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <gfx_write+0x90>
 8002728:	4b79      	ldr	r3, [pc, #484]	; (8002910 <gfx_write+0x234>)
 800272a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272e:	4619      	mov	r1, r3
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <gfx_write+0x244>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	440b      	add	r3, r1
 8002740:	4a78      	ldr	r2, [pc, #480]	; (8002924 <gfx_write+0x248>)
 8002742:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002746:	4293      	cmp	r3, r2
 8002748:	dd10      	ble.n	800276c <gfx_write+0x90>
        cursor_x = 0;                                       // Reset x to zero,
 800274a:	4b71      	ldr	r3, [pc, #452]	; (8002910 <gfx_write+0x234>)
 800274c:	2200      	movs	r2, #0
 800274e:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize_y * 8; // advance y one line
 8002750:	4b70      	ldr	r3, [pc, #448]	; (8002914 <gfx_write+0x238>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <gfx_write+0x23c>)
 800275c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4413      	add	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	b21a      	sxth	r2, r3
 8002768:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <gfx_write+0x23c>)
 800276a:	801a      	strh	r2, [r3, #0]
      gfx_drawChar1(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 800276c:	4b68      	ldr	r3, [pc, #416]	; (8002910 <gfx_write+0x234>)
 800276e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002772:	4b69      	ldr	r3, [pc, #420]	; (8002918 <gfx_write+0x23c>)
 8002774:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002778:	4b6b      	ldr	r3, [pc, #428]	; (8002928 <gfx_write+0x24c>)
 800277a:	881e      	ldrh	r6, [r3, #0]
 800277c:	4b6b      	ldr	r3, [pc, #428]	; (800292c <gfx_write+0x250>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	4a67      	ldr	r2, [pc, #412]	; (8002920 <gfx_write+0x244>)
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	4963      	ldr	r1, [pc, #396]	; (8002914 <gfx_write+0x238>)
 8002786:	7809      	ldrb	r1, [r1, #0]
 8002788:	79fd      	ldrb	r5, [r7, #7]
 800278a:	9102      	str	r1, [sp, #8]
 800278c:	9201      	str	r2, [sp, #4]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4633      	mov	r3, r6
 8002792:	462a      	mov	r2, r5
 8002794:	4621      	mov	r1, r4
 8002796:	f7ff fd95 	bl	80022c4 <gfx_drawChar1>
      cursor_x += textsize_x * 6; // Advance x one char
 800279a:	4b61      	ldr	r3, [pc, #388]	; (8002920 <gfx_write+0x244>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	0052      	lsls	r2, r2, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b59      	ldr	r3, [pc, #356]	; (8002910 <gfx_write+0x234>)
 80027ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <gfx_write+0x234>)
 80027ba:	801a      	strh	r2, [r3, #0]
}
 80027bc:	e0a1      	b.n	8002902 <gfx_write+0x226>
    if (c == '\n') {
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b0a      	cmp	r3, #10
 80027c2:	d117      	bne.n	80027f4 <gfx_write+0x118>
      cursor_x = 0;
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <gfx_write+0x234>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	801a      	strh	r2, [r3, #0]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80027ca:	4b52      	ldr	r3, [pc, #328]	; (8002914 <gfx_write+0x238>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4a4e      	ldr	r2, [pc, #312]	; (800290c <gfx_write+0x230>)
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	320c      	adds	r2, #12
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	b292      	uxth	r2, r2
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	b29a      	uxth	r2, r3
      cursor_y +=
 80027e0:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <gfx_write+0x23c>)
 80027e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <gfx_write+0x23c>)
 80027f0:	801a      	strh	r2, [r3, #0]
}
 80027f2:	e086      	b.n	8002902 <gfx_write+0x226>
    } else if (c != '\r') {
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b0d      	cmp	r3, #13
 80027f8:	f000 8083 	beq.w	8002902 <gfx_write+0x226>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 80027fc:	4b43      	ldr	r3, [pc, #268]	; (800290c <gfx_write+0x230>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3308      	adds	r3, #8
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	429a      	cmp	r2, r3
 800280c:	d379      	bcc.n	8002902 <gfx_write+0x226>
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <gfx_write+0x230>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330a      	adds	r3, #10
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	79fa      	ldrb	r2, [r7, #7]
 8002818:	429a      	cmp	r2, r3
 800281a:	d872      	bhi.n	8002902 <gfx_write+0x226>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <gfx_write+0x230>)
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe fccc 	bl	80011c6 <pgm_read_glyph_ptr>
 800282e:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	789b      	ldrb	r3, [r3, #2]
 8002834:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	78db      	ldrb	r3, [r3, #3]
 800283a:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d04c      	beq.n	80028dc <gfx_write+0x200>
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d049      	beq.n	80028dc <gfx_write+0x200>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	3305      	adds	r3, #5
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8002852:	4b32      	ldr	r3, [pc, #200]	; (800291c <gfx_write+0x240>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d029      	beq.n	80028ae <gfx_write+0x1d2>
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <gfx_write+0x234>)
 800285c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002860:	4619      	mov	r1, r3
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <gfx_write+0x244>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	4413      	add	r3, r2
 8002870:	fb03 f300 	mul.w	r3, r3, r0
 8002874:	440b      	add	r3, r1
 8002876:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <gfx_write+0x248>)
 8002878:	f9b2 2000 	ldrsh.w	r2, [r2]
 800287c:	4293      	cmp	r3, r2
 800287e:	dd16      	ble.n	80028ae <gfx_write+0x1d2>
            cursor_x = 0;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <gfx_write+0x234>)
 8002882:	2200      	movs	r2, #0
 8002884:	801a      	strh	r2, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <gfx_write+0x238>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <gfx_write+0x230>)
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	320c      	adds	r2, #12
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	b292      	uxth	r2, r2
            cursor_y += (int16_t)textsize_y *
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <gfx_write+0x23c>)
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b21a      	sxth	r2, r3
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <gfx_write+0x23c>)
 80028ac:	801a      	strh	r2, [r3, #0]
          gfx_drawChar1(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <gfx_write+0x234>)
 80028b0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <gfx_write+0x23c>)
 80028b6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <gfx_write+0x24c>)
 80028bc:	881e      	ldrh	r6, [r3, #0]
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <gfx_write+0x250>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <gfx_write+0x244>)
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	4913      	ldr	r1, [pc, #76]	; (8002914 <gfx_write+0x238>)
 80028c8:	7809      	ldrb	r1, [r1, #0]
 80028ca:	79fd      	ldrb	r5, [r7, #7]
 80028cc:	9102      	str	r1, [sp, #8]
 80028ce:	9201      	str	r2, [sp, #4]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4633      	mov	r3, r6
 80028d4:	462a      	mov	r2, r5
 80028d6:	4621      	mov	r1, r4
 80028d8:	f7ff fcf4 	bl	80022c4 <gfx_drawChar1>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	3304      	adds	r3, #4
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <gfx_write+0x244>)
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	b292      	uxth	r2, r2
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	b29a      	uxth	r2, r3
        cursor_x +=
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <gfx_write+0x234>)
 80028f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <gfx_write+0x234>)
 8002900:	801a      	strh	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290a:	bf00      	nop
 800290c:	2000008c 	.word	0x2000008c
 8002910:	200000bc 	.word	0x200000bc
 8002914:	200000c7 	.word	0x200000c7
 8002918:	20000084 	.word	0x20000084
 800291c:	200000be 	.word	0x200000be
 8002920:	20000090 	.word	0x20000090
 8002924:	200000b8 	.word	0x200000b8
 8002928:	200000c8 	.word	0x200000c8
 800292c:	200000c4 	.word	0x200000c4

08002930 <gfx_print>:

void gfx_print(char * prt){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	while(*prt!=0){
 8002938:	e007      	b.n	800294a <gfx_print+0x1a>
		gfx_write(*prt);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fecc 	bl	80026dc <gfx_write>
		prt++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3301      	adds	r3, #1
 8002948:	607b      	str	r3, [r7, #4]
	while(*prt!=0){
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f3      	bne.n	800293a <gfx_print+0xa>
	}
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <gfx_setTextSize1>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void gfx_setTextSize1(uint8_t s_x, uint8_t s_y) {
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	4613      	mov	r3, r2
 800296a:	71bb      	strb	r3, [r7, #6]
  textsize_x = (s_x > 0) ? s_x : 1;
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <gfx_setTextSize1+0x1a>
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	e000      	b.n	8002978 <gfx_setTextSize1+0x1c>
 8002976:	2301      	movs	r3, #1
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <gfx_setTextSize1+0x3c>)
 800297a:	7013      	strb	r3, [r2, #0]
  textsize_y = (s_y > 0) ? s_y : 1;
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <gfx_setTextSize1+0x2a>
 8002982:	79bb      	ldrb	r3, [r7, #6]
 8002984:	e000      	b.n	8002988 <gfx_setTextSize1+0x2c>
 8002986:	2301      	movs	r3, #1
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <gfx_setTextSize1+0x40>)
 800298a:	7013      	strb	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000090 	.word	0x20000090
 800299c:	200000c7 	.word	0x200000c7

080029a0 <gfx_setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void gfx_setFont(const GFXfont *f) {
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if (f) {          // Font struct pointer passed in?
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <gfx_setFont+0x2a>
    if (!gfxFont) { // And no current font struct?
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <gfx_setFont+0x54>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <gfx_setFont+0x44>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <gfx_setFont+0x58>)
 80029b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3306      	adds	r3, #6
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <gfx_setFont+0x58>)
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	e00c      	b.n	80029e4 <gfx_setFont+0x44>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <gfx_setFont+0x54>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <gfx_setFont+0x44>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <gfx_setFont+0x58>)
 80029d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b06      	subs	r3, #6
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21a      	sxth	r2, r3
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <gfx_setFont+0x58>)
 80029e2:	801a      	strh	r2, [r3, #0]
  }
  gfxFont = (GFXfont *)f;
 80029e4:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <gfx_setFont+0x54>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	2000008c 	.word	0x2000008c
 80029f8:	20000084 	.word	0x20000084

080029fc <gfx_btn_initButton>:
   @param    textsize The font magnification of the label text
*/
/**************************************************************************/
// Classic initButton() function: pass center & size
void gfx_btn_initButton(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t outline, uint16_t fill, uint16_t textcolor,
                                     char *label, uint8_t textsize) {
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af06      	add	r7, sp, #24
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	80fb      	strh	r3, [r7, #6]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80bb      	strh	r3, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	807b      	strh	r3, [r7, #2]
 8002a16:	4613      	mov	r3, r2
 8002a18:	803b      	strh	r3, [r7, #0]
  // Tweak arguments and pass to the newer initButtonUL() function...
	gfx_btn_initButtonUL( x - (w / 2), y - (h / 2), w, h, outline, fill, textcolor, label, textsize);
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b218      	sxth	r0, r3
 8002a28:	88ba      	ldrh	r2, [r7, #4]
 8002a2a:	883b      	ldrh	r3, [r7, #0]
 8002a2c:	085b      	lsrs	r3, r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b219      	sxth	r1, r3
 8002a36:	883c      	ldrh	r4, [r7, #0]
 8002a38:	887a      	ldrh	r2, [r7, #2]
 8002a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a3e:	9304      	str	r3, [sp, #16]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	9303      	str	r3, [sp, #12]
 8002a44:	8c3b      	ldrh	r3, [r7, #32]
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	8bbb      	ldrh	r3, [r7, #28]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	8b3b      	ldrh	r3, [r7, #24]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4623      	mov	r3, r4
 8002a52:	f000 f804 	bl	8002a5e <gfx_btn_initButtonUL>
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd90      	pop	{r4, r7, pc}

08002a5e <gfx_btn_initButtonUL>:
/**************************************************************************/
void gfx_btn_initButtonUL( int16_t x1,
                                       int16_t y1, uint16_t w, uint16_t h,
                                       uint16_t outline, uint16_t fill,
                                       uint16_t textcolor, char *label,
                                       uint8_t textsize) {
 8002a5e:	b590      	push	{r4, r7, lr}
 8002a60:	b089      	sub	sp, #36	; 0x24
 8002a62:	af06      	add	r7, sp, #24
 8002a64:	4604      	mov	r4, r0
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	80fb      	strh	r3, [r7, #6]
 8002a70:	4603      	mov	r3, r0
 8002a72:	80bb      	strh	r3, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	803b      	strh	r3, [r7, #0]
	gfx_btn_initButtonUL1( x1, y1, w, h, outline, fill, textcolor, label, textsize,
 8002a7c:	883c      	ldrh	r4, [r7, #0]
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a84:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a8c:	9305      	str	r3, [sp, #20]
 8002a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a92:	9304      	str	r3, [sp, #16]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	8c3b      	ldrh	r3, [r7, #32]
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	8bbb      	ldrh	r3, [r7, #28]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	8b3b      	ldrh	r3, [r7, #24]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	f000 f805 	bl	8002ab4 <gfx_btn_initButtonUL1>
               textsize);
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
	...

08002ab4 <gfx_btn_initButtonUL1>:
/**************************************************************************/
void gfx_btn_initButtonUL1( int16_t x1,
                                       int16_t y1, uint16_t w, uint16_t h,
                                       uint16_t outline, uint16_t fill,
                                       uint16_t textcolor, char *label,
                                       uint8_t textsize_x, uint8_t textsize_y) {
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4604      	mov	r4, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	80fb      	strh	r3, [r7, #6]
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80bb      	strh	r3, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	803b      	strh	r3, [r7, #0]
  _x1 = x1;
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <gfx_btn_initButtonUL1+0x6c>)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	8013      	strh	r3, [r2, #0]
  _y1 = y1;
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <gfx_btn_initButtonUL1+0x70>)
 8002ada:	88bb      	ldrh	r3, [r7, #4]
 8002adc:	8013      	strh	r3, [r2, #0]
  _w = w;
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <gfx_btn_initButtonUL1+0x74>)
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	8013      	strh	r3, [r2, #0]
  _h = h;
 8002ae4:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <gfx_btn_initButtonUL1+0x78>)
 8002ae6:	883b      	ldrh	r3, [r7, #0]
 8002ae8:	8013      	strh	r3, [r2, #0]
  _outlinecolor = outline;
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <gfx_btn_initButtonUL1+0x7c>)
 8002aec:	8b3b      	ldrh	r3, [r7, #24]
 8002aee:	8013      	strh	r3, [r2, #0]
  _fillcolor = fill;
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <gfx_btn_initButtonUL1+0x80>)
 8002af2:	8bbb      	ldrh	r3, [r7, #28]
 8002af4:	8013      	strh	r3, [r2, #0]
  _textcolor = textcolor;
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <gfx_btn_initButtonUL1+0x84>)
 8002af8:	8c3b      	ldrh	r3, [r7, #32]
 8002afa:	8013      	strh	r3, [r2, #0]
  _textsize_x = textsize_x;
 8002afc:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <gfx_btn_initButtonUL1+0x88>)
 8002afe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b02:	7013      	strb	r3, [r2, #0]
  _textsize_y = textsize_y;
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <gfx_btn_initButtonUL1+0x8c>)
 8002b06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b0a:	7013      	strb	r3, [r2, #0]

  strncpy(_label, label, 9);
 8002b0c:	2209      	movs	r2, #9
 8002b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <gfx_btn_initButtonUL1+0x90>)
 8002b12:	f002 fefd 	bl	8005910 <strncpy>
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd90      	pop	{r4, r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200000b6 	.word	0x200000b6
 8002b24:	200000ba 	.word	0x200000ba
 8002b28:	20000094 	.word	0x20000094
 8002b2c:	2000008a 	.word	0x2000008a
 8002b30:	20000088 	.word	0x20000088
 8002b34:	200000a4 	.word	0x200000a4
 8002b38:	200000b4 	.word	0x200000b4
 8002b3c:	20000086 	.word	0x20000086
 8002b40:	200000c2 	.word	0x200000c2
 8002b44:	20000098 	.word	0x20000098

08002b48 <gfx_btn_drawButton>:
   @brief    Draw the button on the screen
   @param    inverted Whether to draw with fill/text swapped to indicate
   'pressed'
*/
/**************************************************************************/
void gfx_btn_drawButton(bool inverted) {
 8002b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  uint16_t fill, outline, text;

  if (!inverted) {
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f083 0301 	eor.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <gfx_btn_drawButton+0x2a>
    fill = _fillcolor;
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <gfx_btn_drawButton+0x1c8>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	81fb      	strh	r3, [r7, #14]
    outline = _outlinecolor;
 8002b64:	4b6b      	ldr	r3, [pc, #428]	; (8002d14 <gfx_btn_drawButton+0x1cc>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	81bb      	strh	r3, [r7, #12]
    text = _textcolor;
 8002b6a:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <gfx_btn_drawButton+0x1d0>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	817b      	strh	r3, [r7, #10]
 8002b70:	e008      	b.n	8002b84 <gfx_btn_drawButton+0x3c>
  } else {
    fill = _textcolor;
 8002b72:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <gfx_btn_drawButton+0x1d0>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	81fb      	strh	r3, [r7, #14]
    outline = _outlinecolor;
 8002b78:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <gfx_btn_drawButton+0x1cc>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	81bb      	strh	r3, [r7, #12]
    text = _fillcolor;
 8002b7e:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <gfx_btn_drawButton+0x1c8>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	817b      	strh	r3, [r7, #10]
  }

  uint8_t r = min(_w, _h) / 4; // Corner radius
 8002b84:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <gfx_btn_drawButton+0x1d4>)
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <gfx_btn_drawButton+0x1d8>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <gfx_btn_drawButton+0x58>
 8002b90:	4b62      	ldr	r3, [pc, #392]	; (8002d1c <gfx_btn_drawButton+0x1d4>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da00      	bge.n	8002b9a <gfx_btn_drawButton+0x52>
 8002b98:	3303      	adds	r3, #3
 8002b9a:	109b      	asrs	r3, r3, #2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e006      	b.n	8002bae <gfx_btn_drawButton+0x66>
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <gfx_btn_drawButton+0x1d8>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	da00      	bge.n	8002baa <gfx_btn_drawButton+0x62>
 8002ba8:	3303      	adds	r3, #3
 8002baa:	109b      	asrs	r3, r3, #2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	727b      	strb	r3, [r7, #9]
  gfx_fillRoundRect(_x1, _y1, _w, _h, r, fill);
 8002bb0:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <gfx_btn_drawButton+0x1dc>)
 8002bb2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <gfx_btn_drawButton+0x1e0>)
 8002bb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002bbc:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <gfx_btn_drawButton+0x1d4>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b21c      	sxth	r4, r3
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <gfx_btn_drawButton+0x1d8>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b21d      	sxth	r5, r3
 8002bc8:	7a7b      	ldrb	r3, [r7, #9]
 8002bca:	b21b      	sxth	r3, r3
 8002bcc:	89fa      	ldrh	r2, [r7, #14]
 8002bce:	9201      	str	r2, [sp, #4]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	f7ff f90e 	bl	8001df6 <gfx_fillRoundRect>
  gfx_drawRoundRect(_x1, _y1, _w, _h, r, outline);
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <gfx_btn_drawButton+0x1dc>)
 8002bdc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <gfx_btn_drawButton+0x1e0>)
 8002be2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <gfx_btn_drawButton+0x1d4>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b21c      	sxth	r4, r3
 8002bec:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <gfx_btn_drawButton+0x1d8>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b21d      	sxth	r5, r3
 8002bf2:	7a7b      	ldrb	r3, [r7, #9]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	89ba      	ldrh	r2, [r7, #12]
 8002bf8:	9201      	str	r2, [sp, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	4622      	mov	r2, r4
 8002c00:	f7ff f828 	bl	8001c54 <gfx_drawRoundRect>

  gfx_setCursor(_x1 + (_w / 3.5) - (strlen(_label) * 3 * _textsize_x),
 8002c04:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <gfx_btn_drawButton+0x1dc>)
 8002c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fbfa 	bl	8000404 <__aeabi_i2d>
 8002c10:	4604      	mov	r4, r0
 8002c12:	460d      	mov	r5, r1
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <gfx_btn_drawButton+0x1d4>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fbf3 	bl	8000404 <__aeabi_i2d>
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <gfx_btn_drawButton+0x1e4>)
 8002c24:	f7fd fd82 	bl	800072c <__aeabi_ddiv>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4629      	mov	r1, r5
 8002c30:	f7fd fa9c 	bl	800016c <__adddf3>
 8002c34:	4603      	mov	r3, r0
 8002c36:	460c      	mov	r4, r1
 8002c38:	4625      	mov	r5, r4
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	483c      	ldr	r0, [pc, #240]	; (8002d30 <gfx_btn_drawButton+0x1e8>)
 8002c3e:	f7fd fa87 	bl	8000150 <strlen>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <gfx_btn_drawButton+0x1ec>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	fb03 f202 	mul.w	r2, r3, r2
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fbc6 	bl	80003e4 <__aeabi_ui2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fa82 	bl	8000168 <__aeabi_dsub>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f7fd fece 	bl	8000a0c <__aeabi_d2iz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b21c      	sxth	r4, r3
                  _y1 + (_h / 1.6) - (4 * _textsize_y));
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <gfx_btn_drawButton+0x1e0>)
 8002c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fbc2 	bl	8000404 <__aeabi_i2d>
 8002c80:	4605      	mov	r5, r0
 8002c82:	460e      	mov	r6, r1
 8002c84:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <gfx_btn_drawButton+0x1d8>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fbbb 	bl	8000404 <__aeabi_i2d>
 8002c8e:	a31e      	add	r3, pc, #120	; (adr r3, 8002d08 <gfx_btn_drawButton+0x1c0>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f7fd fd4a 	bl	800072c <__aeabi_ddiv>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	4631      	mov	r1, r6
 8002ca0:	f7fd fa64 	bl	800016c <__adddf3>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4615      	mov	r5, r2
 8002caa:	461e      	mov	r6, r3
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <gfx_btn_drawButton+0x1f0>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fba6 	bl	8000404 <__aeabi_i2d>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	4631      	mov	r1, r6
 8002cc0:	f7fd fa52 	bl	8000168 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
  gfx_setCursor(_x1 + (_w / 3.5) - (strlen(_label) * 3 * _textsize_x),
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7fd fe9e 	bl	8000a0c <__aeabi_d2iz>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7fe fa90 	bl	80011fc <gfx_setCursor>
  gfx_setTextColor(text);
 8002cdc:	897b      	ldrh	r3, [r7, #10]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe faa4 	bl	800122c <gfx_setTextColor>
  gfx_setTextSize1(_textsize_x, _textsize_y);
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <gfx_btn_drawButton+0x1ec>)
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <gfx_btn_drawButton+0x1f0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7ff fe34 	bl	800295c <gfx_setTextSize1>
  gfx_print(_label);
 8002cf4:	480e      	ldr	r0, [pc, #56]	; (8002d30 <gfx_btn_drawButton+0x1e8>)
 8002cf6:	f7ff fe1b 	bl	8002930 <gfx_print>
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	f3af 8000 	nop.w
 8002d08:	9999999a 	.word	0x9999999a
 8002d0c:	3ff99999 	.word	0x3ff99999
 8002d10:	200000a4 	.word	0x200000a4
 8002d14:	20000088 	.word	0x20000088
 8002d18:	200000b4 	.word	0x200000b4
 8002d1c:	20000094 	.word	0x20000094
 8002d20:	2000008a 	.word	0x2000008a
 8002d24:	200000b6 	.word	0x200000b6
 8002d28:	200000ba 	.word	0x200000ba
 8002d2c:	400c0000 	.word	0x400c0000
 8002d30:	20000098 	.word	0x20000098
 8002d34:	20000086 	.word	0x20000086
 8002d38:	200000c2 	.word	0x200000c2

08002d3c <LCD_write>:
//������ɫ,������ɫ
u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
u16 DeviceCode;	 

void LCD_write(u16 VAL)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
	//LCD_CS_CLR;
	DATAOUT(VAL);
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <LCD_write+0x2c>)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2104      	movs	r1, #4
 8002d50:	4806      	ldr	r0, [pc, #24]	; (8002d6c <LCD_write+0x30>)
 8002d52:	f001 fe6b 	bl	8004a2c <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8002d56:	2201      	movs	r2, #1
 8002d58:	2104      	movs	r1, #4
 8002d5a:	4804      	ldr	r0, [pc, #16]	; (8002d6c <LCD_write+0x30>)
 8002d5c:	f001 fe66 	bl	8004a2c <HAL_GPIO_WritePin>
	//LCD_CS_SET;
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40010c00 	.word	0x40010c00
 8002d6c:	40010800 	.word	0x40010800

08002d70 <LCD_WR_REG>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u16 data)
{ 
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
   LCD_RS_CLR;     
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4805      	ldr	r0, [pc, #20]	; (8002d94 <LCD_WR_REG+0x24>)
 8002d80:	f001 fe54 	bl	8004a2c <HAL_GPIO_WritePin>
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffd8 	bl	8002d3c <LCD_write>
	 #endif
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40010800 	.word	0x40010800

08002d98 <LCD_WR_DATA>:
 * @function   :Write an 16-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u16 data)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
	 LCD_RS_SET;
 8002da2:	2201      	movs	r2, #1
 8002da4:	2102      	movs	r1, #2
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <LCD_WR_DATA+0x24>)
 8002da8:	f001 fe40 	bl	8004a2c <HAL_GPIO_WritePin>
	 #if LCD_USE8BIT_MODEL
	 LCD_write(data<<8);
	 #else
	 LCD_write(data);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ffc4 	bl	8002d3c <LCD_write>
	 #endif
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010800 	.word	0x40010800

08002dc0 <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	80fb      	strh	r3, [r7, #6]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffcc 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8002dd8:	88bb      	ldrh	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffdc 	bl	8002d98 <LCD_WR_DATA>
}	   
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <LCD_WriteRAM_Prepare+0x14>)
 8002dee:	891b      	ldrh	r3, [r3, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ffbd 	bl	8002d70 <LCD_WR_REG>
}	 
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200000cc 	.word	0x200000cc

08002e00 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
   LCD_RS_SET; 
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <Lcd_WriteData_16Bit+0x24>)
 8002e10:	f001 fe0c 	bl	8004a2c <HAL_GPIO_WritePin>
		LCD_WR_SET;
		LCD_CS_SET;
 //  LCD_write(Data&0xFF00);
//	 LCD_write(Data<<8);
	 #else
	 LCD_write(Data);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff90 	bl	8002d3c <LCD_write>
	 #endif
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010800 	.word	0x40010800

08002e28 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  unsigned int i;//,m;  
  LCD_CS_CLR;
 8002e32:	2200      	movs	r2, #0
 8002e34:	2110      	movs	r1, #16
 8002e36:	4814      	ldr	r0, [pc, #80]	; (8002e88 <LCD_Clear+0x60>)
 8002e38:	f001 fdf8 	bl	8004a2c <HAL_GPIO_WritePin>
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <LCD_Clear+0x64>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <LCD_Clear+0x64>)
 8002e46:	885b      	ldrh	r3, [r3, #2]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f000 f91c 	bl	800308c <LCD_SetWindows>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e006      	b.n	8002e68 <LCD_Clear+0x40>
	{
 //   for(m=0;m<lcddev.width;m++)
  //  {	
			Lcd_WriteData_16Bit(Color);
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ffcf 	bl	8002e00 <Lcd_WriteData_16Bit>
	for(i=0;i<lcddev.height*lcddev.width;i++)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <LCD_Clear+0x64>)
 8002e6a:	885b      	ldrh	r3, [r3, #2]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <LCD_Clear+0x64>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	fb03 f302 	mul.w	r3, r3, r2
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d3ed      	bcc.n	8002e5a <LCD_Clear+0x32>
	//	}
	}
} 
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40010800 	.word	0x40010800
 8002e8c:	200000cc 	.word	0x200000cc

08002e90 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8002e94:	2200      	movs	r2, #0
 8002e96:	2108      	movs	r1, #8
 8002e98:	4807      	ldr	r0, [pc, #28]	; (8002eb8 <LCD_RESET+0x28>)
 8002e9a:	f001 fdc7 	bl	8004a2c <HAL_GPIO_WritePin>
	delay_ms(100);	
 8002e9e:	2064      	movs	r0, #100	; 0x64
 8002ea0:	f001 fac4 	bl	800442c <HAL_Delay>
	LCD_RST_SET;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2108      	movs	r1, #8
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <LCD_RESET+0x28>)
 8002eaa:	f001 fdbf 	bl	8004a2c <HAL_GPIO_WritePin>
	delay_ms(50);
 8002eae:	2032      	movs	r0, #50	; 0x32
 8002eb0:	f001 fabc 	bl	800442c <HAL_Delay>
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40010800 	.word	0x40010800

08002ebc <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	//LCD_GPIOInit();//LCD GPIO��ʼ��
 	LCD_RESET(); //LCD ��λ
 8002ec0:	f7ff ffe6 	bl	8002e90 <LCD_RESET>
//************* ILI9486��ʼ��**********//	
	LCD_WR_REG(0XF1);
 8002ec4:	20f1      	movs	r0, #241	; 0xf1
 8002ec6:	f7ff ff53 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x36);
 8002eca:	2036      	movs	r0, #54	; 0x36
 8002ecc:	f7ff ff64 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8002ed0:	2004      	movs	r0, #4
 8002ed2:	f7ff ff61 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff ff5e 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002edc:	203c      	movs	r0, #60	; 0x3c
 8002ede:	f7ff ff5b 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0X0F);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f7ff ff58 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x8F);
 8002ee8:	208f      	movs	r0, #143	; 0x8f
 8002eea:	f7ff ff55 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0XF2);
 8002eee:	20f2      	movs	r0, #242	; 0xf2
 8002ef0:	f7ff ff3e 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x18);
 8002ef4:	2018      	movs	r0, #24
 8002ef6:	f7ff ff4f 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0xA3);
 8002efa:	20a3      	movs	r0, #163	; 0xa3
 8002efc:	f7ff ff4c 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8002f00:	2012      	movs	r0, #18
 8002f02:	f7ff ff49 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7ff ff46 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0XB2);
 8002f0c:	20b2      	movs	r0, #178	; 0xb2
 8002f0e:	f7ff ff43 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8002f12:	2012      	movs	r0, #18
 8002f14:	f7ff ff40 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);
 8002f18:	20ff      	movs	r0, #255	; 0xff
 8002f1a:	f7ff ff3d 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002f1e:	2010      	movs	r0, #16
 8002f20:	f7ff ff3a 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff ff37 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0XF8);
 8002f2a:	20f8      	movs	r0, #248	; 0xf8
 8002f2c:	f7ff ff20 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x21);
 8002f30:	2021      	movs	r0, #33	; 0x21
 8002f32:	f7ff ff31 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8002f36:	2004      	movs	r0, #4
 8002f38:	f7ff ff2e 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0XF9);
 8002f3c:	20f9      	movs	r0, #249	; 0xf9
 8002f3e:	f7ff ff17 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7ff ff28 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002f48:	2008      	movs	r0, #8
 8002f4a:	f7ff ff25 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0x36);
 8002f4e:	2036      	movs	r0, #54	; 0x36
 8002f50:	f7ff ff0e 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 8002f54:	2008      	movs	r0, #8
 8002f56:	f7ff ff1f 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0xB4);
 8002f5a:	20b4      	movs	r0, #180	; 0xb4
 8002f5c:	f7ff ff08 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7ff ff19 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);
 8002f66:	20c1      	movs	r0, #193	; 0xc1
 8002f68:	f7ff ff02 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x41);
 8002f6c:	2041      	movs	r0, #65	; 0x41
 8002f6e:	f7ff ff13 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);
 8002f72:	20c5      	movs	r0, #197	; 0xc5
 8002f74:	f7ff fefc 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7ff ff0d 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x91);
 8002f7e:	2091      	movs	r0, #145	; 0x91
 8002f80:	f7ff ff0a 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x80);
 8002f84:	2080      	movs	r0, #128	; 0x80
 8002f86:	f7ff ff07 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7ff ff04 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);
 8002f90:	20e0      	movs	r0, #224	; 0xe0
 8002f92:	f7ff feed 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002f96:	200f      	movs	r0, #15
 8002f98:	f7ff fefe 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 8002f9c:	201f      	movs	r0, #31
 8002f9e:	f7ff fefb 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x1C);
 8002fa2:	201c      	movs	r0, #28
 8002fa4:	f7ff fef8 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8002fa8:	200c      	movs	r0, #12
 8002faa:	f7ff fef5 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002fae:	200f      	movs	r0, #15
 8002fb0:	f7ff fef2 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002fb4:	2008      	movs	r0, #8
 8002fb6:	f7ff feef 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 8002fba:	2048      	movs	r0, #72	; 0x48
 8002fbc:	f7ff feec 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x98);
 8002fc0:	2098      	movs	r0, #152	; 0x98
 8002fc2:	f7ff fee9 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8002fc6:	2037      	movs	r0, #55	; 0x37
 8002fc8:	f7ff fee6 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002fcc:	200a      	movs	r0, #10
 8002fce:	f7ff fee3 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x13);
 8002fd2:	2013      	movs	r0, #19
 8002fd4:	f7ff fee0 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8002fd8:	2004      	movs	r0, #4
 8002fda:	f7ff fedd 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002fde:	2011      	movs	r0, #17
 8002fe0:	f7ff feda 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8002fe4:	200d      	movs	r0, #13
 8002fe6:	f7ff fed7 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7ff fed4 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0xE1);
 8002ff0:	20e1      	movs	r0, #225	; 0xe1
 8002ff2:	f7ff febd 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002ff6:	200f      	movs	r0, #15
 8002ff8:	f7ff fece 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x32);
 8002ffc:	2032      	movs	r0, #50	; 0x32
 8002ffe:	f7ff fecb 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 8003002:	202e      	movs	r0, #46	; 0x2e
 8003004:	f7ff fec8 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8003008:	200b      	movs	r0, #11
 800300a:	f7ff fec5 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 800300e:	200d      	movs	r0, #13
 8003010:	f7ff fec2 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8003014:	2005      	movs	r0, #5
 8003016:	f7ff febf 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x47);
 800301a:	2047      	movs	r0, #71	; 0x47
 800301c:	f7ff febc 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x75);
 8003020:	2075      	movs	r0, #117	; 0x75
 8003022:	f7ff feb9 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8003026:	2037      	movs	r0, #55	; 0x37
 8003028:	f7ff feb6 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800302c:	2006      	movs	r0, #6
 800302e:	f7ff feb3 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8003032:	2010      	movs	r0, #16
 8003034:	f7ff feb0 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8003038:	2003      	movs	r0, #3
 800303a:	f7ff fead 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 800303e:	2024      	movs	r0, #36	; 0x24
 8003040:	f7ff feaa 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x20);
 8003044:	2020      	movs	r0, #32
 8003046:	f7ff fea7 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f7ff fea4 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8003050:	203a      	movs	r0, #58	; 0x3a
 8003052:	f7ff fe8d 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8003056:	2055      	movs	r0, #85	; 0x55
 8003058:	f7ff fe9e 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_REG(0x11);
 800305c:	2011      	movs	r0, #17
 800305e:	f7ff fe87 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_REG(0x36);
 8003062:	2036      	movs	r0, #54	; 0x36
 8003064:	f7ff fe84 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(0x28);
 8003068:	2028      	movs	r0, #40	; 0x28
 800306a:	f7ff fe95 	bl	8002d98 <LCD_WR_DATA>
	delay_ms(120);
 800306e:	2078      	movs	r0, #120	; 0x78
 8003070:	f001 f9dc 	bl	800442c <HAL_Delay>
	LCD_WR_REG(0x29);
 8003074:	2029      	movs	r0, #41	; 0x29
 8003076:	f7ff fe7b 	bl	8002d70 <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);//����LCD��ʾ����
 800307a:	2001      	movs	r0, #1
 800307c:	f000 f858 	bl	8003130 <LCD_direction>
//	LCD_LED=1;//��������	 
	LCD_Clear(GRAY);//��ȫ����ɫ
 8003080:	f248 4030 	movw	r0, #33840	; 0x8430
 8003084:	f7ff fed0 	bl	8002e28 <LCD_Clear>
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	461a      	mov	r2, r3
 800309a:	4623      	mov	r3, r4
 800309c:	80fb      	strh	r3, [r7, #6]
 800309e:	4603      	mov	r3, r0
 80030a0:	80bb      	strh	r3, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	807b      	strh	r3, [r7, #2]
 80030a6:	4613      	mov	r3, r2
 80030a8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <LCD_SetWindows+0xa0>)
 80030ac:	895b      	ldrh	r3, [r3, #10]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fe5e 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe6c 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fe66 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe60 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fe5a 	bl	8002d98 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <LCD_SetWindows+0xa0>)
 80030e6:	899b      	ldrh	r3, [r3, #12]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fe41 	bl	8002d70 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe4f 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 80030fa:	88bb      	ldrh	r3, [r7, #4]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe49 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 8003106:	883b      	ldrh	r3, [r7, #0]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fe43 	bl	8002d98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe3d 	bl	8002d98 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 800311e:	f7ff fe63 	bl	8002de8 <LCD_WriteRAM_Prepare>
}   
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	200000cc 	.word	0x200000cc

08003130 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 800313a:	4b28      	ldr	r3, [pc, #160]	; (80031dc <LCD_direction+0xac>)
 800313c:	222a      	movs	r2, #42	; 0x2a
 800313e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8003140:	4b26      	ldr	r3, [pc, #152]	; (80031dc <LCD_direction+0xac>)
 8003142:	222b      	movs	r2, #43	; 0x2b
 8003144:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <LCD_direction+0xac>)
 8003148:	222c      	movs	r2, #44	; 0x2c
 800314a:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d83e      	bhi.n	80031d0 <LCD_direction+0xa0>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <LCD_direction+0x28>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	08003169 	.word	0x08003169
 800315c:	08003183 	.word	0x08003183
 8003160:	0800319d 	.word	0x0800319d
 8003164:	080031b7 	.word	0x080031b7
		case 0:						 	 		
			lcddev.width=LCD_W;
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <LCD_direction+0xac>)
 800316a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800316e:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <LCD_direction+0xac>)
 8003172:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003176:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<6)|(1<<3));//0 degree MY=0,MX=0,MV=0,ML=0,BGR=1,MH=0
 8003178:	2148      	movs	r1, #72	; 0x48
 800317a:	2036      	movs	r0, #54	; 0x36
 800317c:	f7ff fe20 	bl	8002dc0 <LCD_WriteReg>
		break;
 8003180:	e027      	b.n	80031d2 <LCD_direction+0xa2>
		case 1:
			lcddev.width=LCD_H;
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <LCD_direction+0xac>)
 8003184:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003188:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <LCD_direction+0xac>)
 800318c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003190:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<4)|(1<<5));//90 degree MY=0,MX=1,MV=1,ML=1,BGR=1,MH=0
 8003192:	2138      	movs	r1, #56	; 0x38
 8003194:	2036      	movs	r0, #54	; 0x36
 8003196:	f7ff fe13 	bl	8002dc0 <LCD_WriteReg>
		break;
 800319a:	e01a      	b.n	80031d2 <LCD_direction+0xa2>
		case 2:						 	 		
			lcddev.width=LCD_W;
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <LCD_direction+0xac>)
 800319e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031a2:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 80031a4:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <LCD_direction+0xac>)
 80031a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031aa:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7));//180 degree MY=1,MX=1,MV=0,ML=0,BGR=1,MH=0
 80031ac:	2188      	movs	r1, #136	; 0x88
 80031ae:	2036      	movs	r0, #54	; 0x36
 80031b0:	f7ff fe06 	bl	8002dc0 <LCD_WriteReg>
		break;
 80031b4:	e00d      	b.n	80031d2 <LCD_direction+0xa2>
		case 3:
			lcddev.width=LCD_H;
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <LCD_direction+0xac>)
 80031b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031bc:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <LCD_direction+0xac>)
 80031c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031c4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6)|(1<<7));//270 degree MY=1,MX=0,MV=1,ML=0,BGR=1,MH=0
 80031c6:	21e8      	movs	r1, #232	; 0xe8
 80031c8:	2036      	movs	r0, #54	; 0x36
 80031ca:	f7ff fdf9 	bl	8002dc0 <LCD_WriteReg>
		break;	
 80031ce:	e000      	b.n	80031d2 <LCD_direction+0xa2>
		default:break;
 80031d0:	bf00      	nop
	}		
}	 
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200000cc 	.word	0x200000cc

080031e0 <ClearprocessAni>:
float angleF=0,angleValueX=0,angleValueY=0;
int aniAngle[8]={15,30,45,60,75,90};
int pHColor[4]={LIGHTGREEN,0x658C,0x36B9,BLUE};
uint16_t aniAnglePos=0;

void ClearprocessAni(int angle){
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, RED);
 80031e8:	4b87      	ldr	r3, [pc, #540]	; (8003408 <ClearprocessAni+0x228>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b218      	sxth	r0, r3
 80031ee:	4b87      	ldr	r3, [pc, #540]	; (800340c <ClearprocessAni+0x22c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	b219      	sxth	r1, r3
 80031f4:	4b86      	ldr	r3, [pc, #536]	; (8003410 <ClearprocessAni+0x230>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	4b86      	ldr	r3, [pc, #536]	; (8003414 <ClearprocessAni+0x234>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b21c      	sxth	r4, r3
 8003200:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4623      	mov	r3, r4
 8003208:	f7fe f9fa 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 800320c:	4b7e      	ldr	r3, [pc, #504]	; (8003408 <ClearprocessAni+0x228>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b218      	sxth	r0, r3
 8003212:	4b7e      	ldr	r3, [pc, #504]	; (800340c <ClearprocessAni+0x22c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	b29b      	uxth	r3, r3
 800321c:	b219      	sxth	r1, r3
 800321e:	4b7c      	ldr	r3, [pc, #496]	; (8003410 <ClearprocessAni+0x230>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b21a      	sxth	r2, r3
 8003224:	4b7b      	ldr	r3, [pc, #492]	; (8003414 <ClearprocessAni+0x234>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	3301      	adds	r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	b21c      	sxth	r4, r3
 8003230:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4623      	mov	r3, r4
 8003238:	f7fe f9e2 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 800323c:	4b72      	ldr	r3, [pc, #456]	; (8003408 <ClearprocessAni+0x228>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b218      	sxth	r0, r3
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <ClearprocessAni+0x22c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	b29b      	uxth	r3, r3
 800324c:	b219      	sxth	r1, r3
 800324e:	4b70      	ldr	r3, [pc, #448]	; (8003410 <ClearprocessAni+0x230>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	b21a      	sxth	r2, r3
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <ClearprocessAni+0x234>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	3301      	adds	r3, #1
 800325c:	b29b      	uxth	r3, r3
 800325e:	b21c      	sxth	r4, r3
 8003260:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4623      	mov	r3, r4
 8003268:	f7fe f9ca 	bl	8001600 <gfx_drawLine>

	angleF=((float)angle/180.0)*3.14;
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fd fcff 	bl	8000c70 <__aeabi_i2f>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f8d7 	bl	8000428 <__aeabi_f2d>
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <ClearprocessAni+0x238>)
 8003280:	f7fd fa54 	bl	800072c <__aeabi_ddiv>
 8003284:	4603      	mov	r3, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4618      	mov	r0, r3
 800328a:	4621      	mov	r1, r4
 800328c:	a35c      	add	r3, pc, #368	; (adr r3, 8003400 <ClearprocessAni+0x220>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fd f921 	bl	80004d8 <__aeabi_dmul>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	4618      	mov	r0, r3
 800329c:	4621      	mov	r1, r4
 800329e:	f7fd fbdd 	bl	8000a5c <__aeabi_d2f>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b5d      	ldr	r3, [pc, #372]	; (800341c <ClearprocessAni+0x23c>)
 80032a6:	601a      	str	r2, [r3, #0]

	angleValueX=25*cos(angleF);
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <ClearprocessAni+0x23c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f8bb 	bl	8000428 <__aeabi_f2d>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	4618      	mov	r0, r3
 80032b8:	4621      	mov	r1, r4
 80032ba:	f002 fb3f 	bl	800593c <cos>
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	4b57      	ldr	r3, [pc, #348]	; (8003420 <ClearprocessAni+0x240>)
 80032c4:	f7fd f908 	bl	80004d8 <__aeabi_dmul>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	4618      	mov	r0, r3
 80032ce:	4621      	mov	r1, r4
 80032d0:	f7fd fbc4 	bl	8000a5c <__aeabi_d2f>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <ClearprocessAni+0x244>)
 80032d8:	601a      	str	r2, [r3, #0]
	angleValueY=25*sin(angleF);
 80032da:	4b50      	ldr	r3, [pc, #320]	; (800341c <ClearprocessAni+0x23c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f8a2 	bl	8000428 <__aeabi_f2d>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	4618      	mov	r0, r3
 80032ea:	4621      	mov	r1, r4
 80032ec:	f002 fb5c 	bl	80059a8 <sin>
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <ClearprocessAni+0x240>)
 80032f6:	f7fd f8ef 	bl	80004d8 <__aeabi_dmul>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	4618      	mov	r0, r3
 8003300:	4621      	mov	r1, r4
 8003302:	f7fd fbab 	bl	8000a5c <__aeabi_d2f>
 8003306:	4602      	mov	r2, r0
 8003308:	4b47      	ldr	r3, [pc, #284]	; (8003428 <ClearprocessAni+0x248>)
 800330a:	601a      	str	r2, [r3, #0]

	crossX1=245+angleValueX;
 800330c:	4b45      	ldr	r3, [pc, #276]	; (8003424 <ClearprocessAni+0x244>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4946      	ldr	r1, [pc, #280]	; (800342c <ClearprocessAni+0x24c>)
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fbf8 	bl	8000b08 <__addsf3>
 8003318:	4603      	mov	r3, r0
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fe4c 	bl	8000fb8 <__aeabi_f2iz>
 8003320:	4602      	mov	r2, r0
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <ClearprocessAni+0x228>)
 8003324:	601a      	str	r2, [r3, #0]
	crossY1=170+angleValueY;
 8003326:	4b40      	ldr	r3, [pc, #256]	; (8003428 <ClearprocessAni+0x248>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4941      	ldr	r1, [pc, #260]	; (8003430 <ClearprocessAni+0x250>)
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fbeb 	bl	8000b08 <__addsf3>
 8003332:	4603      	mov	r3, r0
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fe3f 	bl	8000fb8 <__aeabi_f2iz>
 800333a:	4602      	mov	r2, r0
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <ClearprocessAni+0x22c>)
 800333e:	601a      	str	r2, [r3, #0]
	crossX2=245-angleValueX;
 8003340:	4b38      	ldr	r3, [pc, #224]	; (8003424 <ClearprocessAni+0x244>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	4839      	ldr	r0, [pc, #228]	; (800342c <ClearprocessAni+0x24c>)
 8003348:	f7fd fbdc 	bl	8000b04 <__aeabi_fsub>
 800334c:	4603      	mov	r3, r0
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fe32 	bl	8000fb8 <__aeabi_f2iz>
 8003354:	4602      	mov	r2, r0
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <ClearprocessAni+0x230>)
 8003358:	601a      	str	r2, [r3, #0]
	crossY2=170-angleValueY;
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <ClearprocessAni+0x248>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4619      	mov	r1, r3
 8003360:	4833      	ldr	r0, [pc, #204]	; (8003430 <ClearprocessAni+0x250>)
 8003362:	f7fd fbcf 	bl	8000b04 <__aeabi_fsub>
 8003366:	4603      	mov	r3, r0
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd fe25 	bl	8000fb8 <__aeabi_f2iz>
 800336e:	4602      	mov	r2, r0
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <ClearprocessAni+0x234>)
 8003372:	601a      	str	r2, [r3, #0]

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, RED);
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <ClearprocessAni+0x228>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b218      	sxth	r0, r3
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <ClearprocessAni+0x22c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b219      	sxth	r1, r3
 8003380:	4b23      	ldr	r3, [pc, #140]	; (8003410 <ClearprocessAni+0x230>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b21a      	sxth	r2, r3
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <ClearprocessAni+0x234>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b21c      	sxth	r4, r3
 800338c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4623      	mov	r3, r4
 8003394:	f7fe f934 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <ClearprocessAni+0x228>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b218      	sxth	r0, r3
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <ClearprocessAni+0x22c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b219      	sxth	r1, r3
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <ClearprocessAni+0x230>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <ClearprocessAni+0x234>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b21c      	sxth	r4, r3
 80033bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4623      	mov	r3, r4
 80033c4:	f7fe f91c 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, RED);
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <ClearprocessAni+0x228>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b218      	sxth	r0, r3
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <ClearprocessAni+0x22c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b219      	sxth	r1, r3
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <ClearprocessAni+0x230>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b21a      	sxth	r2, r3
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <ClearprocessAni+0x234>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b21c      	sxth	r4, r3
 80033ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4623      	mov	r3, r4
 80033f4:	f7fe f904 	bl	8001600 <gfx_drawLine>

}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	51eb851f 	.word	0x51eb851f
 8003404:	40091eb8 	.word	0x40091eb8
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004
 8003410:	20000008 	.word	0x20000008
 8003414:	2000000c 	.word	0x2000000c
 8003418:	40668000 	.word	0x40668000
 800341c:	20000068 	.word	0x20000068
 8003420:	40390000 	.word	0x40390000
 8003424:	2000006c 	.word	0x2000006c
 8003428:	20000070 	.word	0x20000070
 800342c:	43750000 	.word	0x43750000
 8003430:	432a0000 	.word	0x432a0000
 8003434:	00000000 	.word	0x00000000

08003438 <processAni>:

void processAni(int angle,int pos){
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af02      	add	r7, sp, #8
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	angleF=((float)angle/180.0)*3.14;
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fc14 	bl	8000c70 <__aeabi_i2f>
 8003448:	4603      	mov	r3, r0
 800344a:	4618      	mov	r0, r3
 800344c:	f7fc ffec 	bl	8000428 <__aeabi_f2d>
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	4bac      	ldr	r3, [pc, #688]	; (8003708 <processAni+0x2d0>)
 8003456:	f7fd f969 	bl	800072c <__aeabi_ddiv>
 800345a:	4603      	mov	r3, r0
 800345c:	460c      	mov	r4, r1
 800345e:	4618      	mov	r0, r3
 8003460:	4621      	mov	r1, r4
 8003462:	a3a7      	add	r3, pc, #668	; (adr r3, 8003700 <processAni+0x2c8>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fd f836 	bl	80004d8 <__aeabi_dmul>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	4618      	mov	r0, r3
 8003472:	4621      	mov	r1, r4
 8003474:	f7fd faf2 	bl	8000a5c <__aeabi_d2f>
 8003478:	4602      	mov	r2, r0
 800347a:	4ba4      	ldr	r3, [pc, #656]	; (800370c <processAni+0x2d4>)
 800347c:	601a      	str	r2, [r3, #0]

	angleValueX=25*cos(angleF);
 800347e:	4ba3      	ldr	r3, [pc, #652]	; (800370c <processAni+0x2d4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fc ffd0 	bl	8000428 <__aeabi_f2d>
 8003488:	4603      	mov	r3, r0
 800348a:	460c      	mov	r4, r1
 800348c:	4618      	mov	r0, r3
 800348e:	4621      	mov	r1, r4
 8003490:	f002 fa54 	bl	800593c <cos>
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	4b9d      	ldr	r3, [pc, #628]	; (8003710 <processAni+0x2d8>)
 800349a:	f7fd f81d 	bl	80004d8 <__aeabi_dmul>
 800349e:	4603      	mov	r3, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	4618      	mov	r0, r3
 80034a4:	4621      	mov	r1, r4
 80034a6:	f7fd fad9 	bl	8000a5c <__aeabi_d2f>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b99      	ldr	r3, [pc, #612]	; (8003714 <processAni+0x2dc>)
 80034ae:	601a      	str	r2, [r3, #0]
	angleValueY=25*sin(angleF);
 80034b0:	4b96      	ldr	r3, [pc, #600]	; (800370c <processAni+0x2d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fc ffb7 	bl	8000428 <__aeabi_f2d>
 80034ba:	4603      	mov	r3, r0
 80034bc:	460c      	mov	r4, r1
 80034be:	4618      	mov	r0, r3
 80034c0:	4621      	mov	r1, r4
 80034c2:	f002 fa71 	bl	80059a8 <sin>
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	4b91      	ldr	r3, [pc, #580]	; (8003710 <processAni+0x2d8>)
 80034cc:	f7fd f804 	bl	80004d8 <__aeabi_dmul>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	4618      	mov	r0, r3
 80034d6:	4621      	mov	r1, r4
 80034d8:	f7fd fac0 	bl	8000a5c <__aeabi_d2f>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b8e      	ldr	r3, [pc, #568]	; (8003718 <processAni+0x2e0>)
 80034e0:	601a      	str	r2, [r3, #0]

	crossX1=245+angleValueX;
 80034e2:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <processAni+0x2dc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	498d      	ldr	r1, [pc, #564]	; (800371c <processAni+0x2e4>)
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fb0d 	bl	8000b08 <__addsf3>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fd61 	bl	8000fb8 <__aeabi_f2iz>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b89      	ldr	r3, [pc, #548]	; (8003720 <processAni+0x2e8>)
 80034fa:	601a      	str	r2, [r3, #0]
	crossY1=170+angleValueY;
 80034fc:	4b86      	ldr	r3, [pc, #536]	; (8003718 <processAni+0x2e0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4988      	ldr	r1, [pc, #544]	; (8003724 <processAni+0x2ec>)
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fb00 	bl	8000b08 <__addsf3>
 8003508:	4603      	mov	r3, r0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fd54 	bl	8000fb8 <__aeabi_f2iz>
 8003510:	4602      	mov	r2, r0
 8003512:	4b85      	ldr	r3, [pc, #532]	; (8003728 <processAni+0x2f0>)
 8003514:	601a      	str	r2, [r3, #0]
	crossX2=245-angleValueX;
 8003516:	4b7f      	ldr	r3, [pc, #508]	; (8003714 <processAni+0x2dc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	487f      	ldr	r0, [pc, #508]	; (800371c <processAni+0x2e4>)
 800351e:	f7fd faf1 	bl	8000b04 <__aeabi_fsub>
 8003522:	4603      	mov	r3, r0
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd fd47 	bl	8000fb8 <__aeabi_f2iz>
 800352a:	4602      	mov	r2, r0
 800352c:	4b7f      	ldr	r3, [pc, #508]	; (800372c <processAni+0x2f4>)
 800352e:	601a      	str	r2, [r3, #0]
	crossY2=170-angleValueY;
 8003530:	4b79      	ldr	r3, [pc, #484]	; (8003718 <processAni+0x2e0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	487b      	ldr	r0, [pc, #492]	; (8003724 <processAni+0x2ec>)
 8003538:	f7fd fae4 	bl	8000b04 <__aeabi_fsub>
 800353c:	4603      	mov	r3, r0
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fd3a 	bl	8000fb8 <__aeabi_f2iz>
 8003544:	4602      	mov	r2, r0
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <processAni+0x2f8>)
 8003548:	601a      	str	r2, [r3, #0]

	//gfx_fillCircle(245, 170, 25, RED);

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, WHITE);
 800354a:	4b75      	ldr	r3, [pc, #468]	; (8003720 <processAni+0x2e8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b218      	sxth	r0, r3
 8003550:	4b75      	ldr	r3, [pc, #468]	; (8003728 <processAni+0x2f0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b219      	sxth	r1, r3
 8003556:	4b75      	ldr	r3, [pc, #468]	; (800372c <processAni+0x2f4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b21a      	sxth	r2, r3
 800355c:	4b74      	ldr	r3, [pc, #464]	; (8003730 <processAni+0x2f8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b21c      	sxth	r4, r3
 8003562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4623      	mov	r3, r4
 800356a:	f7fe f849 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800356e:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <processAni+0x2e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b218      	sxth	r0, r3
 8003574:	4b6c      	ldr	r3, [pc, #432]	; (8003728 <processAni+0x2f0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	b219      	sxth	r1, r3
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <processAni+0x2f4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b21a      	sxth	r2, r3
 8003586:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <processAni+0x2f8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	b21c      	sxth	r4, r3
 8003592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4623      	mov	r3, r4
 800359a:	f7fe f831 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800359e:	4b60      	ldr	r3, [pc, #384]	; (8003720 <processAni+0x2e8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	b218      	sxth	r0, r3
 80035a4:	4b60      	ldr	r3, [pc, #384]	; (8003728 <processAni+0x2f0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3301      	adds	r3, #1
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	b219      	sxth	r1, r3
 80035b0:	4b5e      	ldr	r3, [pc, #376]	; (800372c <processAni+0x2f4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b21a      	sxth	r2, r3
 80035b6:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <processAni+0x2f8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b21c      	sxth	r4, r3
 80035c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	4623      	mov	r3, r4
 80035ca:	f7fe f819 	bl	8001600 <gfx_drawLine>

	angleF=(((float)angle+90.0)/180.0)*3.14;
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fb4e 	bl	8000c70 <__aeabi_i2f>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ff26 	bl	8000428 <__aeabi_f2d>
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b54      	ldr	r3, [pc, #336]	; (8003734 <processAni+0x2fc>)
 80035e2:	f7fc fdc3 	bl	800016c <__adddf3>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	4618      	mov	r0, r3
 80035ec:	4621      	mov	r1, r4
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	4b45      	ldr	r3, [pc, #276]	; (8003708 <processAni+0x2d0>)
 80035f4:	f7fd f89a 	bl	800072c <__aeabi_ddiv>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	4618      	mov	r0, r3
 80035fe:	4621      	mov	r1, r4
 8003600:	a33f      	add	r3, pc, #252	; (adr r3, 8003700 <processAni+0x2c8>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc ff67 	bl	80004d8 <__aeabi_dmul>
 800360a:	4603      	mov	r3, r0
 800360c:	460c      	mov	r4, r1
 800360e:	4618      	mov	r0, r3
 8003610:	4621      	mov	r1, r4
 8003612:	f7fd fa23 	bl	8000a5c <__aeabi_d2f>
 8003616:	4602      	mov	r2, r0
 8003618:	4b3c      	ldr	r3, [pc, #240]	; (800370c <processAni+0x2d4>)
 800361a:	601a      	str	r2, [r3, #0]

	angleValueX=25*cos(angleF);
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <processAni+0x2d4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff01 	bl	8000428 <__aeabi_f2d>
 8003626:	4603      	mov	r3, r0
 8003628:	460c      	mov	r4, r1
 800362a:	4618      	mov	r0, r3
 800362c:	4621      	mov	r1, r4
 800362e:	f002 f985 	bl	800593c <cos>
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <processAni+0x2d8>)
 8003638:	f7fc ff4e 	bl	80004d8 <__aeabi_dmul>
 800363c:	4603      	mov	r3, r0
 800363e:	460c      	mov	r4, r1
 8003640:	4618      	mov	r0, r3
 8003642:	4621      	mov	r1, r4
 8003644:	f7fd fa0a 	bl	8000a5c <__aeabi_d2f>
 8003648:	4602      	mov	r2, r0
 800364a:	4b32      	ldr	r3, [pc, #200]	; (8003714 <processAni+0x2dc>)
 800364c:	601a      	str	r2, [r3, #0]
	angleValueY=25*sin(angleF);
 800364e:	4b2f      	ldr	r3, [pc, #188]	; (800370c <processAni+0x2d4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc fee8 	bl	8000428 <__aeabi_f2d>
 8003658:	4603      	mov	r3, r0
 800365a:	460c      	mov	r4, r1
 800365c:	4618      	mov	r0, r3
 800365e:	4621      	mov	r1, r4
 8003660:	f002 f9a2 	bl	80059a8 <sin>
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <processAni+0x2d8>)
 800366a:	f7fc ff35 	bl	80004d8 <__aeabi_dmul>
 800366e:	4603      	mov	r3, r0
 8003670:	460c      	mov	r4, r1
 8003672:	4618      	mov	r0, r3
 8003674:	4621      	mov	r1, r4
 8003676:	f7fd f9f1 	bl	8000a5c <__aeabi_d2f>
 800367a:	4602      	mov	r2, r0
 800367c:	4b26      	ldr	r3, [pc, #152]	; (8003718 <processAni+0x2e0>)
 800367e:	601a      	str	r2, [r3, #0]

	crossX1=245+angleValueX;
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <processAni+0x2dc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4925      	ldr	r1, [pc, #148]	; (800371c <processAni+0x2e4>)
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fa3e 	bl	8000b08 <__addsf3>
 800368c:	4603      	mov	r3, r0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fc92 	bl	8000fb8 <__aeabi_f2iz>
 8003694:	4602      	mov	r2, r0
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <processAni+0x2e8>)
 8003698:	601a      	str	r2, [r3, #0]
	crossY1=170+angleValueY;
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <processAni+0x2e0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4921      	ldr	r1, [pc, #132]	; (8003724 <processAni+0x2ec>)
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd fa31 	bl	8000b08 <__addsf3>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fc85 	bl	8000fb8 <__aeabi_f2iz>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <processAni+0x2f0>)
 80036b2:	601a      	str	r2, [r3, #0]
	crossX2=245-angleValueX;
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <processAni+0x2dc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	4818      	ldr	r0, [pc, #96]	; (800371c <processAni+0x2e4>)
 80036bc:	f7fd fa22 	bl	8000b04 <__aeabi_fsub>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fc78 	bl	8000fb8 <__aeabi_f2iz>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <processAni+0x2f4>)
 80036cc:	601a      	str	r2, [r3, #0]
	crossY2=170-angleValueY;
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <processAni+0x2e0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4813      	ldr	r0, [pc, #76]	; (8003724 <processAni+0x2ec>)
 80036d6:	f7fd fa15 	bl	8000b04 <__aeabi_fsub>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fc6b 	bl	8000fb8 <__aeabi_f2iz>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <processAni+0x2f8>)
 80036e6:	601a      	str	r2, [r3, #0]

	gfx_drawLine(crossX1, crossY1, crossX2, crossY2, WHITE);
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <processAni+0x2e8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b218      	sxth	r0, r3
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <processAni+0x2f0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b219      	sxth	r1, r3
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <processAni+0x2f4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b21a      	sxth	r2, r3
 80036fa:	e01d      	b.n	8003738 <processAni+0x300>
 80036fc:	f3af 8000 	nop.w
 8003700:	51eb851f 	.word	0x51eb851f
 8003704:	40091eb8 	.word	0x40091eb8
 8003708:	40668000 	.word	0x40668000
 800370c:	20000068 	.word	0x20000068
 8003710:	40390000 	.word	0x40390000
 8003714:	2000006c 	.word	0x2000006c
 8003718:	20000070 	.word	0x20000070
 800371c:	43750000 	.word	0x43750000
 8003720:	20000000 	.word	0x20000000
 8003724:	432a0000 	.word	0x432a0000
 8003728:	20000004 	.word	0x20000004
 800372c:	20000008 	.word	0x20000008
 8003730:	2000000c 	.word	0x2000000c
 8003734:	40568000 	.word	0x40568000
 8003738:	4b7f      	ldr	r3, [pc, #508]	; (8003938 <processAni+0x500>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b21c      	sxth	r4, r3
 800373e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4623      	mov	r3, r4
 8003746:	f7fd ff5b 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800374a:	4b7c      	ldr	r3, [pc, #496]	; (800393c <processAni+0x504>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	b218      	sxth	r0, r3
 8003750:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <processAni+0x508>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	3301      	adds	r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	b219      	sxth	r1, r3
 800375c:	4b79      	ldr	r3, [pc, #484]	; (8003944 <processAni+0x50c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b21a      	sxth	r2, r3
 8003762:	4b75      	ldr	r3, [pc, #468]	; (8003938 <processAni+0x500>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	b29b      	uxth	r3, r3
 800376c:	b21c      	sxth	r4, r3
 800376e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4623      	mov	r3, r4
 8003776:	f7fd ff43 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(crossX1, crossY1+1, crossX2, crossY2+1, WHITE);
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <processAni+0x504>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	b218      	sxth	r0, r3
 8003780:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <processAni+0x508>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	3301      	adds	r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	b219      	sxth	r1, r3
 800378c:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <processAni+0x50c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	b21a      	sxth	r2, r3
 8003792:	4b69      	ldr	r3, [pc, #420]	; (8003938 <processAni+0x500>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	b21c      	sxth	r4, r3
 800379e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4623      	mov	r3, r4
 80037a6:	f7fd ff2b 	bl	8001600 <gfx_drawLine>

	static int test=0;
	if(test==0){
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <processAni+0x510>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 80ce 	bne.w	8003950 <processAni+0x518>
		test=1;
 80037b4:	4b64      	ldr	r3, [pc, #400]	; (8003948 <processAni+0x510>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
		gfx_drawLine(238, 240, 238, 245, BLACK);
 80037ba:	2300      	movs	r3, #0
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	23f5      	movs	r3, #245	; 0xf5
 80037c0:	22ee      	movs	r2, #238	; 0xee
 80037c2:	21f0      	movs	r1, #240	; 0xf0
 80037c4:	20ee      	movs	r0, #238	; 0xee
 80037c6:	f7fd ff1b 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 250, 238, 255, BLACK);
 80037ca:	2300      	movs	r3, #0
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	23ff      	movs	r3, #255	; 0xff
 80037d0:	22ee      	movs	r2, #238	; 0xee
 80037d2:	21fa      	movs	r1, #250	; 0xfa
 80037d4:	20ee      	movs	r0, #238	; 0xee
 80037d6:	f7fd ff13 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 260, 238, 265, BLACK);
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	f240 1309 	movw	r3, #265	; 0x109
 80037e2:	22ee      	movs	r2, #238	; 0xee
 80037e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037e8:	20ee      	movs	r0, #238	; 0xee
 80037ea:	f7fd ff09 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(246, 235, 246, 240, BLACK);
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	23f0      	movs	r3, #240	; 0xf0
 80037f4:	22f6      	movs	r2, #246	; 0xf6
 80037f6:	21eb      	movs	r1, #235	; 0xeb
 80037f8:	20f6      	movs	r0, #246	; 0xf6
 80037fa:	f7fd ff01 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 245, 246, 250, BLACK);
 80037fe:	2300      	movs	r3, #0
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	23fa      	movs	r3, #250	; 0xfa
 8003804:	22f6      	movs	r2, #246	; 0xf6
 8003806:	21f5      	movs	r1, #245	; 0xf5
 8003808:	20f6      	movs	r0, #246	; 0xf6
 800380a:	f7fd fef9 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 255, 246, 260, BLACK);
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003816:	22f6      	movs	r2, #246	; 0xf6
 8003818:	21ff      	movs	r1, #255	; 0xff
 800381a:	20f6      	movs	r0, #246	; 0xf6
 800381c:	f7fd fef0 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(254, 240, 254, 245, BLACK);
 8003820:	2300      	movs	r3, #0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	23f5      	movs	r3, #245	; 0xf5
 8003826:	22fe      	movs	r2, #254	; 0xfe
 8003828:	21f0      	movs	r1, #240	; 0xf0
 800382a:	20fe      	movs	r0, #254	; 0xfe
 800382c:	f7fd fee8 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 250, 254, 255, BLACK);
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	23ff      	movs	r3, #255	; 0xff
 8003836:	22fe      	movs	r2, #254	; 0xfe
 8003838:	21fa      	movs	r1, #250	; 0xfa
 800383a:	20fe      	movs	r0, #254	; 0xfe
 800383c:	f7fd fee0 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 260, 254, 265, BLACK);
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	f240 1309 	movw	r3, #265	; 0x109
 8003848:	22fe      	movs	r2, #254	; 0xfe
 800384a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800384e:	20fe      	movs	r0, #254	; 0xfe
 8003850:	f7fd fed6 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(238, 235, 238, 240, pHColor[pos]);
 8003854:	4a3d      	ldr	r2, [pc, #244]	; (800394c <processAni+0x514>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	23f0      	movs	r3, #240	; 0xf0
 8003862:	22ee      	movs	r2, #238	; 0xee
 8003864:	21eb      	movs	r1, #235	; 0xeb
 8003866:	20ee      	movs	r0, #238	; 0xee
 8003868:	f7fd feca 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 245, 238, 250, pHColor[pos]);
 800386c:	4a37      	ldr	r2, [pc, #220]	; (800394c <processAni+0x514>)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	b29b      	uxth	r3, r3
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	23fa      	movs	r3, #250	; 0xfa
 800387a:	22ee      	movs	r2, #238	; 0xee
 800387c:	21f5      	movs	r1, #245	; 0xf5
 800387e:	20ee      	movs	r0, #238	; 0xee
 8003880:	f7fd febe 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 255, 238, 260, pHColor[pos]);
 8003884:	4a31      	ldr	r2, [pc, #196]	; (800394c <processAni+0x514>)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388c:	b29b      	uxth	r3, r3
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003894:	22ee      	movs	r2, #238	; 0xee
 8003896:	21ff      	movs	r1, #255	; 0xff
 8003898:	20ee      	movs	r0, #238	; 0xee
 800389a:	f7fd feb1 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(246, 240, 246, 245, pHColor[pos]);
 800389e:	4a2b      	ldr	r2, [pc, #172]	; (800394c <processAni+0x514>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	23f5      	movs	r3, #245	; 0xf5
 80038ac:	22f6      	movs	r2, #246	; 0xf6
 80038ae:	21f0      	movs	r1, #240	; 0xf0
 80038b0:	20f6      	movs	r0, #246	; 0xf6
 80038b2:	f7fd fea5 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 250, 246, 255, pHColor[pos]);
 80038b6:	4a25      	ldr	r2, [pc, #148]	; (800394c <processAni+0x514>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	23ff      	movs	r3, #255	; 0xff
 80038c4:	22f6      	movs	r2, #246	; 0xf6
 80038c6:	21fa      	movs	r1, #250	; 0xfa
 80038c8:	20f6      	movs	r0, #246	; 0xf6
 80038ca:	f7fd fe99 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 260, 246, 266, pHColor[pos]);
 80038ce:	4a1f      	ldr	r2, [pc, #124]	; (800394c <processAni+0x514>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80038de:	22f6      	movs	r2, #246	; 0xf6
 80038e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038e4:	20f6      	movs	r0, #246	; 0xf6
 80038e6:	f7fd fe8b 	bl	8001600 <gfx_drawLine>

		gfx_drawLine(254, 235, 254, 240, pHColor[pos]);
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <processAni+0x514>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	23f0      	movs	r3, #240	; 0xf0
 80038f8:	22fe      	movs	r2, #254	; 0xfe
 80038fa:	21eb      	movs	r1, #235	; 0xeb
 80038fc:	20fe      	movs	r0, #254	; 0xfe
 80038fe:	f7fd fe7f 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 245, 254, 250, pHColor[pos]);
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <processAni+0x514>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	b29b      	uxth	r3, r3
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	23fa      	movs	r3, #250	; 0xfa
 8003910:	22fe      	movs	r2, #254	; 0xfe
 8003912:	21f5      	movs	r1, #245	; 0xf5
 8003914:	20fe      	movs	r0, #254	; 0xfe
 8003916:	f7fd fe73 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 255, 254, 260, pHColor[pos]);
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <processAni+0x514>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003922:	b29b      	uxth	r3, r3
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f44f 7382 	mov.w	r3, #260	; 0x104
 800392a:	22fe      	movs	r2, #254	; 0xfe
 800392c:	21ff      	movs	r1, #255	; 0xff
 800392e:	20fe      	movs	r0, #254	; 0xfe
 8003930:	f7fd fe66 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 250, 254, 255, pHColor[pos]);
		gfx_drawLine(254, 260, 254, 265, pHColor[pos]);
	}


}
 8003934:	e0cc      	b.n	8003ad0 <processAni+0x698>
 8003936:	bf00      	nop
 8003938:	2000000c 	.word	0x2000000c
 800393c:	20000000 	.word	0x20000000
 8003940:	20000004 	.word	0x20000004
 8003944:	20000008 	.word	0x20000008
 8003948:	20000078 	.word	0x20000078
 800394c:	20000030 	.word	0x20000030
		test=0;
 8003950:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <processAni+0x6a0>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
		gfx_drawLine(238, 235, 238, 240, BLACK);
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	23f0      	movs	r3, #240	; 0xf0
 800395c:	22ee      	movs	r2, #238	; 0xee
 800395e:	21eb      	movs	r1, #235	; 0xeb
 8003960:	20ee      	movs	r0, #238	; 0xee
 8003962:	f7fd fe4d 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 245, 238, 250, BLACK);
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	23fa      	movs	r3, #250	; 0xfa
 800396c:	22ee      	movs	r2, #238	; 0xee
 800396e:	21f5      	movs	r1, #245	; 0xf5
 8003970:	20ee      	movs	r0, #238	; 0xee
 8003972:	f7fd fe45 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 255, 238, 260, BLACK);
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800397e:	22ee      	movs	r2, #238	; 0xee
 8003980:	21ff      	movs	r1, #255	; 0xff
 8003982:	20ee      	movs	r0, #238	; 0xee
 8003984:	f7fd fe3c 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 240, 246, 245, BLACK);
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	23f5      	movs	r3, #245	; 0xf5
 800398e:	22f6      	movs	r2, #246	; 0xf6
 8003990:	21f0      	movs	r1, #240	; 0xf0
 8003992:	20f6      	movs	r0, #246	; 0xf6
 8003994:	f7fd fe34 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 250, 246, 255, BLACK);
 8003998:	2300      	movs	r3, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	23ff      	movs	r3, #255	; 0xff
 800399e:	22f6      	movs	r2, #246	; 0xf6
 80039a0:	21fa      	movs	r1, #250	; 0xfa
 80039a2:	20f6      	movs	r0, #246	; 0xf6
 80039a4:	f7fd fe2c 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 260, 246, 266, BLACK);
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80039b0:	22f6      	movs	r2, #246	; 0xf6
 80039b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039b6:	20f6      	movs	r0, #246	; 0xf6
 80039b8:	f7fd fe22 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 235, 254, 240, BLACK);
 80039bc:	2300      	movs	r3, #0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	23f0      	movs	r3, #240	; 0xf0
 80039c2:	22fe      	movs	r2, #254	; 0xfe
 80039c4:	21eb      	movs	r1, #235	; 0xeb
 80039c6:	20fe      	movs	r0, #254	; 0xfe
 80039c8:	f7fd fe1a 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 245, 254, 250, BLACK);
 80039cc:	2300      	movs	r3, #0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	23fa      	movs	r3, #250	; 0xfa
 80039d2:	22fe      	movs	r2, #254	; 0xfe
 80039d4:	21f5      	movs	r1, #245	; 0xf5
 80039d6:	20fe      	movs	r0, #254	; 0xfe
 80039d8:	f7fd fe12 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 255, 254, 260, BLACK);
 80039dc:	2300      	movs	r3, #0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039e4:	22fe      	movs	r2, #254	; 0xfe
 80039e6:	21ff      	movs	r1, #255	; 0xff
 80039e8:	20fe      	movs	r0, #254	; 0xfe
 80039ea:	f7fd fe09 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 240, 238, 245, pHColor[pos]);
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <processAni+0x6a4>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	23f5      	movs	r3, #245	; 0xf5
 80039fc:	22ee      	movs	r2, #238	; 0xee
 80039fe:	21f0      	movs	r1, #240	; 0xf0
 8003a00:	20ee      	movs	r0, #238	; 0xee
 8003a02:	f7fd fdfd 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 250, 238, 255, pHColor[pos]);
 8003a06:	4a35      	ldr	r2, [pc, #212]	; (8003adc <processAni+0x6a4>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	23ff      	movs	r3, #255	; 0xff
 8003a14:	22ee      	movs	r2, #238	; 0xee
 8003a16:	21fa      	movs	r1, #250	; 0xfa
 8003a18:	20ee      	movs	r0, #238	; 0xee
 8003a1a:	f7fd fdf1 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(238, 260, 238, 265, pHColor[pos]);
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <processAni+0x6a4>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f240 1309 	movw	r3, #265	; 0x109
 8003a2e:	22ee      	movs	r2, #238	; 0xee
 8003a30:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a34:	20ee      	movs	r0, #238	; 0xee
 8003a36:	f7fd fde3 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 235, 246, 240, pHColor[pos]);
 8003a3a:	4a28      	ldr	r2, [pc, #160]	; (8003adc <processAni+0x6a4>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	23f0      	movs	r3, #240	; 0xf0
 8003a48:	22f6      	movs	r2, #246	; 0xf6
 8003a4a:	21eb      	movs	r1, #235	; 0xeb
 8003a4c:	20f6      	movs	r0, #246	; 0xf6
 8003a4e:	f7fd fdd7 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 245, 246, 250, pHColor[pos]);
 8003a52:	4a22      	ldr	r2, [pc, #136]	; (8003adc <processAni+0x6a4>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	23fa      	movs	r3, #250	; 0xfa
 8003a60:	22f6      	movs	r2, #246	; 0xf6
 8003a62:	21f5      	movs	r1, #245	; 0xf5
 8003a64:	20f6      	movs	r0, #246	; 0xf6
 8003a66:	f7fd fdcb 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(246, 255, 246, 260, pHColor[pos]);
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <processAni+0x6a4>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a7a:	22f6      	movs	r2, #246	; 0xf6
 8003a7c:	21ff      	movs	r1, #255	; 0xff
 8003a7e:	20f6      	movs	r0, #246	; 0xf6
 8003a80:	f7fd fdbe 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 240, 254, 245, pHColor[pos]);
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <processAni+0x6a4>)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	23f5      	movs	r3, #245	; 0xf5
 8003a92:	22fe      	movs	r2, #254	; 0xfe
 8003a94:	21f0      	movs	r1, #240	; 0xf0
 8003a96:	20fe      	movs	r0, #254	; 0xfe
 8003a98:	f7fd fdb2 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 250, 254, 255, pHColor[pos]);
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <processAni+0x6a4>)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	23ff      	movs	r3, #255	; 0xff
 8003aaa:	22fe      	movs	r2, #254	; 0xfe
 8003aac:	21fa      	movs	r1, #250	; 0xfa
 8003aae:	20fe      	movs	r0, #254	; 0xfe
 8003ab0:	f7fd fda6 	bl	8001600 <gfx_drawLine>
		gfx_drawLine(254, 260, 254, 265, pHColor[pos]);
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <processAni+0x6a4>)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	f240 1309 	movw	r3, #265	; 0x109
 8003ac4:	22fe      	movs	r2, #254	; 0xfe
 8003ac6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003aca:	20fe      	movs	r0, #254	; 0xfe
 8003acc:	f7fd fd98 	bl	8001600 <gfx_drawLine>
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	20000078 	.word	0x20000078
 8003adc:	20000030 	.word	0x20000030

08003ae0 <destroyTap>:

void destroyTap(int pos){
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af06      	add	r7, sp, #24
 8003ae6:	6078      	str	r0, [r7, #4]

	switch(pos){
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	f200 8090 	bhi.w	8003c10 <destroyTap+0x130>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <destroyTap+0x18>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b09 	.word	0x08003b09
 8003afc:	08003b49 	.word	0x08003b49
 8003b00:	08003b8f 	.word	0x08003b8f
 8003b04:	08003bcf 	.word	0x08003bcf
			case 0: gfx_FillRectWithAngle(220,150,40,10,210, BLACK);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	23d2      	movs	r3, #210	; 0xd2
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	230a      	movs	r3, #10
 8003b12:	2228      	movs	r2, #40	; 0x28
 8003b14:	2196      	movs	r1, #150	; 0x96
 8003b16:	20dc      	movs	r0, #220	; 0xdc
 8003b18:	f7fe fafe 	bl	8002118 <gfx_FillRectWithAngle>
					gfx_btn_initButton(120,120,150,80,BLACK,LIGHTGREEN,WHITE,"pH 8",1);
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	9304      	str	r3, [sp, #16]
 8003b20:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <destroyTap+0x13c>)
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b28:	9302      	str	r3, [sp, #8]
 8003b2a:	f248 431f 	movw	r3, #33823	; 0x841f
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2350      	movs	r3, #80	; 0x50
 8003b36:	2296      	movs	r2, #150	; 0x96
 8003b38:	2178      	movs	r1, #120	; 0x78
 8003b3a:	2078      	movs	r0, #120	; 0x78
 8003b3c:	f7fe ff5e 	bl	80029fc <gfx_btn_initButton>
					gfx_btn_drawButton(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7ff f801 	bl	8002b48 <gfx_btn_drawButton>
					break;
 8003b46:	e064      	b.n	8003c12 <destroyTap+0x132>
			case 1: gfx_FillRectWithAngle(265,150,40,10,330, BLACK);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	230a      	movs	r3, #10
 8003b54:	2228      	movs	r2, #40	; 0x28
 8003b56:	2196      	movs	r1, #150	; 0x96
 8003b58:	f240 1009 	movw	r0, #265	; 0x109
 8003b5c:	f7fe fadc 	bl	8002118 <gfx_FillRectWithAngle>
					gfx_btn_initButton(370,120,150,80,BLACK,0x658C,WHITE,"pH 9",1);
 8003b60:	2301      	movs	r3, #1
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <destroyTap+0x140>)
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b6c:	9302      	str	r3, [sp, #8]
 8003b6e:	f246 538c 	movw	r3, #25996	; 0x658c
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2350      	movs	r3, #80	; 0x50
 8003b7a:	2296      	movs	r2, #150	; 0x96
 8003b7c:	2178      	movs	r1, #120	; 0x78
 8003b7e:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003b82:	f7fe ff3b 	bl	80029fc <gfx_btn_initButton>
					gfx_btn_drawButton(0);
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7fe ffde 	bl	8002b48 <gfx_btn_drawButton>
					break;
 8003b8c:	e041      	b.n	8003c12 <destroyTap+0x132>
			case 2: gfx_FillRectWithAngle(210,180,40,10,150, BLACK);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2396      	movs	r3, #150	; 0x96
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	230a      	movs	r3, #10
 8003b98:	2228      	movs	r2, #40	; 0x28
 8003b9a:	21b4      	movs	r1, #180	; 0xb4
 8003b9c:	20d2      	movs	r0, #210	; 0xd2
 8003b9e:	f7fe fabb 	bl	8002118 <gfx_FillRectWithAngle>
		  	  		gfx_btn_initButton(120,230,150,80,BLACK,0x36B9,WHITE,"pH 10",1);
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	9304      	str	r3, [sp, #16]
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <destroyTap+0x144>)
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	f243 63b9 	movw	r3, #14009	; 0x36b9
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2350      	movs	r3, #80	; 0x50
 8003bbc:	2296      	movs	r2, #150	; 0x96
 8003bbe:	21e6      	movs	r1, #230	; 0xe6
 8003bc0:	2078      	movs	r0, #120	; 0x78
 8003bc2:	f7fe ff1b 	bl	80029fc <gfx_btn_initButton>
			  	  	gfx_btn_drawButton(0);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7fe ffbe 	bl	8002b48 <gfx_btn_drawButton>
			  	  	break;
 8003bcc:	e021      	b.n	8003c12 <destroyTap+0x132>
			case 3: gfx_FillRectWithAngle(270,190,40,10,30, BLACK);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	231e      	movs	r3, #30
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	2228      	movs	r2, #40	; 0x28
 8003bda:	21be      	movs	r1, #190	; 0xbe
 8003bdc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003be0:	f7fe fa9a 	bl	8002118 <gfx_FillRectWithAngle>
					gfx_btn_initButton(370,230,150,80,BLACK,BLUE,WHITE,"pH 11",1);
 8003be4:	2301      	movs	r3, #1
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <destroyTap+0x148>)
 8003bea:	9303      	str	r3, [sp, #12]
 8003bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	231f      	movs	r3, #31
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2350      	movs	r3, #80	; 0x50
 8003bfc:	2296      	movs	r2, #150	; 0x96
 8003bfe:	21e6      	movs	r1, #230	; 0xe6
 8003c00:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003c04:	f7fe fefa 	bl	80029fc <gfx_btn_initButton>
					gfx_btn_drawButton(0);
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7fe ff9d 	bl	8002b48 <gfx_btn_drawButton>
					break;
 8003c0e:	e000      	b.n	8003c12 <destroyTap+0x132>
			default: break;
 8003c10:	bf00      	nop
		}
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08006998 	.word	0x08006998
 8003c20:	080069a0 	.word	0x080069a0
 8003c24:	080069a8 	.word	0x080069a8
 8003c28:	080069b0 	.word	0x080069b0

08003c2c <createTap>:

void createTap(uint8_t pos){
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
	gfx_fillCircle(245, 170, 35, pHColor[pos]);
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4a71      	ldr	r2, [pc, #452]	; (8003e00 <createTap+0x1d4>)
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2223      	movs	r2, #35	; 0x23
 8003c42:	21aa      	movs	r1, #170	; 0xaa
 8003c44:	20f5      	movs	r0, #245	; 0xf5
 8003c46:	f7fd ff03 	bl	8001a50 <gfx_fillCircle>
	gfx_drawCircle(245, 170, 25, WHITE);
 8003c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4e:	2219      	movs	r2, #25
 8003c50:	21aa      	movs	r1, #170	; 0xaa
 8003c52:	20f5      	movs	r0, #245	; 0xf5
 8003c54:	f7fd fd3a 	bl	80016cc <gfx_drawCircle>
	gfx_fillCircle(245, 170, 25, RED);
 8003c58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c5c:	2219      	movs	r2, #25
 8003c5e:	21aa      	movs	r1, #170	; 0xaa
 8003c60:	20f5      	movs	r0, #245	; 0xf5
 8003c62:	f7fd fef5 	bl	8001a50 <gfx_fillCircle>
	gfx_drawCircle(245, 170, 26, WHITE);
 8003c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6a:	221a      	movs	r2, #26
 8003c6c:	21aa      	movs	r1, #170	; 0xaa
 8003c6e:	20f5      	movs	r0, #245	; 0xf5
 8003c70:	f7fd fd2c 	bl	80016cc <gfx_drawCircle>
	gfx_fillRoundRect(235, 200, 22, 30, 2,pHColor[pos] );
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	4a62      	ldr	r2, [pc, #392]	; (8003e00 <createTap+0x1d4>)
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	231e      	movs	r3, #30
 8003c86:	2216      	movs	r2, #22
 8003c88:	21c8      	movs	r1, #200	; 0xc8
 8003c8a:	20eb      	movs	r0, #235	; 0xeb
 8003c8c:	f7fe f8b3 	bl	8001df6 <gfx_fillRoundRect>

	gfx_drawLine(225,310,265,310, WHITE);
 8003c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003c9a:	f240 1209 	movw	r2, #265	; 0x109
 8003c9e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003ca2:	20e1      	movs	r0, #225	; 0xe1
 8003ca4:	f7fd fcac 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(225,310,215,270, WHITE);
 8003ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003cb2:	22d7      	movs	r2, #215	; 0xd7
 8003cb4:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003cb8:	20e1      	movs	r0, #225	; 0xe1
 8003cba:	f7fd fca1 	bl	8001600 <gfx_drawLine>
	gfx_drawLine(265,310,275,270, WHITE);
 8003cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003cc8:	f240 1213 	movw	r2, #275	; 0x113
 8003ccc:	f44f 719b 	mov.w	r1, #310	; 0x136
 8003cd0:	f240 1009 	movw	r0, #265	; 0x109
 8003cd4:	f7fd fc94 	bl	8001600 <gfx_drawLine>

	int xr=0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
	for(int i=0;i<5;i++){
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e032      	b.n	8003d48 <createTap+0x11c>
		for(int j=0;j<5;j++){
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e029      	b.n	8003d3c <createTap+0x110>
			gfx_drawLine(225-i,309-xr,265+i,309-xr, pHColor[pos]);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f1c3 03e1 	rsb	r3, r3, #225	; 0xe1
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b218      	sxth	r0, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f5c3 739a 	rsb	r3, r3, #308	; 0x134
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b219      	sxth	r1, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f203 1309 	addw	r3, r3, #265	; 0x109
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b21c      	sxth	r4, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f5c3 739a 	rsb	r3, r3, #308	; 0x134
 8003d16:	3301      	adds	r3, #1
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b21d      	sxth	r5, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	4a38      	ldr	r2, [pc, #224]	; (8003e00 <createTap+0x1d4>)
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	462b      	mov	r3, r5
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	f7fd fc68 	bl	8001600 <gfx_drawLine>
			xr++;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
		for(int j=0;j<5;j++){
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	ddd2      	ble.n	8003ce8 <createTap+0xbc>
	for(int i=0;i<5;i++){
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3301      	adds	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	ddc9      	ble.n	8003ce2 <createTap+0xb6>
		}
	}

	gfx_drawEllipse(245, 270, 30, 3, WHITE);
 8003d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2303      	movs	r3, #3
 8003d56:	221e      	movs	r2, #30
 8003d58:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d5c:	20f5      	movs	r0, #245	; 0xf5
 8003d5e:	f7fe f8c7 	bl	8001ef0 <gfx_drawEllipse>

	switch(pos){
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d846      	bhi.n	8003df6 <createTap+0x1ca>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <createTap+0x144>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003dbd 	.word	0x08003dbd
 8003d7c:	08003dd9 	.word	0x08003dd9
			case 0: gfx_FillRectWithAngle(220,150,40,10,210, pHColor[pos]); break;
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <createTap+0x1d4>)
 8003d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	23d2      	movs	r3, #210	; 0xd2
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	230a      	movs	r3, #10
 8003d90:	2228      	movs	r2, #40	; 0x28
 8003d92:	2196      	movs	r1, #150	; 0x96
 8003d94:	20dc      	movs	r0, #220	; 0xdc
 8003d96:	f7fe f9bf 	bl	8002118 <gfx_FillRectWithAngle>
 8003d9a:	e02d      	b.n	8003df8 <createTap+0x1cc>
			case 1: gfx_FillRectWithAngle(265,150,40,10,330, pHColor[pos]); break;
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <createTap+0x1d4>)
 8003da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	230a      	movs	r3, #10
 8003dae:	2228      	movs	r2, #40	; 0x28
 8003db0:	2196      	movs	r1, #150	; 0x96
 8003db2:	f240 1009 	movw	r0, #265	; 0x109
 8003db6:	f7fe f9af 	bl	8002118 <gfx_FillRectWithAngle>
 8003dba:	e01d      	b.n	8003df8 <createTap+0x1cc>
			case 2: gfx_FillRectWithAngle(210,180,40,10,150, pHColor[pos]); break;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <createTap+0x1d4>)
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	2396      	movs	r3, #150	; 0x96
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	230a      	movs	r3, #10
 8003dcc:	2228      	movs	r2, #40	; 0x28
 8003dce:	21b4      	movs	r1, #180	; 0xb4
 8003dd0:	20d2      	movs	r0, #210	; 0xd2
 8003dd2:	f7fe f9a1 	bl	8002118 <gfx_FillRectWithAngle>
 8003dd6:	e00f      	b.n	8003df8 <createTap+0x1cc>
			case 3: gfx_FillRectWithAngle(270,190,40,10,30, pHColor[pos]); break;
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <createTap+0x1d4>)
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	231e      	movs	r3, #30
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	230a      	movs	r3, #10
 8003de8:	2228      	movs	r2, #40	; 0x28
 8003dea:	21be      	movs	r1, #190	; 0xbe
 8003dec:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003df0:	f7fe f992 	bl	8002118 <gfx_FillRectWithAngle>
 8003df4:	e000      	b.n	8003df8 <createTap+0x1cc>
			default: break;
 8003df6:	bf00      	nop
		}


}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003e00:	20000030 	.word	0x20000030

08003e04 <tapLoop>:

void tapLoop(uint8_t pos){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
	ClearprocessAni(aniAngle[aniAnglePos]);
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <tapLoop+0x54>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <tapLoop+0x58>)
 8003e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f9e0 	bl	80031e0 <ClearprocessAni>
	aniAnglePos++;
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <tapLoop+0x54>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <tapLoop+0x54>)
 8003e2a:	801a      	strh	r2, [r3, #0]
	if(aniAnglePos>=6) aniAnglePos=0;
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <tapLoop+0x54>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d902      	bls.n	8003e3a <tapLoop+0x36>
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <tapLoop+0x54>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	801a      	strh	r2, [r3, #0]
	processAni(aniAngle[aniAnglePos],pos);
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <tapLoop+0x54>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <tapLoop+0x58>)
 8003e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e46:	79fa      	ldrb	r2, [r7, #7]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff faf4 	bl	8003438 <processAni>


}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000074 	.word	0x20000074
 8003e5c:	20000010 	.word	0x20000010

08003e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e66:	f000 fa7f 	bl	8004368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e6a:	f000 f8ad 	bl	8003fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e6e:	f000 f917 	bl	80040a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003e72:	f000 f8eb 	bl	800404c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8003e76:	f7ff f821 	bl	8002ebc <LCD_Init>

  gfx_init(LCD_H,LCD_W);
 8003e7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003e7e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003e82:	f7fd f9e9 	bl	8001258 <gfx_init>
  gfx_fillScreen(BLACK);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fd fba0 	bl	80015cc <gfx_fillScreen>
  gfx_setFont(&FreeMonoBold18pt7b);
 8003e8c:	4848      	ldr	r0, [pc, #288]	; (8003fb0 <main+0x150>)
 8003e8e:	f7fe fd87 	bl	80029a0 <gfx_setFont>
  gfx_setTextColor(WHITE);
 8003e92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003e96:	f7fd f9c9 	bl	800122c <gfx_setTextColor>
  gfx_setCursor(160, 40);
 8003e9a:	2128      	movs	r1, #40	; 0x28
 8003e9c:	20a0      	movs	r0, #160	; 0xa0
 8003e9e:	f7fd f9ad 	bl	80011fc <gfx_setCursor>
  gfx_print("Manthan Jal");
 8003ea2:	4844      	ldr	r0, [pc, #272]	; (8003fb4 <main+0x154>)
 8003ea4:	f7fe fd44 	bl	8002930 <gfx_print>
 // gfx_drawRGBBitmap1(100,10,gImage_testImg,40,40);
  gfx_btn_initButton(120,120,150,80,BLACK,LIGHTGREEN,WHITE,"pH 8",1);
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <main+0x158>)
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	f248 431f 	movw	r3, #33823	; 0x841f
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2350      	movs	r3, #80	; 0x50
 8003ec2:	2296      	movs	r2, #150	; 0x96
 8003ec4:	2178      	movs	r1, #120	; 0x78
 8003ec6:	2078      	movs	r0, #120	; 0x78
 8003ec8:	f7fe fd98 	bl	80029fc <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f7fe fe3b 	bl	8002b48 <gfx_btn_drawButton>
  gfx_btn_initButton(370,120,150,80,BLACK,0x658C,WHITE,"pH 9",1);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <main+0x15c>)
 8003ed8:	9303      	str	r3, [sp, #12]
 8003eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ede:	9302      	str	r3, [sp, #8]
 8003ee0:	f246 538c 	movw	r3, #25996	; 0x658c
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2350      	movs	r3, #80	; 0x50
 8003eec:	2296      	movs	r2, #150	; 0x96
 8003eee:	2178      	movs	r1, #120	; 0x78
 8003ef0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003ef4:	f7fe fd82 	bl	80029fc <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fe fe25 	bl	8002b48 <gfx_btn_drawButton>
  gfx_btn_initButton(120,230,150,80,BLACK,0x36B9,WHITE,"pH 10",1);
 8003efe:	2301      	movs	r3, #1
 8003f00:	9304      	str	r3, [sp, #16]
 8003f02:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <main+0x160>)
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f0a:	9302      	str	r3, [sp, #8]
 8003f0c:	f243 63b9 	movw	r3, #14009	; 0x36b9
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2350      	movs	r3, #80	; 0x50
 8003f18:	2296      	movs	r2, #150	; 0x96
 8003f1a:	21e6      	movs	r1, #230	; 0xe6
 8003f1c:	2078      	movs	r0, #120	; 0x78
 8003f1e:	f7fe fd6d 	bl	80029fc <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003f22:	2000      	movs	r0, #0
 8003f24:	f7fe fe10 	bl	8002b48 <gfx_btn_drawButton>
  gfx_btn_initButton(370,230,150,80,BLACK,BLUE,WHITE,"pH 11",1);
 8003f28:	2301      	movs	r3, #1
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <main+0x164>)
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	231f      	movs	r3, #31
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2350      	movs	r3, #80	; 0x50
 8003f40:	2296      	movs	r2, #150	; 0x96
 8003f42:	21e6      	movs	r1, #230	; 0xe6
 8003f44:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8003f48:	f7fe fd58 	bl	80029fc <gfx_btn_initButton>
  gfx_btn_drawButton(0);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7fe fdfb 	bl	8002b48 <gfx_btn_drawButton>

  long ts=0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
  int post=0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	603b      	str	r3, [r7, #0]
  createTap(post);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fe64 	bl	8003c2c <createTap>

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);


	if(HAL_GetTick()-ts>6000){
 8003f64:	f000 fa58 	bl	8004418 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d913      	bls.n	8003f9e <main+0x13e>
		ts=HAL_GetTick();
 8003f76:	f000 fa4f 	bl	8004418 <HAL_GetTick>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	607b      	str	r3, [r7, #4]
		destroyTap(post);
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f7ff fdae 	bl	8003ae0 <destroyTap>
		post++;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	603b      	str	r3, [r7, #0]
		if(post>=4){
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	dd01      	ble.n	8003f94 <main+0x134>
			post=0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	603b      	str	r3, [r7, #0]
		}
		createTap(post);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fe47 	bl	8003c2c <createTap>

	}
	tapLoop(post);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ff2e 	bl	8003e04 <tapLoop>
	HAL_Delay(200);
 8003fa8:	20c8      	movs	r0, #200	; 0xc8
 8003faa:	f000 fa3f 	bl	800442c <HAL_Delay>
	if(HAL_GetTick()-ts>6000){
 8003fae:	e7d9      	b.n	8003f64 <main+0x104>
 8003fb0:	080080b8 	.word	0x080080b8
 8003fb4:	080069b8 	.word	0x080069b8
 8003fb8:	08006998 	.word	0x08006998
 8003fbc:	080069a0 	.word	0x080069a0
 8003fc0:	080069a8 	.word	0x080069a8
 8003fc4:	080069b0 	.word	0x080069b0

08003fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b090      	sub	sp, #64	; 0x40
 8003fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fce:	f107 0318 	add.w	r3, r7, #24
 8003fd2:	2228      	movs	r2, #40	; 0x28
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 fc92 	bl	8005900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fea:	2302      	movs	r3, #2
 8003fec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003ffe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004004:	f107 0318 	add.w	r3, r7, #24
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd27 	bl	8004a5c <HAL_RCC_OscConfig>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004014:	f000 f8bc 	bl	8004190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004018:	230f      	movs	r3, #15
 800401a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800401c:	2302      	movs	r3, #2
 800401e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 ff92 	bl	8004f5c <HAL_RCC_ClockConfig>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800403e:	f000 f8a7 	bl	8004190 <Error_Handler>
  }
}
 8004042:	bf00      	nop
 8004044:	3740      	adds	r7, #64	; 0x40
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <MX_USART1_UART_Init+0x50>)
 8004054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800405c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004066:	2200      	movs	r2, #0
 8004068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004072:	220c      	movs	r2, #12
 8004074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 800407e:	2200      	movs	r2, #0
 8004080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004082:	4805      	ldr	r0, [pc, #20]	; (8004098 <MX_USART1_UART_Init+0x4c>)
 8004084:	f001 f908 	bl	8005298 <HAL_UART_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800408e:	f000 f87f 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000dc 	.word	0x200000dc
 800409c:	40013800 	.word	0x40013800

080040a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a6:	f107 0310 	add.w	r3, r7, #16
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4a31      	ldr	r2, [pc, #196]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040ba:	f043 0310 	orr.w	r3, r3, #16
 80040be:	6193      	str	r3, [r2, #24]
 80040c0:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4a2b      	ldr	r2, [pc, #172]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6193      	str	r3, [r2, #24]
 80040d8:	4b29      	ldr	r3, [pc, #164]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e4:	4b26      	ldr	r3, [pc, #152]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4a25      	ldr	r2, [pc, #148]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040ea:	f043 0308 	orr.w	r3, r3, #8
 80040ee:	6193      	str	r3, [r2, #24]
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <MX_GPIO_Init+0xe0>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004102:	4820      	ldr	r0, [pc, #128]	; (8004184 <MX_GPIO_Init+0xe4>)
 8004104:	f000 fc92 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8004108:	2200      	movs	r2, #0
 800410a:	211e      	movs	r1, #30
 800410c:	481e      	ldr	r0, [pc, #120]	; (8004188 <MX_GPIO_Init+0xe8>)
 800410e:	f000 fc8d 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin
 8004112:	2200      	movs	r2, #0
 8004114:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004118:	481c      	ldr	r0, [pc, #112]	; (800418c <MX_GPIO_Init+0xec>)
 800411a:	f000 fc87 	bl	8004a2c <HAL_GPIO_WritePin>
                          |LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin|LCD_D14_Pin
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800411e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800412c:	2303      	movs	r3, #3
 800412e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	4619      	mov	r1, r3
 8004136:	4813      	ldr	r0, [pc, #76]	; (8004184 <MX_GPIO_Init+0xe4>)
 8004138:	f000 fb1e 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_WR_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_CS_Pin;
 800413c:	231e      	movs	r3, #30
 800413e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004148:	2303      	movs	r3, #3
 800414a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	4619      	mov	r1, r3
 8004152:	480d      	ldr	r0, [pc, #52]	; (8004188 <MX_GPIO_Init+0xe8>)
 8004154:	f000 fb10 	bl	8004778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D10_Pin
                           LCD_D11_Pin LCD_D12_Pin LCD_D13_Pin LCD_D14_Pin
                           LCD_D15_Pin LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin LCD_D8_Pin LCD_D9_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin
 8004158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800415c:	613b      	str	r3, [r7, #16]
                          |LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin|LCD_D14_Pin
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800415e:	2301      	movs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004166:	2303      	movs	r3, #3
 8004168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416a:	f107 0310 	add.w	r3, r7, #16
 800416e:	4619      	mov	r1, r3
 8004170:	4806      	ldr	r0, [pc, #24]	; (800418c <MX_GPIO_Init+0xec>)
 8004172:	f000 fb01 	bl	8004778 <HAL_GPIO_Init>

}
 8004176:	bf00      	nop
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40011000 	.word	0x40011000
 8004188:	40010800 	.word	0x40010800
 800418c:	40010c00 	.word	0x40010c00

08004190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_MspInit+0x5c>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <HAL_MspInit+0x5c>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6193      	str	r3, [r2, #24]
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_MspInit+0x5c>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_MspInit+0x5c>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <HAL_MspInit+0x5c>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	61d3      	str	r3, [r2, #28]
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_MspInit+0x5c>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_MspInit+0x60>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_MspInit+0x60>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40010000 	.word	0x40010000

08004200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_UART_MspInit+0x9c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d139      	bne.n	8004294 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004220:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <HAL_UART_MspInit+0xa0>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_UART_MspInit+0xa0>)
 8004226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422a:	6193      	str	r3, [r2, #24]
 800422c:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <HAL_UART_MspInit+0xa0>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_UART_MspInit+0xa0>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_UART_MspInit+0xa0>)
 800423e:	f043 0304 	orr.w	r3, r3, #4
 8004242:	6193      	str	r3, [r2, #24]
 8004244:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_UART_MspInit+0xa0>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004256:	2302      	movs	r3, #2
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800425a:	2303      	movs	r3, #3
 800425c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425e:	f107 0310 	add.w	r3, r7, #16
 8004262:	4619      	mov	r1, r3
 8004264:	480f      	ldr	r0, [pc, #60]	; (80042a4 <HAL_UART_MspInit+0xa4>)
 8004266:	f000 fa87 	bl	8004778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004278:	f107 0310 	add.w	r3, r7, #16
 800427c:	4619      	mov	r1, r3
 800427e:	4809      	ldr	r0, [pc, #36]	; (80042a4 <HAL_UART_MspInit+0xa4>)
 8004280:	f000 fa7a 	bl	8004778 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004284:	2200      	movs	r2, #0
 8004286:	2100      	movs	r1, #0
 8004288:	2025      	movs	r0, #37	; 0x25
 800428a:	f000 f9c8 	bl	800461e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800428e:	2025      	movs	r0, #37	; 0x25
 8004290:	f000 f9e1 	bl	8004656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004294:	bf00      	nop
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40013800 	.word	0x40013800
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40010800 	.word	0x40010800

080042a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <HardFault_Handler+0x4>

080042ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042be:	e7fe      	b.n	80042be <MemManage_Handler+0x4>

080042c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042c4:	e7fe      	b.n	80042c4 <BusFault_Handler+0x4>

080042c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ca:	e7fe      	b.n	80042ca <UsageFault_Handler+0x4>

080042cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042f4:	f000 f87e 	bl	80043f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}

080042fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004300:	4802      	ldr	r0, [pc, #8]	; (800430c <USART1_IRQHandler+0x10>)
 8004302:	f001 f817 	bl	8005334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200000dc 	.word	0x200000dc

08004310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800431c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800431e:	e003      	b.n	8004328 <LoopCopyDataInit>

08004320 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004322:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004324:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004326:	3104      	adds	r1, #4

08004328 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004328:	480a      	ldr	r0, [pc, #40]	; (8004354 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800432c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800432e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004330:	d3f6      	bcc.n	8004320 <CopyDataInit>
  ldr r2, =_sbss
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004334:	e002      	b.n	800433c <LoopFillZerobss>

08004336 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004338:	f842 3b04 	str.w	r3, [r2], #4

0800433c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800433e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004340:	d3f9      	bcc.n	8004336 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004342:	f7ff ffe5 	bl	8004310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004346:	f001 fab7 	bl	80058b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800434a:	f7ff fd89 	bl	8003e60 <main>
  bx lr
 800434e:	4770      	bx	lr
  ldr r3, =_sidata
 8004350:	080082c0 	.word	0x080082c0
  ldr r0, =_sdata
 8004354:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004358:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 800435c:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 8004360:	20000120 	.word	0x20000120

08004364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004364:	e7fe      	b.n	8004364 <ADC1_2_IRQHandler>
	...

08004368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_Init+0x28>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <HAL_Init+0x28>)
 8004372:	f043 0310 	orr.w	r3, r3, #16
 8004376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004378:	2003      	movs	r0, #3
 800437a:	f000 f945 	bl	8004608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800437e:	2000      	movs	r0, #0
 8004380:	f000 f808 	bl	8004394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004384:	f7ff ff0a 	bl	800419c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40022000 	.word	0x40022000

08004394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_InitTick+0x54>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_InitTick+0x58>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	4619      	mov	r1, r3
 80043a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f95d 	bl	8004672 <HAL_SYSTICK_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e00e      	b.n	80043e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d80a      	bhi.n	80043de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043c8:	2200      	movs	r2, #0
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	f000 f925 	bl	800461e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043d4:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <HAL_InitTick+0x5c>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000040 	.word	0x20000040
 80043ec:	20000048 	.word	0x20000048
 80043f0:	20000044 	.word	0x20000044

080043f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_IncTick+0x1c>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_IncTick+0x20>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4413      	add	r3, r2
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <HAL_IncTick+0x20>)
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	20000048 	.word	0x20000048
 8004414:	2000011c 	.word	0x2000011c

08004418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return uwTick;
 800441c:	4b02      	ldr	r3, [pc, #8]	; (8004428 <HAL_GetTick+0x10>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	2000011c 	.word	0x2000011c

0800442c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004434:	f7ff fff0 	bl	8004418 <HAL_GetTick>
 8004438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d005      	beq.n	8004452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_Delay+0x40>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004452:	bf00      	nop
 8004454:	f7ff ffe0 	bl	8004418 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d8f7      	bhi.n	8004454 <HAL_Delay+0x28>
  {
  }
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000048 	.word	0x20000048

08004470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60d3      	str	r3, [r2, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4906      	ldr	r1, [pc, #24]	; (8004508 <__NVIC_EnableIRQ+0x34>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	e000e100 	.word	0xe000e100

0800450c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	2b00      	cmp	r3, #0
 800451e:	db0a      	blt.n	8004536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <__NVIC_SetPriority+0x4c>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	0112      	lsls	r2, r2, #4
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	440b      	add	r3, r1
 8004530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004534:	e00a      	b.n	800454c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4908      	ldr	r1, [pc, #32]	; (800455c <__NVIC_SetPriority+0x50>)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	3b04      	subs	r3, #4
 8004544:	0112      	lsls	r2, r2, #4
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	440b      	add	r3, r1
 800454a:	761a      	strb	r2, [r3, #24]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e100 	.word	0xe000e100
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f1c3 0307 	rsb	r3, r3, #7
 800457a:	2b04      	cmp	r3, #4
 800457c:	bf28      	it	cs
 800457e:	2304      	movcs	r3, #4
 8004580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3304      	adds	r3, #4
 8004586:	2b06      	cmp	r3, #6
 8004588:	d902      	bls.n	8004590 <NVIC_EncodePriority+0x30>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3b03      	subs	r3, #3
 800458e:	e000      	b.n	8004592 <NVIC_EncodePriority+0x32>
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	f04f 32ff 	mov.w	r2, #4294967295
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	401a      	ands	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	43d9      	mvns	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b8:	4313      	orrs	r3, r2
         );
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3724      	adds	r7, #36	; 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d4:	d301      	bcc.n	80045da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00f      	b.n	80045fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <SysTick_Config+0x40>)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045e2:	210f      	movs	r1, #15
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	f7ff ff90 	bl	800450c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <SysTick_Config+0x40>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <SysTick_Config+0x40>)
 80045f4:	2207      	movs	r2, #7
 80045f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000e010 	.word	0xe000e010

08004608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff2d 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004630:	f7ff ff42 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 8004634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff90 	bl	8004560 <NVIC_EncodePriority>
 8004640:	4602      	mov	r2, r0
 8004642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff5f 	bl	800450c <__NVIC_SetPriority>
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff35 	bl	80044d4 <__NVIC_EnableIRQ>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ffa2 	bl	80045c4 <SysTick_Config>
 8004680:	4603      	mov	r3, r0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d005      	beq.n	80046ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2204      	movs	r2, #4
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	e051      	b.n	8004752 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 020e 	bic.w	r2, r2, #14
 80046bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_DMA_Abort_IT+0xd0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d029      	beq.n	800472c <HAL_DMA_Abort_IT+0xa0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_DMA_Abort_IT+0xd4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <HAL_DMA_Abort_IT+0x9c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <HAL_DMA_Abort_IT+0xd8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01a      	beq.n	8004722 <HAL_DMA_Abort_IT+0x96>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_DMA_Abort_IT+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d012      	beq.n	800471c <HAL_DMA_Abort_IT+0x90>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_DMA_Abort_IT+0xe0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00a      	beq.n	8004716 <HAL_DMA_Abort_IT+0x8a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_DMA_Abort_IT+0xe4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d102      	bne.n	8004710 <HAL_DMA_Abort_IT+0x84>
 800470a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800470e:	e00e      	b.n	800472e <HAL_DMA_Abort_IT+0xa2>
 8004710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004714:	e00b      	b.n	800472e <HAL_DMA_Abort_IT+0xa2>
 8004716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800471a:	e008      	b.n	800472e <HAL_DMA_Abort_IT+0xa2>
 800471c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004720:	e005      	b.n	800472e <HAL_DMA_Abort_IT+0xa2>
 8004722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004726:	e002      	b.n	800472e <HAL_DMA_Abort_IT+0xa2>
 8004728:	2310      	movs	r3, #16
 800472a:	e000      	b.n	800472e <HAL_DMA_Abort_IT+0xa2>
 800472c:	2301      	movs	r3, #1
 800472e:	4a11      	ldr	r2, [pc, #68]	; (8004774 <HAL_DMA_Abort_IT+0xe8>)
 8004730:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
    } 
  }
  return status;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40020008 	.word	0x40020008
 8004760:	4002001c 	.word	0x4002001c
 8004764:	40020030 	.word	0x40020030
 8004768:	40020044 	.word	0x40020044
 800476c:	40020058 	.word	0x40020058
 8004770:	4002006c 	.word	0x4002006c
 8004774:	40020000 	.word	0x40020000

08004778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004778:	b480      	push	{r7}
 800477a:	b08b      	sub	sp, #44	; 0x2c
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004782:	2300      	movs	r3, #0
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478a:	e127      	b.n	80049dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800478c:	2201      	movs	r2, #1
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f040 8116 	bne.w	80049d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b12      	cmp	r3, #18
 80047b0:	d034      	beq.n	800481c <HAL_GPIO_Init+0xa4>
 80047b2:	2b12      	cmp	r3, #18
 80047b4:	d80d      	bhi.n	80047d2 <HAL_GPIO_Init+0x5a>
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d02b      	beq.n	8004812 <HAL_GPIO_Init+0x9a>
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d804      	bhi.n	80047c8 <HAL_GPIO_Init+0x50>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d031      	beq.n	8004826 <HAL_GPIO_Init+0xae>
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d01c      	beq.n	8004800 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047c6:	e048      	b.n	800485a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d043      	beq.n	8004854 <HAL_GPIO_Init+0xdc>
 80047cc:	2b11      	cmp	r3, #17
 80047ce:	d01b      	beq.n	8004808 <HAL_GPIO_Init+0x90>
          break;
 80047d0:	e043      	b.n	800485a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80047d2:	4a89      	ldr	r2, [pc, #548]	; (80049f8 <HAL_GPIO_Init+0x280>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d026      	beq.n	8004826 <HAL_GPIO_Init+0xae>
 80047d8:	4a87      	ldr	r2, [pc, #540]	; (80049f8 <HAL_GPIO_Init+0x280>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d806      	bhi.n	80047ec <HAL_GPIO_Init+0x74>
 80047de:	4a87      	ldr	r2, [pc, #540]	; (80049fc <HAL_GPIO_Init+0x284>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d020      	beq.n	8004826 <HAL_GPIO_Init+0xae>
 80047e4:	4a86      	ldr	r2, [pc, #536]	; (8004a00 <HAL_GPIO_Init+0x288>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01d      	beq.n	8004826 <HAL_GPIO_Init+0xae>
          break;
 80047ea:	e036      	b.n	800485a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80047ec:	4a85      	ldr	r2, [pc, #532]	; (8004a04 <HAL_GPIO_Init+0x28c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d019      	beq.n	8004826 <HAL_GPIO_Init+0xae>
 80047f2:	4a85      	ldr	r2, [pc, #532]	; (8004a08 <HAL_GPIO_Init+0x290>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d016      	beq.n	8004826 <HAL_GPIO_Init+0xae>
 80047f8:	4a84      	ldr	r2, [pc, #528]	; (8004a0c <HAL_GPIO_Init+0x294>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_GPIO_Init+0xae>
          break;
 80047fe:	e02c      	b.n	800485a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	623b      	str	r3, [r7, #32]
          break;
 8004806:	e028      	b.n	800485a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	3304      	adds	r3, #4
 800480e:	623b      	str	r3, [r7, #32]
          break;
 8004810:	e023      	b.n	800485a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	3308      	adds	r3, #8
 8004818:	623b      	str	r3, [r7, #32]
          break;
 800481a:	e01e      	b.n	800485a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	330c      	adds	r3, #12
 8004822:	623b      	str	r3, [r7, #32]
          break;
 8004824:	e019      	b.n	800485a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800482e:	2304      	movs	r3, #4
 8004830:	623b      	str	r3, [r7, #32]
          break;
 8004832:	e012      	b.n	800485a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800483c:	2308      	movs	r3, #8
 800483e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	611a      	str	r2, [r3, #16]
          break;
 8004846:	e008      	b.n	800485a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004848:	2308      	movs	r3, #8
 800484a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	615a      	str	r2, [r3, #20]
          break;
 8004852:	e002      	b.n	800485a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
          break;
 8004858:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2bff      	cmp	r3, #255	; 0xff
 800485e:	d801      	bhi.n	8004864 <HAL_GPIO_Init+0xec>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	e001      	b.n	8004868 <HAL_GPIO_Init+0xf0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2bff      	cmp	r3, #255	; 0xff
 800486e:	d802      	bhi.n	8004876 <HAL_GPIO_Init+0xfe>
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	e002      	b.n	800487c <HAL_GPIO_Init+0x104>
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	3b08      	subs	r3, #8
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	210f      	movs	r1, #15
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	401a      	ands	r2, r3
 800488e:	6a39      	ldr	r1, [r7, #32]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	431a      	orrs	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8096 	beq.w	80049d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048aa:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <HAL_GPIO_Init+0x298>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	4a58      	ldr	r2, [pc, #352]	; (8004a10 <HAL_GPIO_Init+0x298>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6193      	str	r3, [r2, #24]
 80048b6:	4b56      	ldr	r3, [pc, #344]	; (8004a10 <HAL_GPIO_Init+0x298>)
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048c2:	4a54      	ldr	r2, [pc, #336]	; (8004a14 <HAL_GPIO_Init+0x29c>)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	220f      	movs	r2, #15
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4013      	ands	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4b      	ldr	r2, [pc, #300]	; (8004a18 <HAL_GPIO_Init+0x2a0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_GPIO_Init+0x19e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <HAL_GPIO_Init+0x2a4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00d      	beq.n	8004912 <HAL_GPIO_Init+0x19a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a49      	ldr	r2, [pc, #292]	; (8004a20 <HAL_GPIO_Init+0x2a8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <HAL_GPIO_Init+0x196>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a48      	ldr	r2, [pc, #288]	; (8004a24 <HAL_GPIO_Init+0x2ac>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_GPIO_Init+0x192>
 8004906:	2303      	movs	r3, #3
 8004908:	e006      	b.n	8004918 <HAL_GPIO_Init+0x1a0>
 800490a:	2304      	movs	r3, #4
 800490c:	e004      	b.n	8004918 <HAL_GPIO_Init+0x1a0>
 800490e:	2302      	movs	r3, #2
 8004910:	e002      	b.n	8004918 <HAL_GPIO_Init+0x1a0>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_GPIO_Init+0x1a0>
 8004916:	2300      	movs	r3, #0
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	f002 0203 	and.w	r2, r2, #3
 800491e:	0092      	lsls	r2, r2, #2
 8004920:	4093      	lsls	r3, r2
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004928:	493a      	ldr	r1, [pc, #232]	; (8004a14 <HAL_GPIO_Init+0x29c>)
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	3302      	adds	r3, #2
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4938      	ldr	r1, [pc, #224]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]
 800494e:	e006      	b.n	800495e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004950:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	43db      	mvns	r3, r3
 8004958:	4933      	ldr	r1, [pc, #204]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 800495a:	4013      	ands	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800496a:	4b2f      	ldr	r3, [pc, #188]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	492e      	ldr	r1, [pc, #184]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
 8004976:	e006      	b.n	8004986 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004978:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	43db      	mvns	r3, r3
 8004980:	4929      	ldr	r1, [pc, #164]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004982:	4013      	ands	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	4924      	ldr	r1, [pc, #144]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
 800499e:	e006      	b.n	80049ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	491f      	ldr	r1, [pc, #124]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	491a      	ldr	r1, [pc, #104]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
 80049c6:	e006      	b.n	80049d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	4915      	ldr	r1, [pc, #84]	; (8004a28 <HAL_GPIO_Init+0x2b0>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	3301      	adds	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f aed0 	bne.w	800478c <HAL_GPIO_Init+0x14>
  }
}
 80049ec:	bf00      	nop
 80049ee:	372c      	adds	r7, #44	; 0x2c
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	10210000 	.word	0x10210000
 80049fc:	10110000 	.word	0x10110000
 8004a00:	10120000 	.word	0x10120000
 8004a04:	10310000 	.word	0x10310000
 8004a08:	10320000 	.word	0x10320000
 8004a0c:	10220000 	.word	0x10220000
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40010800 	.word	0x40010800
 8004a1c:	40010c00 	.word	0x40010c00
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	40010400 	.word	0x40010400

08004a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a3c:	787b      	ldrb	r3, [r7, #1]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a48:	e003      	b.n	8004a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	041a      	lsls	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e26c      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8087 	beq.w	8004b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7c:	4b92      	ldr	r3, [pc, #584]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d00c      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d112      	bne.n	8004aba <HAL_RCC_OscConfig+0x5e>
 8004a94:	4b8c      	ldr	r3, [pc, #560]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d10b      	bne.n	8004aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x12c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d168      	bne.n	8004b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e246      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x76>
 8004ac4:	4b80      	ldr	r3, [pc, #512]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7f      	ldr	r2, [pc, #508]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e02e      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x98>
 8004ada:	4b7b      	ldr	r3, [pc, #492]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7a      	ldr	r2, [pc, #488]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e01d      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0xbc>
 8004afe:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a71      	ldr	r2, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6e      	ldr	r2, [pc, #440]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004b18:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6a      	ldr	r2, [pc, #424]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b68      	ldr	r3, [pc, #416]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a67      	ldr	r2, [pc, #412]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7ff fc6e 	bl	8004418 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7ff fc6a 	bl	8004418 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e1fa      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0xe4>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7ff fc5a 	bl	8004418 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7ff fc56 	bl	8004418 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1e6      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7a:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x10c>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d063      	beq.n	8004c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b96:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ba2:	4b49      	ldr	r3, [pc, #292]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d11c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x18c>
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d116      	bne.n	8004be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x176>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e1ba      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4939      	ldr	r1, [pc, #228]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	e03a      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCC_OscConfig+0x270>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7ff fc0f 	bl	8004418 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfe:	f7ff fc0b 	bl	8004418 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e19b      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4927      	ldr	r1, [pc, #156]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
 8004c30:	e015      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x270>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7ff fbee 	bl	8004418 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7ff fbea 	bl	8004418 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e17a      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d03a      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d019      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c72:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c78:	f7ff fbce 	bl	8004418 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c80:	f7ff fbca 	bl	8004418 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e15a      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f000 fadc 	bl	800525c <RCC_Delay>
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cac:	f7ff fbb4 	bl	8004418 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb2:	e00f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7ff fbb0 	bl	8004418 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d908      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e140      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	42420000 	.word	0x42420000
 8004cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	4b9e      	ldr	r3, [pc, #632]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e9      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a6 	beq.w	8004e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf2:	4b97      	ldr	r3, [pc, #604]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	4b94      	ldr	r3, [pc, #592]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4a93      	ldr	r2, [pc, #588]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	61d3      	str	r3, [r2, #28]
 8004d0a:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1a:	4b8e      	ldr	r3, [pc, #568]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d118      	bne.n	8004d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d26:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a8a      	ldr	r2, [pc, #552]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d32:	f7ff fb71 	bl	8004418 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3a:	f7ff fb6d 	bl	8004418 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0fd      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCC_OscConfig+0x312>
 8004d60:	4b7b      	ldr	r3, [pc, #492]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6213      	str	r3, [r2, #32]
 8004d6c:	e02d      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x334>
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a72      	ldr	r2, [pc, #456]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6213      	str	r3, [r2, #32]
 8004d8e:	e01c      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCC_OscConfig+0x356>
 8004d98:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4a6c      	ldr	r2, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	f043 0304 	orr.w	r3, r3, #4
 8004da2:	6213      	str	r3, [r2, #32]
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4a69      	ldr	r2, [pc, #420]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6213      	str	r3, [r2, #32]
 8004db0:	e00b      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4a66      	ldr	r2, [pc, #408]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6213      	str	r3, [r2, #32]
 8004dbe:	4b64      	ldr	r3, [pc, #400]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4a63      	ldr	r2, [pc, #396]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d015      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7ff fb21 	bl	8004418 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7ff fb1d 	bl	8004418 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0ab      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ee      	beq.n	8004dda <HAL_RCC_OscConfig+0x37e>
 8004dfc:	e014      	b.n	8004e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfe:	f7ff fb0b 	bl	8004418 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e04:	e00a      	b.n	8004e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7ff fb07 	bl	8004418 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e095      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1c:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ee      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2e:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4a47      	ldr	r2, [pc, #284]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8081 	beq.w	8004f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e44:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d061      	beq.n	8004f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d146      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7ff fadb 	bl	8004418 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7ff fad7 	bl	8004418 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e067      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	492d      	ldr	r1, [pc, #180]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a19      	ldr	r1, [r3, #32]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	4927      	ldr	r1, [pc, #156]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7ff faab 	bl	8004418 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7ff faa7 	bl	8004418 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e037      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x46a>
 8004ee4:	e02f      	b.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7ff fa94 	bl	8004418 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7ff fa90 	bl	8004418 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e020      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x498>
 8004f12:	e018      	b.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e013      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
 8004f58:	42420060 	.word	0x42420060

08004f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d0      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b6a      	ldr	r3, [pc, #424]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	4965      	ldr	r1, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d040      	beq.n	800507c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d115      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e073      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4936      	ldr	r1, [pc, #216]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800504c:	f7ff f9e4 	bl	8004418 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7ff f9e0 	bl	8004418 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e053      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d210      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 0207 	bic.w	r2, r3, #7
 8005092:	4922      	ldr	r1, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	5cd3      	ldrb	r3, [r2, r3]
 80050fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1cc>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1d0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f942 	bl	8004394 <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40022000 	.word	0x40022000
 8005120:	40021000 	.word	0x40021000
 8005124:	080080c8 	.word	0x080080c8
 8005128:	20000040 	.word	0x20000040
 800512c:	20000044 	.word	0x20000044

08005130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	b490      	push	{r4, r7}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005138:	1d3c      	adds	r4, r7, #4
 800513a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x46>
 800516e:	e02d      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005170:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005172:	623b      	str	r3, [r7, #32]
      break;
 8005174:	e02d      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	0c9b      	lsrs	r3, r3, #18
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005182:	4413      	add	r3, r2
 8005184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005188:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005194:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	0c5b      	lsrs	r3, r3, #17
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051a2:	4413      	add	r3, r2
 80051a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ae:	fb02 f203 	mul.w	r2, r2, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e004      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	623b      	str	r3, [r7, #32]
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051ce:	623b      	str	r3, [r7, #32]
      break;
 80051d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc90      	pop	{r4, r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	080069c4 	.word	0x080069c4
 80051e4:	080069d4 	.word	0x080069d4
 80051e8:	40021000 	.word	0x40021000
 80051ec:	00f42400 	.word	0x00f42400
 80051f0:	003d0900 	.word	0x003d0900
 80051f4:	007a1200 	.word	0x007a1200

080051f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <HAL_RCC_GetHCLKFreq+0x10>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	20000040 	.word	0x20000040

0800520c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005210:	f7ff fff2 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005214:	4601      	mov	r1, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	0a1b      	lsrs	r3, r3, #8
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4a03      	ldr	r2, [pc, #12]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005222:	5cd3      	ldrb	r3, [r2, r3]
 8005224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	080080d8 	.word	0x080080d8

08005234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005238:	f7ff ffde 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 800523c:	4601      	mov	r1, r0
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	0adb      	lsrs	r3, r3, #11
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	4a03      	ldr	r2, [pc, #12]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	080080d8 	.word	0x080080d8

0800525c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005264:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <RCC_Delay+0x34>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <RCC_Delay+0x38>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0a5b      	lsrs	r3, r3, #9
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005278:	bf00      	nop
  }
  while (Delay --);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1e5a      	subs	r2, r3, #1
 800527e:	60fa      	str	r2, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f9      	bne.n	8005278 <RCC_Delay+0x1c>
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000040 	.word	0x20000040
 8005294:	10624dd3 	.word	0x10624dd3

08005298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e03f      	b.n	800532a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fe ff9e 	bl	8004200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa5d 	bl	800579c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10d      	bne.n	8005386 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_UART_IRQHandler+0x52>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f98b 	bl	800569a <UART_Receive_IT>
      return;
 8005384:	e0d1      	b.n	800552a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80b0 	beq.w	80054ee <HAL_UART_IRQHandler+0x1ba>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_UART_IRQHandler+0x70>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80a5 	beq.w	80054ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_UART_IRQHandler+0x90>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_UART_IRQHandler+0xb0>
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	f043 0202 	orr.w	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_UART_IRQHandler+0xd0>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00f      	beq.n	800542e <HAL_UART_IRQHandler+0xfa>
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <HAL_UART_IRQHandler+0xee>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	f043 0208 	orr.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d078      	beq.n	8005528 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_UART_IRQHandler+0x11c>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f925 	bl	800569a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <HAL_UART_IRQHandler+0x144>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d031      	beq.n	80054dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f876 	bl	800556a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d023      	beq.n	80054d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	4a21      	ldr	r2, [pc, #132]	; (8005530 <HAL_UART_IRQHandler+0x1fc>)
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f8eb 	bl	800468c <HAL_DMA_Abort_IT>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054c6:	4610      	mov	r0, r2
 80054c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ca:	e00e      	b.n	80054ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f843 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d2:	e00a      	b.n	80054ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f83f 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054da:	e006      	b.n	80054ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f83b 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80054e8:	e01e      	b.n	8005528 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ea:	bf00      	nop
    return;
 80054ec:	e01c      	b.n	8005528 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_UART_IRQHandler+0x1d6>
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f862 	bl	80055cc <UART_Transmit_IT>
    return;
 8005508:	e00f      	b.n	800552a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_UART_IRQHandler+0x1f6>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8a3 	bl	800566a <UART_EndTransmit_IT>
    return;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005528:	bf00      	nop
  }
}
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	080055a5 	.word	0x080055a5

08005534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005580:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ffca 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b21      	cmp	r3, #33	; 0x21
 80055de:	d13e      	bne.n	800565e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	d114      	bne.n	8005614 <UART_Transmit_IT+0x48>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d110      	bne.n	8005614 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005606:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]
 8005612:	e008      	b.n	8005626 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	1c59      	adds	r1, r3, #1
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6211      	str	r1, [r2, #32]
 800561e:	781a      	ldrb	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4619      	mov	r1, r3
 8005634:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10f      	bne.n	800565a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005648:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff52 	bl	8005534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b22      	cmp	r3, #34	; 0x22
 80056ac:	d170      	bne.n	8005790 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d117      	bne.n	80056e8 <UART_Receive_IT+0x4e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d113      	bne.n	80056e8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
 80056e6:	e026      	b.n	8005736 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fa:	d007      	beq.n	800570c <UART_Receive_IT+0x72>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <UART_Receive_IT+0x80>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e008      	b.n	800572c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29b      	uxth	r3, r3
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4619      	mov	r1, r3
 8005744:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005746:	2b00      	cmp	r3, #0
 8005748:	d120      	bne.n	800578c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0220 	bic.w	r2, r2, #32
 8005758:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0201 	bic.w	r2, r2, #1
 8005778:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fedf 	bl	8005546 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e002      	b.n	8005792 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	e000      	b.n	8005792 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057d6:	f023 030c 	bic.w	r3, r3, #12
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <UART_SetConfig+0x114>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d103      	bne.n	800580c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005804:	f7ff fd16 	bl	8005234 <HAL_RCC_GetPCLK2Freq>
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	e002      	b.n	8005812 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7ff fcfe 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8005810:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009a      	lsls	r2, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <UART_SetConfig+0x118>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	0119      	lsls	r1, r3, #4
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009a      	lsls	r2, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	fbb2 f2f3 	udiv	r2, r2, r3
 8005848:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <UART_SetConfig+0x118>)
 800584a:	fba3 0302 	umull	r0, r3, r3, r2
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2064      	movs	r0, #100	; 0x64
 8005852:	fb00 f303 	mul.w	r3, r0, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	3332      	adds	r3, #50	; 0x32
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <UART_SetConfig+0x118>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005868:	4419      	add	r1, r3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009a      	lsls	r2, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <UART_SetConfig+0x118>)
 8005882:	fba3 0302 	umull	r0, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2064      	movs	r0, #100	; 0x64
 800588a:	fb00 f303 	mul.w	r3, r0, r3
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	3332      	adds	r3, #50	; 0x32
 8005894:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <UART_SetConfig+0x118>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	440a      	add	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40013800 	.word	0x40013800
 80058b4:	51eb851f 	.word	0x51eb851f

080058b8 <__libc_init_array>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	2500      	movs	r5, #0
 80058bc:	4e0c      	ldr	r6, [pc, #48]	; (80058f0 <__libc_init_array+0x38>)
 80058be:	4c0d      	ldr	r4, [pc, #52]	; (80058f4 <__libc_init_array+0x3c>)
 80058c0:	1ba4      	subs	r4, r4, r6
 80058c2:	10a4      	asrs	r4, r4, #2
 80058c4:	42a5      	cmp	r5, r4
 80058c6:	d109      	bne.n	80058dc <__libc_init_array+0x24>
 80058c8:	f001 f85a 	bl	8006980 <_init>
 80058cc:	2500      	movs	r5, #0
 80058ce:	4e0a      	ldr	r6, [pc, #40]	; (80058f8 <__libc_init_array+0x40>)
 80058d0:	4c0a      	ldr	r4, [pc, #40]	; (80058fc <__libc_init_array+0x44>)
 80058d2:	1ba4      	subs	r4, r4, r6
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	42a5      	cmp	r5, r4
 80058d8:	d105      	bne.n	80058e6 <__libc_init_array+0x2e>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058e0:	4798      	blx	r3
 80058e2:	3501      	adds	r5, #1
 80058e4:	e7ee      	b.n	80058c4 <__libc_init_array+0xc>
 80058e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ea:	4798      	blx	r3
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7f2      	b.n	80058d6 <__libc_init_array+0x1e>
 80058f0:	080082b8 	.word	0x080082b8
 80058f4:	080082b8 	.word	0x080082b8
 80058f8:	080082b8 	.word	0x080082b8
 80058fc:	080082bc 	.word	0x080082bc

08005900 <memset>:
 8005900:	4603      	mov	r3, r0
 8005902:	4402      	add	r2, r0
 8005904:	4293      	cmp	r3, r2
 8005906:	d100      	bne.n	800590a <memset+0xa>
 8005908:	4770      	bx	lr
 800590a:	f803 1b01 	strb.w	r1, [r3], #1
 800590e:	e7f9      	b.n	8005904 <memset+0x4>

08005910 <strncpy>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	3901      	subs	r1, #1
 8005916:	b902      	cbnz	r2, 800591a <strncpy+0xa>
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	4623      	mov	r3, r4
 800591c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005920:	1e56      	subs	r6, r2, #1
 8005922:	f803 5b01 	strb.w	r5, [r3], #1
 8005926:	b92d      	cbnz	r5, 8005934 <strncpy+0x24>
 8005928:	4414      	add	r4, r2
 800592a:	42a3      	cmp	r3, r4
 800592c:	d0f4      	beq.n	8005918 <strncpy+0x8>
 800592e:	f803 5b01 	strb.w	r5, [r3], #1
 8005932:	e7fa      	b.n	800592a <strncpy+0x1a>
 8005934:	461c      	mov	r4, r3
 8005936:	4632      	mov	r2, r6
 8005938:	e7ed      	b.n	8005916 <strncpy+0x6>
	...

0800593c <cos>:
 800593c:	b530      	push	{r4, r5, lr}
 800593e:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <cos+0x64>)
 8005940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005944:	4293      	cmp	r3, r2
 8005946:	b087      	sub	sp, #28
 8005948:	dc04      	bgt.n	8005954 <cos+0x18>
 800594a:	2200      	movs	r2, #0
 800594c:	2300      	movs	r3, #0
 800594e:	f000 fa57 	bl	8005e00 <__kernel_cos>
 8005952:	e006      	b.n	8005962 <cos+0x26>
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <cos+0x68>)
 8005956:	4293      	cmp	r3, r2
 8005958:	dd05      	ble.n	8005966 <cos+0x2a>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	f7fa fc03 	bl	8000168 <__aeabi_dsub>
 8005962:	b007      	add	sp, #28
 8005964:	bd30      	pop	{r4, r5, pc}
 8005966:	aa02      	add	r2, sp, #8
 8005968:	f000 f85a 	bl	8005a20 <__ieee754_rem_pio2>
 800596c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005970:	f000 0403 	and.w	r4, r0, #3
 8005974:	2c01      	cmp	r4, #1
 8005976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800597a:	d008      	beq.n	800598e <cos+0x52>
 800597c:	2c02      	cmp	r4, #2
 800597e:	d00c      	beq.n	800599a <cos+0x5e>
 8005980:	2c00      	cmp	r4, #0
 8005982:	d0e4      	beq.n	800594e <cos+0x12>
 8005984:	2401      	movs	r4, #1
 8005986:	9400      	str	r4, [sp, #0]
 8005988:	f000 fe42 	bl	8006610 <__kernel_sin>
 800598c:	e7e9      	b.n	8005962 <cos+0x26>
 800598e:	9400      	str	r4, [sp, #0]
 8005990:	f000 fe3e 	bl	8006610 <__kernel_sin>
 8005994:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005998:	e7e3      	b.n	8005962 <cos+0x26>
 800599a:	f000 fa31 	bl	8005e00 <__kernel_cos>
 800599e:	e7f9      	b.n	8005994 <cos+0x58>
 80059a0:	3fe921fb 	.word	0x3fe921fb
 80059a4:	7fefffff 	.word	0x7fefffff

080059a8 <sin>:
 80059a8:	b530      	push	{r4, r5, lr}
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <sin+0x6c>)
 80059ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059b0:	4293      	cmp	r3, r2
 80059b2:	b087      	sub	sp, #28
 80059b4:	dc06      	bgt.n	80059c4 <sin+0x1c>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2200      	movs	r2, #0
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	2300      	movs	r3, #0
 80059be:	f000 fe27 	bl	8006610 <__kernel_sin>
 80059c2:	e006      	b.n	80059d2 <sin+0x2a>
 80059c4:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <sin+0x70>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	dd05      	ble.n	80059d6 <sin+0x2e>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	f7fa fbcb 	bl	8000168 <__aeabi_dsub>
 80059d2:	b007      	add	sp, #28
 80059d4:	bd30      	pop	{r4, r5, pc}
 80059d6:	aa02      	add	r2, sp, #8
 80059d8:	f000 f822 	bl	8005a20 <__ieee754_rem_pio2>
 80059dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e0:	f000 0403 	and.w	r4, r0, #3
 80059e4:	2c01      	cmp	r4, #1
 80059e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ea:	d005      	beq.n	80059f8 <sin+0x50>
 80059ec:	2c02      	cmp	r4, #2
 80059ee:	d006      	beq.n	80059fe <sin+0x56>
 80059f0:	b964      	cbnz	r4, 8005a0c <sin+0x64>
 80059f2:	2401      	movs	r4, #1
 80059f4:	9400      	str	r4, [sp, #0]
 80059f6:	e7e2      	b.n	80059be <sin+0x16>
 80059f8:	f000 fa02 	bl	8005e00 <__kernel_cos>
 80059fc:	e7e9      	b.n	80059d2 <sin+0x2a>
 80059fe:	2401      	movs	r4, #1
 8005a00:	9400      	str	r4, [sp, #0]
 8005a02:	f000 fe05 	bl	8006610 <__kernel_sin>
 8005a06:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a0a:	e7e2      	b.n	80059d2 <sin+0x2a>
 8005a0c:	f000 f9f8 	bl	8005e00 <__kernel_cos>
 8005a10:	e7f9      	b.n	8005a06 <sin+0x5e>
 8005a12:	bf00      	nop
 8005a14:	3fe921fb 	.word	0x3fe921fb
 8005a18:	7fefffff 	.word	0x7fefffff
 8005a1c:	00000000 	.word	0x00000000

08005a20 <__ieee754_rem_pio2>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	4614      	mov	r4, r2
 8005a26:	4ac2      	ldr	r2, [pc, #776]	; (8005d30 <__ieee754_rem_pio2+0x310>)
 8005a28:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005a2c:	4592      	cmp	sl, r2
 8005a2e:	b08d      	sub	sp, #52	; 0x34
 8005a30:	468b      	mov	fp, r1
 8005a32:	dc07      	bgt.n	8005a44 <__ieee754_rem_pio2+0x24>
 8005a34:	2200      	movs	r2, #0
 8005a36:	2300      	movs	r3, #0
 8005a38:	e9c4 0100 	strd	r0, r1, [r4]
 8005a3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005a40:	2500      	movs	r5, #0
 8005a42:	e023      	b.n	8005a8c <__ieee754_rem_pio2+0x6c>
 8005a44:	4abb      	ldr	r2, [pc, #748]	; (8005d34 <__ieee754_rem_pio2+0x314>)
 8005a46:	4592      	cmp	sl, r2
 8005a48:	dc71      	bgt.n	8005b2e <__ieee754_rem_pio2+0x10e>
 8005a4a:	a3ab      	add	r3, pc, #684	; (adr r3, 8005cf8 <__ieee754_rem_pio2+0x2d8>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	2900      	cmp	r1, #0
 8005a52:	4db9      	ldr	r5, [pc, #740]	; (8005d38 <__ieee754_rem_pio2+0x318>)
 8005a54:	dd36      	ble.n	8005ac4 <__ieee754_rem_pio2+0xa4>
 8005a56:	f7fa fb87 	bl	8000168 <__aeabi_dsub>
 8005a5a:	45aa      	cmp	sl, r5
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	d018      	beq.n	8005a94 <__ieee754_rem_pio2+0x74>
 8005a62:	a3a7      	add	r3, pc, #668	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x2e0>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fb7e 	bl	8000168 <__aeabi_dsub>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4630      	mov	r0, r6
 8005a72:	e9c4 2300 	strd	r2, r3, [r4]
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fb76 	bl	8000168 <__aeabi_dsub>
 8005a7c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x2e0>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fb71 	bl	8000168 <__aeabi_dsub>
 8005a86:	2501      	movs	r5, #1
 8005a88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	b00d      	add	sp, #52	; 0x34
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	a39c      	add	r3, pc, #624	; (adr r3, 8005d08 <__ieee754_rem_pio2+0x2e8>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f7fa fb65 	bl	8000168 <__aeabi_dsub>
 8005a9e:	a39c      	add	r3, pc, #624	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x2f0>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	f7fa fb5e 	bl	8000168 <__aeabi_dsub>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	e9c4 2300 	strd	r2, r3, [r4]
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f7fa fb56 	bl	8000168 <__aeabi_dsub>
 8005abc:	a394      	add	r3, pc, #592	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x2f0>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	e7de      	b.n	8005a82 <__ieee754_rem_pio2+0x62>
 8005ac4:	f7fa fb52 	bl	800016c <__adddf3>
 8005ac8:	45aa      	cmp	sl, r5
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	d016      	beq.n	8005afe <__ieee754_rem_pio2+0xde>
 8005ad0:	a38b      	add	r3, pc, #556	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x2e0>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fb49 	bl	800016c <__adddf3>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	e9c4 2300 	strd	r2, r3, [r4]
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fb3f 	bl	8000168 <__aeabi_dsub>
 8005aea:	a385      	add	r3, pc, #532	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x2e0>)
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fb3c 	bl	800016c <__adddf3>
 8005af4:	f04f 35ff 	mov.w	r5, #4294967295
 8005af8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005afc:	e7c6      	b.n	8005a8c <__ieee754_rem_pio2+0x6c>
 8005afe:	a382      	add	r3, pc, #520	; (adr r3, 8005d08 <__ieee754_rem_pio2+0x2e8>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fb32 	bl	800016c <__adddf3>
 8005b08:	a381      	add	r3, pc, #516	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x2f0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	4606      	mov	r6, r0
 8005b10:	460f      	mov	r7, r1
 8005b12:	f7fa fb2b 	bl	800016c <__adddf3>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	e9c4 2300 	strd	r2, r3, [r4]
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fb21 	bl	8000168 <__aeabi_dsub>
 8005b26:	a37a      	add	r3, pc, #488	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x2f0>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	e7e0      	b.n	8005af0 <__ieee754_rem_pio2+0xd0>
 8005b2e:	4a83      	ldr	r2, [pc, #524]	; (8005d3c <__ieee754_rem_pio2+0x31c>)
 8005b30:	4592      	cmp	sl, r2
 8005b32:	f300 80d2 	bgt.w	8005cda <__ieee754_rem_pio2+0x2ba>
 8005b36:	f000 fe21 	bl	800677c <fabs>
 8005b3a:	a377      	add	r3, pc, #476	; (adr r3, 8005d18 <__ieee754_rem_pio2+0x2f8>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	f7fa fcc8 	bl	80004d8 <__aeabi_dmul>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4b7d      	ldr	r3, [pc, #500]	; (8005d40 <__ieee754_rem_pio2+0x320>)
 8005b4c:	f7fa fb0e 	bl	800016c <__adddf3>
 8005b50:	f7fa ff5c 	bl	8000a0c <__aeabi_d2iz>
 8005b54:	4605      	mov	r5, r0
 8005b56:	f7fa fc55 	bl	8000404 <__aeabi_i2d>
 8005b5a:	a367      	add	r3, pc, #412	; (adr r3, 8005cf8 <__ieee754_rem_pio2+0x2d8>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b64:	f7fa fcb8 	bl	80004d8 <__aeabi_dmul>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	4639      	mov	r1, r7
 8005b70:	f7fa fafa 	bl	8000168 <__aeabi_dsub>
 8005b74:	a362      	add	r3, pc, #392	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x2e0>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b82:	f7fa fca9 	bl	80004d8 <__aeabi_dmul>
 8005b86:	2d1f      	cmp	r5, #31
 8005b88:	4680      	mov	r8, r0
 8005b8a:	4689      	mov	r9, r1
 8005b8c:	dc0e      	bgt.n	8005bac <__ieee754_rem_pio2+0x18c>
 8005b8e:	4b6d      	ldr	r3, [pc, #436]	; (8005d44 <__ieee754_rem_pio2+0x324>)
 8005b90:	1e6a      	subs	r2, r5, #1
 8005b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b96:	4553      	cmp	r3, sl
 8005b98:	d008      	beq.n	8005bac <__ieee754_rem_pio2+0x18c>
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f7fa fae1 	bl	8000168 <__aeabi_dsub>
 8005ba6:	e9c4 0100 	strd	r0, r1, [r4]
 8005baa:	e011      	b.n	8005bd0 <__ieee754_rem_pio2+0x1b0>
 8005bac:	464b      	mov	r3, r9
 8005bae:	4642      	mov	r2, r8
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fad8 	bl	8000168 <__aeabi_dsub>
 8005bb8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005bbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005bc0:	ebaa 0303 	sub.w	r3, sl, r3
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	dc1f      	bgt.n	8005c08 <__ieee754_rem_pio2+0x1e8>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8005bd0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4653      	mov	r3, sl
 8005bd8:	4639      	mov	r1, r7
 8005bda:	f7fa fac5 	bl	8000168 <__aeabi_dsub>
 8005bde:	4642      	mov	r2, r8
 8005be0:	464b      	mov	r3, r9
 8005be2:	f7fa fac1 	bl	8000168 <__aeabi_dsub>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	f1bb 0f00 	cmp.w	fp, #0
 8005bee:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005bf2:	f6bf af4b 	bge.w	8005a8c <__ieee754_rem_pio2+0x6c>
 8005bf6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005bfa:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8005bfe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005c02:	60e1      	str	r1, [r4, #12]
 8005c04:	426d      	negs	r5, r5
 8005c06:	e741      	b.n	8005a8c <__ieee754_rem_pio2+0x6c>
 8005c08:	a33f      	add	r3, pc, #252	; (adr r3, 8005d08 <__ieee754_rem_pio2+0x2e8>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c12:	f7fa fc61 	bl	80004d8 <__aeabi_dmul>
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4630      	mov	r0, r6
 8005c20:	4639      	mov	r1, r7
 8005c22:	f7fa faa1 	bl	8000168 <__aeabi_dsub>
 8005c26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa fa99 	bl	8000168 <__aeabi_dsub>
 8005c36:	4642      	mov	r2, r8
 8005c38:	464b      	mov	r3, r9
 8005c3a:	f7fa fa95 	bl	8000168 <__aeabi_dsub>
 8005c3e:	a334      	add	r3, pc, #208	; (adr r3, 8005d10 <__ieee754_rem_pio2+0x2f0>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	4606      	mov	r6, r0
 8005c46:	460f      	mov	r7, r1
 8005c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c4c:	f7fa fc44 	bl	80004d8 <__aeabi_dmul>
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	f7fa fa88 	bl	8000168 <__aeabi_dsub>
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c64:	f7fa fa80 	bl	8000168 <__aeabi_dsub>
 8005c68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c6c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005c70:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005c74:	dc06      	bgt.n	8005c84 <__ieee754_rem_pio2+0x264>
 8005c76:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	e9c4 2300 	strd	r2, r3, [r4]
 8005c82:	e7a5      	b.n	8005bd0 <__ieee754_rem_pio2+0x1b0>
 8005c84:	a326      	add	r3, pc, #152	; (adr r3, 8005d20 <__ieee754_rem_pio2+0x300>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8e:	f7fa fc23 	bl	80004d8 <__aeabi_dmul>
 8005c92:	4680      	mov	r8, r0
 8005c94:	4689      	mov	r9, r1
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c9e:	f7fa fa63 	bl	8000168 <__aeabi_dsub>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cae:	f7fa fa5b 	bl	8000168 <__aeabi_dsub>
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	f7fa fa57 	bl	8000168 <__aeabi_dsub>
 8005cba:	a31b      	add	r3, pc, #108	; (adr r3, 8005d28 <__ieee754_rem_pio2+0x308>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4689      	mov	r9, r1
 8005cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc8:	f7fa fc06 	bl	80004d8 <__aeabi_dmul>
 8005ccc:	4642      	mov	r2, r8
 8005cce:	464b      	mov	r3, r9
 8005cd0:	f7fa fa4a 	bl	8000168 <__aeabi_dsub>
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	4689      	mov	r9, r1
 8005cd8:	e75f      	b.n	8005b9a <__ieee754_rem_pio2+0x17a>
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <__ieee754_rem_pio2+0x328>)
 8005cdc:	4592      	cmp	sl, r2
 8005cde:	dd35      	ble.n	8005d4c <__ieee754_rem_pio2+0x32c>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	f7fa fa40 	bl	8000168 <__aeabi_dsub>
 8005ce8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cec:	e9c4 0100 	strd	r0, r1, [r4]
 8005cf0:	e6a6      	b.n	8005a40 <__ieee754_rem_pio2+0x20>
 8005cf2:	bf00      	nop
 8005cf4:	f3af 8000 	nop.w
 8005cf8:	54400000 	.word	0x54400000
 8005cfc:	3ff921fb 	.word	0x3ff921fb
 8005d00:	1a626331 	.word	0x1a626331
 8005d04:	3dd0b461 	.word	0x3dd0b461
 8005d08:	1a600000 	.word	0x1a600000
 8005d0c:	3dd0b461 	.word	0x3dd0b461
 8005d10:	2e037073 	.word	0x2e037073
 8005d14:	3ba3198a 	.word	0x3ba3198a
 8005d18:	6dc9c883 	.word	0x6dc9c883
 8005d1c:	3fe45f30 	.word	0x3fe45f30
 8005d20:	2e000000 	.word	0x2e000000
 8005d24:	3ba3198a 	.word	0x3ba3198a
 8005d28:	252049c1 	.word	0x252049c1
 8005d2c:	397b839a 	.word	0x397b839a
 8005d30:	3fe921fb 	.word	0x3fe921fb
 8005d34:	4002d97b 	.word	0x4002d97b
 8005d38:	3ff921fb 	.word	0x3ff921fb
 8005d3c:	413921fb 	.word	0x413921fb
 8005d40:	3fe00000 	.word	0x3fe00000
 8005d44:	080080e0 	.word	0x080080e0
 8005d48:	7fefffff 	.word	0x7fefffff
 8005d4c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005d50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005d54:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005d58:	460f      	mov	r7, r1
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	f7fa fe56 	bl	8000a0c <__aeabi_d2iz>
 8005d60:	f7fa fb50 	bl	8000404 <__aeabi_i2d>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4630      	mov	r0, r6
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d70:	f7fa f9fa 	bl	8000168 <__aeabi_dsub>
 8005d74:	2200      	movs	r2, #0
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <__ieee754_rem_pio2+0x3d8>)
 8005d78:	f7fa fbae 	bl	80004d8 <__aeabi_dmul>
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	4606      	mov	r6, r0
 8005d80:	f7fa fe44 	bl	8000a0c <__aeabi_d2iz>
 8005d84:	f7fa fb3e 	bl	8000404 <__aeabi_i2d>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	4639      	mov	r1, r7
 8005d90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d94:	f7fa f9e8 	bl	8000168 <__aeabi_dsub>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <__ieee754_rem_pio2+0x3d8>)
 8005d9c:	f7fa fb9c 	bl	80004d8 <__aeabi_dmul>
 8005da0:	f04f 0803 	mov.w	r8, #3
 8005da4:	2600      	movs	r6, #0
 8005da6:	2700      	movs	r7, #0
 8005da8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005db0:	4632      	mov	r2, r6
 8005db2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005db6:	463b      	mov	r3, r7
 8005db8:	f108 3aff 	add.w	sl, r8, #4294967295
 8005dbc:	f7fa fdf4 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc0:	b9b8      	cbnz	r0, 8005df2 <__ieee754_rem_pio2+0x3d2>
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <__ieee754_rem_pio2+0x3dc>)
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	2302      	movs	r3, #2
 8005dca:	4621      	mov	r1, r4
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	a806      	add	r0, sp, #24
 8005dd0:	4643      	mov	r3, r8
 8005dd2:	f000 f8d3 	bl	8005f7c <__kernel_rem_pio2>
 8005dd6:	f1bb 0f00 	cmp.w	fp, #0
 8005dda:	4605      	mov	r5, r0
 8005ddc:	f6bf ae56 	bge.w	8005a8c <__ieee754_rem_pio2+0x6c>
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	68e3      	ldr	r3, [r4, #12]
 8005dea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	60e3      	str	r3, [r4, #12]
 8005df0:	e708      	b.n	8005c04 <__ieee754_rem_pio2+0x1e4>
 8005df2:	46d0      	mov	r8, sl
 8005df4:	e7dc      	b.n	8005db0 <__ieee754_rem_pio2+0x390>
 8005df6:	bf00      	nop
 8005df8:	41700000 	.word	0x41700000
 8005dfc:	08008160 	.word	0x08008160

08005e00 <__kernel_cos>:
 8005e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	e9cd 2300 	strd	r2, r3, [sp]
 8005e14:	da04      	bge.n	8005e20 <__kernel_cos+0x20>
 8005e16:	f7fa fdf9 	bl	8000a0c <__aeabi_d2iz>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f000 8086 	beq.w	8005f2c <__kernel_cos+0x12c>
 8005e20:	4642      	mov	r2, r8
 8005e22:	463b      	mov	r3, r7
 8005e24:	4640      	mov	r0, r8
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa fb56 	bl	80004d8 <__aeabi_dmul>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	; (8005f68 <__kernel_cos+0x168>)
 8005e30:	4604      	mov	r4, r0
 8005e32:	460d      	mov	r5, r1
 8005e34:	f7fa fb50 	bl	80004d8 <__aeabi_dmul>
 8005e38:	a33f      	add	r3, pc, #252	; (adr r3, 8005f38 <__kernel_cos+0x138>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	4682      	mov	sl, r0
 8005e40:	468b      	mov	fp, r1
 8005e42:	4620      	mov	r0, r4
 8005e44:	4629      	mov	r1, r5
 8005e46:	f7fa fb47 	bl	80004d8 <__aeabi_dmul>
 8005e4a:	a33d      	add	r3, pc, #244	; (adr r3, 8005f40 <__kernel_cos+0x140>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa f98c 	bl	800016c <__adddf3>
 8005e54:	4622      	mov	r2, r4
 8005e56:	462b      	mov	r3, r5
 8005e58:	f7fa fb3e 	bl	80004d8 <__aeabi_dmul>
 8005e5c:	a33a      	add	r3, pc, #232	; (adr r3, 8005f48 <__kernel_cos+0x148>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f981 	bl	8000168 <__aeabi_dsub>
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	f7fa fb35 	bl	80004d8 <__aeabi_dmul>
 8005e6e:	a338      	add	r3, pc, #224	; (adr r3, 8005f50 <__kernel_cos+0x150>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa f97a 	bl	800016c <__adddf3>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	f7fa fb2c 	bl	80004d8 <__aeabi_dmul>
 8005e80:	a335      	add	r3, pc, #212	; (adr r3, 8005f58 <__kernel_cos+0x158>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa f96f 	bl	8000168 <__aeabi_dsub>
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	f7fa fb23 	bl	80004d8 <__aeabi_dmul>
 8005e92:	a333      	add	r3, pc, #204	; (adr r3, 8005f60 <__kernel_cos+0x160>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa f968 	bl	800016c <__adddf3>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	462b      	mov	r3, r5
 8005ea0:	f7fa fb1a 	bl	80004d8 <__aeabi_dmul>
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	f7fa fb16 	bl	80004d8 <__aeabi_dmul>
 8005eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa fb0e 	bl	80004d8 <__aeabi_dmul>
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7fa f950 	bl	8000168 <__aeabi_dsub>
 8005ec8:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <__kernel_cos+0x16c>)
 8005eca:	4680      	mov	r8, r0
 8005ecc:	429e      	cmp	r6, r3
 8005ece:	4689      	mov	r9, r1
 8005ed0:	dc0e      	bgt.n	8005ef0 <__kernel_cos+0xf0>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	4659      	mov	r1, fp
 8005eda:	f7fa f945 	bl	8000168 <__aeabi_dsub>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4922      	ldr	r1, [pc, #136]	; (8005f70 <__kernel_cos+0x170>)
 8005ee6:	f7fa f93f 	bl	8000168 <__aeabi_dsub>
 8005eea:	b003      	add	sp, #12
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	2400      	movs	r4, #0
 8005ef2:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <__kernel_cos+0x174>)
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	429e      	cmp	r6, r3
 8005ef8:	bfcc      	ite	gt
 8005efa:	4d1f      	ldrgt	r5, [pc, #124]	; (8005f78 <__kernel_cos+0x178>)
 8005efc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005f00:	462b      	mov	r3, r5
 8005f02:	2000      	movs	r0, #0
 8005f04:	491a      	ldr	r1, [pc, #104]	; (8005f70 <__kernel_cos+0x170>)
 8005f06:	f7fa f92f 	bl	8000168 <__aeabi_dsub>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	460f      	mov	r7, r1
 8005f10:	462b      	mov	r3, r5
 8005f12:	4650      	mov	r0, sl
 8005f14:	4659      	mov	r1, fp
 8005f16:	f7fa f927 	bl	8000168 <__aeabi_dsub>
 8005f1a:	4642      	mov	r2, r8
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	f7fa f923 	bl	8000168 <__aeabi_dsub>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4630      	mov	r0, r6
 8005f28:	4639      	mov	r1, r7
 8005f2a:	e7dc      	b.n	8005ee6 <__kernel_cos+0xe6>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	4910      	ldr	r1, [pc, #64]	; (8005f70 <__kernel_cos+0x170>)
 8005f30:	e7db      	b.n	8005eea <__kernel_cos+0xea>
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	be8838d4 	.word	0xbe8838d4
 8005f3c:	bda8fae9 	.word	0xbda8fae9
 8005f40:	bdb4b1c4 	.word	0xbdb4b1c4
 8005f44:	3e21ee9e 	.word	0x3e21ee9e
 8005f48:	809c52ad 	.word	0x809c52ad
 8005f4c:	3e927e4f 	.word	0x3e927e4f
 8005f50:	19cb1590 	.word	0x19cb1590
 8005f54:	3efa01a0 	.word	0x3efa01a0
 8005f58:	16c15177 	.word	0x16c15177
 8005f5c:	3f56c16c 	.word	0x3f56c16c
 8005f60:	5555554c 	.word	0x5555554c
 8005f64:	3fa55555 	.word	0x3fa55555
 8005f68:	3fe00000 	.word	0x3fe00000
 8005f6c:	3fd33332 	.word	0x3fd33332
 8005f70:	3ff00000 	.word	0x3ff00000
 8005f74:	3fe90000 	.word	0x3fe90000
 8005f78:	3fd20000 	.word	0x3fd20000

08005f7c <__kernel_rem_pio2>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005f84:	9307      	str	r3, [sp, #28]
 8005f86:	9104      	str	r1, [sp, #16]
 8005f88:	4bbf      	ldr	r3, [pc, #764]	; (8006288 <__kernel_rem_pio2+0x30c>)
 8005f8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005f8c:	1ed4      	subs	r4, r2, #3
 8005f8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f92:	2500      	movs	r5, #0
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	9008      	str	r0, [sp, #32]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	9306      	str	r3, [sp, #24]
 8005f9e:	2318      	movs	r3, #24
 8005fa0:	fb94 f4f3 	sdiv	r4, r4, r3
 8005fa4:	f06f 0317 	mvn.w	r3, #23
 8005fa8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005fac:	fb04 3303 	mla	r3, r4, r3, r3
 8005fb0:	eb03 0a02 	add.w	sl, r3, r2
 8005fb4:	9a06      	ldr	r2, [sp, #24]
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	1aa7      	subs	r7, r4, r2
 8005fba:	eb03 0802 	add.w	r8, r3, r2
 8005fbe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	ae1e      	add	r6, sp, #120	; 0x78
 8005fca:	4545      	cmp	r5, r8
 8005fcc:	dd14      	ble.n	8005ff8 <__kernel_rem_pio2+0x7c>
 8005fce:	2600      	movs	r6, #0
 8005fd0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8005fd4:	9b02      	ldr	r3, [sp, #8]
 8005fd6:	429e      	cmp	r6, r3
 8005fd8:	dc39      	bgt.n	800604e <__kernel_rem_pio2+0xd2>
 8005fda:	9b08      	ldr	r3, [sp, #32]
 8005fdc:	f04f 0800 	mov.w	r8, #0
 8005fe0:	3b08      	subs	r3, #8
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	f04f 0900 	mov.w	r9, #0
 8005fea:	199d      	adds	r5, r3, r6
 8005fec:	ab20      	add	r3, sp, #128	; 0x80
 8005fee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	2700      	movs	r7, #0
 8005ff6:	e023      	b.n	8006040 <__kernel_rem_pio2+0xc4>
 8005ff8:	42ef      	cmn	r7, r5
 8005ffa:	d40b      	bmi.n	8006014 <__kernel_rem_pio2+0x98>
 8005ffc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006000:	e9cd 2300 	strd	r2, r3, [sp]
 8006004:	f7fa f9fe 	bl	8000404 <__aeabi_i2d>
 8006008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800600c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8006010:	3501      	adds	r5, #1
 8006012:	e7da      	b.n	8005fca <__kernel_rem_pio2+0x4e>
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	e7f8      	b.n	800600c <__kernel_rem_pio2+0x90>
 800601a:	9905      	ldr	r1, [sp, #20]
 800601c:	9d00      	ldr	r5, [sp, #0]
 800601e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006022:	9105      	str	r1, [sp, #20]
 8006024:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8006028:	9500      	str	r5, [sp, #0]
 800602a:	f7fa fa55 	bl	80004d8 <__aeabi_dmul>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4640      	mov	r0, r8
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa f899 	bl	800016c <__adddf3>
 800603a:	4680      	mov	r8, r0
 800603c:	4689      	mov	r9, r1
 800603e:	3701      	adds	r7, #1
 8006040:	9b06      	ldr	r3, [sp, #24]
 8006042:	429f      	cmp	r7, r3
 8006044:	dde9      	ble.n	800601a <__kernel_rem_pio2+0x9e>
 8006046:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800604a:	3601      	adds	r6, #1
 800604c:	e7c2      	b.n	8005fd4 <__kernel_rem_pio2+0x58>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	aa0c      	add	r2, sp, #48	; 0x30
 8006052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006056:	930b      	str	r3, [sp, #44]	; 0x2c
 8006058:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800605a:	9f02      	ldr	r7, [sp, #8]
 800605c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006060:	930a      	str	r3, [sp, #40]	; 0x28
 8006062:	2600      	movs	r6, #0
 8006064:	ab98      	add	r3, sp, #608	; 0x260
 8006066:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800606a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800606e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006072:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006076:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800607a:	ab98      	add	r3, sp, #608	; 0x260
 800607c:	445b      	add	r3, fp
 800607e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8006082:	1bbb      	subs	r3, r7, r6
 8006084:	2b00      	cmp	r3, #0
 8006086:	dc71      	bgt.n	800616c <__kernel_rem_pio2+0x1f0>
 8006088:	4652      	mov	r2, sl
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	f000 fbff 	bl	8006890 <scalbn>
 8006092:	2200      	movs	r2, #0
 8006094:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	f7fa fa1c 	bl	80004d8 <__aeabi_dmul>
 80060a0:	f000 fb72 	bl	8006788 <floor>
 80060a4:	2200      	movs	r2, #0
 80060a6:	4b79      	ldr	r3, [pc, #484]	; (800628c <__kernel_rem_pio2+0x310>)
 80060a8:	f7fa fa16 	bl	80004d8 <__aeabi_dmul>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa f858 	bl	8000168 <__aeabi_dsub>
 80060b8:	460d      	mov	r5, r1
 80060ba:	4604      	mov	r4, r0
 80060bc:	f7fa fca6 	bl	8000a0c <__aeabi_d2iz>
 80060c0:	9005      	str	r0, [sp, #20]
 80060c2:	f7fa f99f 	bl	8000404 <__aeabi_i2d>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4620      	mov	r0, r4
 80060cc:	4629      	mov	r1, r5
 80060ce:	f7fa f84b 	bl	8000168 <__aeabi_dsub>
 80060d2:	f1ba 0f00 	cmp.w	sl, #0
 80060d6:	4680      	mov	r8, r0
 80060d8:	4689      	mov	r9, r1
 80060da:	dd6c      	ble.n	80061b6 <__kernel_rem_pio2+0x23a>
 80060dc:	1e7a      	subs	r2, r7, #1
 80060de:	ab0c      	add	r3, sp, #48	; 0x30
 80060e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80060e4:	f1ca 0118 	rsb	r1, sl, #24
 80060e8:	9c05      	ldr	r4, [sp, #20]
 80060ea:	fa40 f301 	asr.w	r3, r0, r1
 80060ee:	441c      	add	r4, r3
 80060f0:	408b      	lsls	r3, r1
 80060f2:	1ac0      	subs	r0, r0, r3
 80060f4:	ab0c      	add	r3, sp, #48	; 0x30
 80060f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80060fa:	f1ca 0317 	rsb	r3, sl, #23
 80060fe:	9405      	str	r4, [sp, #20]
 8006100:	fa40 f303 	asr.w	r3, r0, r3
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	9b00      	ldr	r3, [sp, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	dd62      	ble.n	80061d2 <__kernel_rem_pio2+0x256>
 800610c:	2200      	movs	r2, #0
 800610e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006112:	4614      	mov	r4, r2
 8006114:	9b05      	ldr	r3, [sp, #20]
 8006116:	3301      	adds	r3, #1
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	4297      	cmp	r7, r2
 800611c:	f300 809f 	bgt.w	800625e <__kernel_rem_pio2+0x2e2>
 8006120:	f1ba 0f00 	cmp.w	sl, #0
 8006124:	dd07      	ble.n	8006136 <__kernel_rem_pio2+0x1ba>
 8006126:	f1ba 0f01 	cmp.w	sl, #1
 800612a:	f000 80bb 	beq.w	80062a4 <__kernel_rem_pio2+0x328>
 800612e:	f1ba 0f02 	cmp.w	sl, #2
 8006132:	f000 80c1 	beq.w	80062b8 <__kernel_rem_pio2+0x33c>
 8006136:	9b00      	ldr	r3, [sp, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d14a      	bne.n	80061d2 <__kernel_rem_pio2+0x256>
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	2000      	movs	r0, #0
 8006142:	4953      	ldr	r1, [pc, #332]	; (8006290 <__kernel_rem_pio2+0x314>)
 8006144:	f7fa f810 	bl	8000168 <__aeabi_dsub>
 8006148:	4680      	mov	r8, r0
 800614a:	4689      	mov	r9, r1
 800614c:	2c00      	cmp	r4, #0
 800614e:	d040      	beq.n	80061d2 <__kernel_rem_pio2+0x256>
 8006150:	4652      	mov	r2, sl
 8006152:	2000      	movs	r0, #0
 8006154:	494e      	ldr	r1, [pc, #312]	; (8006290 <__kernel_rem_pio2+0x314>)
 8006156:	f000 fb9b 	bl	8006890 <scalbn>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	f7fa f801 	bl	8000168 <__aeabi_dsub>
 8006166:	4680      	mov	r8, r0
 8006168:	4689      	mov	r9, r1
 800616a:	e032      	b.n	80061d2 <__kernel_rem_pio2+0x256>
 800616c:	2200      	movs	r2, #0
 800616e:	4b49      	ldr	r3, [pc, #292]	; (8006294 <__kernel_rem_pio2+0x318>)
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa f9b0 	bl	80004d8 <__aeabi_dmul>
 8006178:	f7fa fc48 	bl	8000a0c <__aeabi_d2iz>
 800617c:	f7fa f942 	bl	8000404 <__aeabi_i2d>
 8006180:	2200      	movs	r2, #0
 8006182:	4b45      	ldr	r3, [pc, #276]	; (8006298 <__kernel_rem_pio2+0x31c>)
 8006184:	e9cd 0100 	strd	r0, r1, [sp]
 8006188:	f7fa f9a6 	bl	80004d8 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7f9 ffe8 	bl	8000168 <__aeabi_dsub>
 8006198:	f7fa fc38 	bl	8000a0c <__aeabi_d2iz>
 800619c:	ab0c      	add	r3, sp, #48	; 0x30
 800619e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80061a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061aa:	f7f9 ffdf 	bl	800016c <__adddf3>
 80061ae:	3601      	adds	r6, #1
 80061b0:	4680      	mov	r8, r0
 80061b2:	4689      	mov	r9, r1
 80061b4:	e765      	b.n	8006082 <__kernel_rem_pio2+0x106>
 80061b6:	d105      	bne.n	80061c4 <__kernel_rem_pio2+0x248>
 80061b8:	1e7b      	subs	r3, r7, #1
 80061ba:	aa0c      	add	r2, sp, #48	; 0x30
 80061bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80061c0:	15c3      	asrs	r3, r0, #23
 80061c2:	e79f      	b.n	8006104 <__kernel_rem_pio2+0x188>
 80061c4:	2200      	movs	r2, #0
 80061c6:	4b35      	ldr	r3, [pc, #212]	; (800629c <__kernel_rem_pio2+0x320>)
 80061c8:	f7fa fc0c 	bl	80009e4 <__aeabi_dcmpge>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d143      	bne.n	8006258 <__kernel_rem_pio2+0x2dc>
 80061d0:	9000      	str	r0, [sp, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2300      	movs	r3, #0
 80061d6:	4640      	mov	r0, r8
 80061d8:	4649      	mov	r1, r9
 80061da:	f7fa fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80061de:	2800      	cmp	r0, #0
 80061e0:	f000 80c3 	beq.w	800636a <__kernel_rem_pio2+0x3ee>
 80061e4:	1e7c      	subs	r4, r7, #1
 80061e6:	4623      	mov	r3, r4
 80061e8:	2200      	movs	r2, #0
 80061ea:	9902      	ldr	r1, [sp, #8]
 80061ec:	428b      	cmp	r3, r1
 80061ee:	da6a      	bge.n	80062c6 <__kernel_rem_pio2+0x34a>
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	f000 8084 	beq.w	80062fe <__kernel_rem_pio2+0x382>
 80061f6:	ab0c      	add	r3, sp, #48	; 0x30
 80061f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80061fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80b0 	beq.w	8006366 <__kernel_rem_pio2+0x3ea>
 8006206:	4652      	mov	r2, sl
 8006208:	2000      	movs	r0, #0
 800620a:	4921      	ldr	r1, [pc, #132]	; (8006290 <__kernel_rem_pio2+0x314>)
 800620c:	f000 fb40 	bl	8006890 <scalbn>
 8006210:	4625      	mov	r5, r4
 8006212:	4606      	mov	r6, r0
 8006214:	460f      	mov	r7, r1
 8006216:	f04f 0a00 	mov.w	sl, #0
 800621a:	00e3      	lsls	r3, r4, #3
 800621c:	aa98      	add	r2, sp, #608	; 0x260
 800621e:	eb02 0803 	add.w	r8, r2, r3
 8006222:	f8df b070 	ldr.w	fp, [pc, #112]	; 8006294 <__kernel_rem_pio2+0x318>
 8006226:	9306      	str	r3, [sp, #24]
 8006228:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800622c:	2d00      	cmp	r5, #0
 800622e:	f280 80d2 	bge.w	80063d6 <__kernel_rem_pio2+0x45a>
 8006232:	2500      	movs	r5, #0
 8006234:	9a06      	ldr	r2, [sp, #24]
 8006236:	ab98      	add	r3, sp, #608	; 0x260
 8006238:	189e      	adds	r6, r3, r2
 800623a:	3ea8      	subs	r6, #168	; 0xa8
 800623c:	1b63      	subs	r3, r4, r5
 800623e:	2b00      	cmp	r3, #0
 8006240:	f2c0 80f9 	blt.w	8006436 <__kernel_rem_pio2+0x4ba>
 8006244:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80062a0 <__kernel_rem_pio2+0x324>
 8006248:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800624c:	f04f 0a00 	mov.w	sl, #0
 8006250:	f04f 0b00 	mov.w	fp, #0
 8006254:	2700      	movs	r7, #0
 8006256:	e0e2      	b.n	800641e <__kernel_rem_pio2+0x4a2>
 8006258:	2302      	movs	r3, #2
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	e756      	b.n	800610c <__kernel_rem_pio2+0x190>
 800625e:	ab0c      	add	r3, sp, #48	; 0x30
 8006260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006264:	b94c      	cbnz	r4, 800627a <__kernel_rem_pio2+0x2fe>
 8006266:	b12b      	cbz	r3, 8006274 <__kernel_rem_pio2+0x2f8>
 8006268:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800626c:	a80c      	add	r0, sp, #48	; 0x30
 800626e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006272:	2301      	movs	r3, #1
 8006274:	3201      	adds	r2, #1
 8006276:	461c      	mov	r4, r3
 8006278:	e74f      	b.n	800611a <__kernel_rem_pio2+0x19e>
 800627a:	1acb      	subs	r3, r1, r3
 800627c:	a80c      	add	r0, sp, #48	; 0x30
 800627e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006282:	4623      	mov	r3, r4
 8006284:	e7f6      	b.n	8006274 <__kernel_rem_pio2+0x2f8>
 8006286:	bf00      	nop
 8006288:	080082a8 	.word	0x080082a8
 800628c:	40200000 	.word	0x40200000
 8006290:	3ff00000 	.word	0x3ff00000
 8006294:	3e700000 	.word	0x3e700000
 8006298:	41700000 	.word	0x41700000
 800629c:	3fe00000 	.word	0x3fe00000
 80062a0:	08008260 	.word	0x08008260
 80062a4:	1e7a      	subs	r2, r7, #1
 80062a6:	ab0c      	add	r3, sp, #48	; 0x30
 80062a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80062b0:	a90c      	add	r1, sp, #48	; 0x30
 80062b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80062b6:	e73e      	b.n	8006136 <__kernel_rem_pio2+0x1ba>
 80062b8:	1e7a      	subs	r2, r7, #1
 80062ba:	ab0c      	add	r3, sp, #48	; 0x30
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80062c4:	e7f4      	b.n	80062b0 <__kernel_rem_pio2+0x334>
 80062c6:	a90c      	add	r1, sp, #48	; 0x30
 80062c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	e78b      	b.n	80061ea <__kernel_rem_pio2+0x26e>
 80062d2:	3401      	adds	r4, #1
 80062d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d0fa      	beq.n	80062d2 <__kernel_rem_pio2+0x356>
 80062dc:	ab98      	add	r3, sp, #608	; 0x260
 80062de:	449b      	add	fp, r3
 80062e0:	9b07      	ldr	r3, [sp, #28]
 80062e2:	1c7e      	adds	r6, r7, #1
 80062e4:	19dd      	adds	r5, r3, r7
 80062e6:	ab98      	add	r3, sp, #608	; 0x260
 80062e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80062ec:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80062f0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80062f4:	443c      	add	r4, r7
 80062f6:	42b4      	cmp	r4, r6
 80062f8:	da04      	bge.n	8006304 <__kernel_rem_pio2+0x388>
 80062fa:	4627      	mov	r7, r4
 80062fc:	e6b1      	b.n	8006062 <__kernel_rem_pio2+0xe6>
 80062fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006300:	2401      	movs	r4, #1
 8006302:	e7e7      	b.n	80062d4 <__kernel_rem_pio2+0x358>
 8006304:	f105 0308 	add.w	r3, r5, #8
 8006308:	9309      	str	r3, [sp, #36]	; 0x24
 800630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630c:	2700      	movs	r7, #0
 800630e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006312:	f7fa f877 	bl	8000404 <__aeabi_i2d>
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	f04f 0900 	mov.w	r9, #0
 800631e:	9b08      	ldr	r3, [sp, #32]
 8006320:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006324:	3b08      	subs	r3, #8
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	f105 0310 	add.w	r3, r5, #16
 800632c:	9305      	str	r3, [sp, #20]
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	429f      	cmp	r7, r3
 8006332:	dd04      	ble.n	800633e <__kernel_rem_pio2+0x3c2>
 8006334:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8006338:	3601      	adds	r6, #1
 800633a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800633c:	e7db      	b.n	80062f6 <__kernel_rem_pio2+0x37a>
 800633e:	9905      	ldr	r1, [sp, #20]
 8006340:	9d00      	ldr	r5, [sp, #0]
 8006342:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006346:	9105      	str	r1, [sp, #20]
 8006348:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800634c:	9500      	str	r5, [sp, #0]
 800634e:	f7fa f8c3 	bl	80004d8 <__aeabi_dmul>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4640      	mov	r0, r8
 8006358:	4649      	mov	r1, r9
 800635a:	f7f9 ff07 	bl	800016c <__adddf3>
 800635e:	3701      	adds	r7, #1
 8006360:	4680      	mov	r8, r0
 8006362:	4689      	mov	r9, r1
 8006364:	e7e3      	b.n	800632e <__kernel_rem_pio2+0x3b2>
 8006366:	3c01      	subs	r4, #1
 8006368:	e745      	b.n	80061f6 <__kernel_rem_pio2+0x27a>
 800636a:	f1ca 0200 	rsb	r2, sl, #0
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f000 fa8d 	bl	8006890 <scalbn>
 8006376:	2200      	movs	r2, #0
 8006378:	4ba3      	ldr	r3, [pc, #652]	; (8006608 <__kernel_rem_pio2+0x68c>)
 800637a:	4604      	mov	r4, r0
 800637c:	460d      	mov	r5, r1
 800637e:	f7fa fb31 	bl	80009e4 <__aeabi_dcmpge>
 8006382:	b1f8      	cbz	r0, 80063c4 <__kernel_rem_pio2+0x448>
 8006384:	2200      	movs	r2, #0
 8006386:	4ba1      	ldr	r3, [pc, #644]	; (800660c <__kernel_rem_pio2+0x690>)
 8006388:	4620      	mov	r0, r4
 800638a:	4629      	mov	r1, r5
 800638c:	f7fa f8a4 	bl	80004d8 <__aeabi_dmul>
 8006390:	f7fa fb3c 	bl	8000a0c <__aeabi_d2iz>
 8006394:	4606      	mov	r6, r0
 8006396:	f7fa f835 	bl	8000404 <__aeabi_i2d>
 800639a:	2200      	movs	r2, #0
 800639c:	4b9a      	ldr	r3, [pc, #616]	; (8006608 <__kernel_rem_pio2+0x68c>)
 800639e:	f7fa f89b 	bl	80004d8 <__aeabi_dmul>
 80063a2:	460b      	mov	r3, r1
 80063a4:	4602      	mov	r2, r0
 80063a6:	4629      	mov	r1, r5
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7f9 fedd 	bl	8000168 <__aeabi_dsub>
 80063ae:	f7fa fb2d 	bl	8000a0c <__aeabi_d2iz>
 80063b2:	1c7c      	adds	r4, r7, #1
 80063b4:	ab0c      	add	r3, sp, #48	; 0x30
 80063b6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80063ba:	f10a 0a18 	add.w	sl, sl, #24
 80063be:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80063c2:	e720      	b.n	8006206 <__kernel_rem_pio2+0x28a>
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7fa fb20 	bl	8000a0c <__aeabi_d2iz>
 80063cc:	ab0c      	add	r3, sp, #48	; 0x30
 80063ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80063d2:	463c      	mov	r4, r7
 80063d4:	e717      	b.n	8006206 <__kernel_rem_pio2+0x28a>
 80063d6:	ab0c      	add	r3, sp, #48	; 0x30
 80063d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063dc:	f7fa f812 	bl	8000404 <__aeabi_i2d>
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	f7fa f878 	bl	80004d8 <__aeabi_dmul>
 80063e8:	4652      	mov	r2, sl
 80063ea:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80063ee:	465b      	mov	r3, fp
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7fa f870 	bl	80004d8 <__aeabi_dmul>
 80063f8:	3d01      	subs	r5, #1
 80063fa:	4606      	mov	r6, r0
 80063fc:	460f      	mov	r7, r1
 80063fe:	e715      	b.n	800622c <__kernel_rem_pio2+0x2b0>
 8006400:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8006404:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006408:	f7fa f866 	bl	80004d8 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4650      	mov	r0, sl
 8006412:	4659      	mov	r1, fp
 8006414:	f7f9 feaa 	bl	800016c <__adddf3>
 8006418:	4682      	mov	sl, r0
 800641a:	468b      	mov	fp, r1
 800641c:	3701      	adds	r7, #1
 800641e:	9b02      	ldr	r3, [sp, #8]
 8006420:	429f      	cmp	r7, r3
 8006422:	dc01      	bgt.n	8006428 <__kernel_rem_pio2+0x4ac>
 8006424:	42bd      	cmp	r5, r7
 8006426:	daeb      	bge.n	8006400 <__kernel_rem_pio2+0x484>
 8006428:	ab48      	add	r3, sp, #288	; 0x120
 800642a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800642e:	e9c3 ab00 	strd	sl, fp, [r3]
 8006432:	3501      	adds	r5, #1
 8006434:	e702      	b.n	800623c <__kernel_rem_pio2+0x2c0>
 8006436:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006438:	2b03      	cmp	r3, #3
 800643a:	d86c      	bhi.n	8006516 <__kernel_rem_pio2+0x59a>
 800643c:	e8df f003 	tbb	[pc, r3]
 8006440:	022f2f59 	.word	0x022f2f59
 8006444:	9a06      	ldr	r2, [sp, #24]
 8006446:	ab48      	add	r3, sp, #288	; 0x120
 8006448:	189d      	adds	r5, r3, r2
 800644a:	46aa      	mov	sl, r5
 800644c:	46a3      	mov	fp, r4
 800644e:	f1bb 0f00 	cmp.w	fp, #0
 8006452:	f300 8087 	bgt.w	8006564 <__kernel_rem_pio2+0x5e8>
 8006456:	46a2      	mov	sl, r4
 8006458:	f1ba 0f01 	cmp.w	sl, #1
 800645c:	f300 809f 	bgt.w	800659e <__kernel_rem_pio2+0x622>
 8006460:	2700      	movs	r7, #0
 8006462:	463e      	mov	r6, r7
 8006464:	9d06      	ldr	r5, [sp, #24]
 8006466:	ab48      	add	r3, sp, #288	; 0x120
 8006468:	3508      	adds	r5, #8
 800646a:	441d      	add	r5, r3
 800646c:	2c01      	cmp	r4, #1
 800646e:	f300 80b3 	bgt.w	80065d8 <__kernel_rem_pio2+0x65c>
 8006472:	9b00      	ldr	r3, [sp, #0]
 8006474:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8006476:	9849      	ldr	r0, [sp, #292]	; 0x124
 8006478:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800647a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 80b5 	bne.w	80065ec <__kernel_rem_pio2+0x670>
 8006482:	4603      	mov	r3, r0
 8006484:	462a      	mov	r2, r5
 8006486:	9804      	ldr	r0, [sp, #16]
 8006488:	e9c0 2300 	strd	r2, r3, [r0]
 800648c:	4622      	mov	r2, r4
 800648e:	460b      	mov	r3, r1
 8006490:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006494:	463a      	mov	r2, r7
 8006496:	4633      	mov	r3, r6
 8006498:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800649c:	e03b      	b.n	8006516 <__kernel_rem_pio2+0x59a>
 800649e:	f04f 0c00 	mov.w	ip, #0
 80064a2:	4626      	mov	r6, r4
 80064a4:	4667      	mov	r7, ip
 80064a6:	9d06      	ldr	r5, [sp, #24]
 80064a8:	ab48      	add	r3, sp, #288	; 0x120
 80064aa:	3508      	adds	r5, #8
 80064ac:	441d      	add	r5, r3
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	da42      	bge.n	8006538 <__kernel_rem_pio2+0x5bc>
 80064b2:	9b00      	ldr	r3, [sp, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d049      	beq.n	800654c <__kernel_rem_pio2+0x5d0>
 80064b8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80064bc:	4662      	mov	r2, ip
 80064be:	460b      	mov	r3, r1
 80064c0:	9904      	ldr	r1, [sp, #16]
 80064c2:	2601      	movs	r6, #1
 80064c4:	e9c1 2300 	strd	r2, r3, [r1]
 80064c8:	a948      	add	r1, sp, #288	; 0x120
 80064ca:	463b      	mov	r3, r7
 80064cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d0:	f7f9 fe4a 	bl	8000168 <__aeabi_dsub>
 80064d4:	4684      	mov	ip, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	ad48      	add	r5, sp, #288	; 0x120
 80064da:	42b4      	cmp	r4, r6
 80064dc:	da38      	bge.n	8006550 <__kernel_rem_pio2+0x5d4>
 80064de:	9b00      	ldr	r3, [sp, #0]
 80064e0:	b10b      	cbz	r3, 80064e6 <__kernel_rem_pio2+0x56a>
 80064e2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80064e6:	4662      	mov	r2, ip
 80064e8:	463b      	mov	r3, r7
 80064ea:	9904      	ldr	r1, [sp, #16]
 80064ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80064f0:	e011      	b.n	8006516 <__kernel_rem_pio2+0x59a>
 80064f2:	2700      	movs	r7, #0
 80064f4:	463d      	mov	r5, r7
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	aa98      	add	r2, sp, #608	; 0x260
 80064fa:	4413      	add	r3, r2
 80064fc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8006500:	2c00      	cmp	r4, #0
 8006502:	da0f      	bge.n	8006524 <__kernel_rem_pio2+0x5a8>
 8006504:	9b00      	ldr	r3, [sp, #0]
 8006506:	b10b      	cbz	r3, 800650c <__kernel_rem_pio2+0x590>
 8006508:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800650c:	463a      	mov	r2, r7
 800650e:	462b      	mov	r3, r5
 8006510:	9904      	ldr	r1, [sp, #16]
 8006512:	e9c1 2300 	strd	r2, r3, [r1]
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	f003 0007 	and.w	r0, r3, #7
 800651c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006524:	4638      	mov	r0, r7
 8006526:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800652a:	4629      	mov	r1, r5
 800652c:	f7f9 fe1e 	bl	800016c <__adddf3>
 8006530:	3c01      	subs	r4, #1
 8006532:	4607      	mov	r7, r0
 8006534:	460d      	mov	r5, r1
 8006536:	e7e3      	b.n	8006500 <__kernel_rem_pio2+0x584>
 8006538:	4660      	mov	r0, ip
 800653a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800653e:	4639      	mov	r1, r7
 8006540:	f7f9 fe14 	bl	800016c <__adddf3>
 8006544:	3e01      	subs	r6, #1
 8006546:	4684      	mov	ip, r0
 8006548:	460f      	mov	r7, r1
 800654a:	e7b0      	b.n	80064ae <__kernel_rem_pio2+0x532>
 800654c:	4639      	mov	r1, r7
 800654e:	e7b5      	b.n	80064bc <__kernel_rem_pio2+0x540>
 8006550:	4660      	mov	r0, ip
 8006552:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8006556:	4639      	mov	r1, r7
 8006558:	f7f9 fe08 	bl	800016c <__adddf3>
 800655c:	3601      	adds	r6, #1
 800655e:	4684      	mov	ip, r0
 8006560:	460f      	mov	r7, r1
 8006562:	e7ba      	b.n	80064da <__kernel_rem_pio2+0x55e>
 8006564:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8006568:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800656c:	4640      	mov	r0, r8
 800656e:	4649      	mov	r1, r9
 8006570:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006574:	f7f9 fdfa 	bl	800016c <__adddf3>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7f9 fdf0 	bl	8000168 <__aeabi_dsub>
 8006588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800658c:	f7f9 fdee 	bl	800016c <__adddf3>
 8006590:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006594:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006598:	e9ca 6700 	strd	r6, r7, [sl]
 800659c:	e757      	b.n	800644e <__kernel_rem_pio2+0x4d2>
 800659e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80065a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ae:	f7f9 fddd 	bl	800016c <__adddf3>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4680      	mov	r8, r0
 80065b8:	4689      	mov	r9, r1
 80065ba:	4630      	mov	r0, r6
 80065bc:	4639      	mov	r1, r7
 80065be:	f7f9 fdd3 	bl	8000168 <__aeabi_dsub>
 80065c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c6:	f7f9 fdd1 	bl	800016c <__adddf3>
 80065ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80065d2:	e9c5 8900 	strd	r8, r9, [r5]
 80065d6:	e73f      	b.n	8006458 <__kernel_rem_pio2+0x4dc>
 80065d8:	4638      	mov	r0, r7
 80065da:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80065de:	4631      	mov	r1, r6
 80065e0:	f7f9 fdc4 	bl	800016c <__adddf3>
 80065e4:	3c01      	subs	r4, #1
 80065e6:	4607      	mov	r7, r0
 80065e8:	460e      	mov	r6, r1
 80065ea:	e73f      	b.n	800646c <__kernel_rem_pio2+0x4f0>
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80065f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80065f6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80065fa:	601d      	str	r5, [r3, #0]
 80065fc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006600:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006604:	615e      	str	r6, [r3, #20]
 8006606:	e786      	b.n	8006516 <__kernel_rem_pio2+0x59a>
 8006608:	41700000 	.word	0x41700000
 800660c:	3e700000 	.word	0x3e700000

08006610 <__kernel_sin>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	b086      	sub	sp, #24
 8006616:	e9cd 2300 	strd	r2, r3, [sp]
 800661a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800661e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006622:	4682      	mov	sl, r0
 8006624:	460c      	mov	r4, r1
 8006626:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006628:	da03      	bge.n	8006632 <__kernel_sin+0x22>
 800662a:	f7fa f9ef 	bl	8000a0c <__aeabi_d2iz>
 800662e:	2800      	cmp	r0, #0
 8006630:	d050      	beq.n	80066d4 <__kernel_sin+0xc4>
 8006632:	4652      	mov	r2, sl
 8006634:	4623      	mov	r3, r4
 8006636:	4650      	mov	r0, sl
 8006638:	4621      	mov	r1, r4
 800663a:	f7f9 ff4d 	bl	80004d8 <__aeabi_dmul>
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4650      	mov	r0, sl
 8006648:	4621      	mov	r1, r4
 800664a:	f7f9 ff45 	bl	80004d8 <__aeabi_dmul>
 800664e:	a33e      	add	r3, pc, #248	; (adr r3, 8006748 <__kernel_sin+0x138>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	4680      	mov	r8, r0
 8006656:	4689      	mov	r9, r1
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	f7f9 ff3c 	bl	80004d8 <__aeabi_dmul>
 8006660:	a33b      	add	r3, pc, #236	; (adr r3, 8006750 <__kernel_sin+0x140>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 fd7f 	bl	8000168 <__aeabi_dsub>
 800666a:	4632      	mov	r2, r6
 800666c:	463b      	mov	r3, r7
 800666e:	f7f9 ff33 	bl	80004d8 <__aeabi_dmul>
 8006672:	a339      	add	r3, pc, #228	; (adr r3, 8006758 <__kernel_sin+0x148>)
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f7f9 fd78 	bl	800016c <__adddf3>
 800667c:	4632      	mov	r2, r6
 800667e:	463b      	mov	r3, r7
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	a336      	add	r3, pc, #216	; (adr r3, 8006760 <__kernel_sin+0x150>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 fd6d 	bl	8000168 <__aeabi_dsub>
 800668e:	4632      	mov	r2, r6
 8006690:	463b      	mov	r3, r7
 8006692:	f7f9 ff21 	bl	80004d8 <__aeabi_dmul>
 8006696:	a334      	add	r3, pc, #208	; (adr r3, 8006768 <__kernel_sin+0x158>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f7f9 fd66 	bl	800016c <__adddf3>
 80066a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a4:	b9dd      	cbnz	r5, 80066de <__kernel_sin+0xce>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4630      	mov	r0, r6
 80066ac:	4639      	mov	r1, r7
 80066ae:	f7f9 ff13 	bl	80004d8 <__aeabi_dmul>
 80066b2:	a32f      	add	r3, pc, #188	; (adr r3, 8006770 <__kernel_sin+0x160>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 fd56 	bl	8000168 <__aeabi_dsub>
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	f7f9 ff0a 	bl	80004d8 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4650      	mov	r0, sl
 80066ca:	4621      	mov	r1, r4
 80066cc:	f7f9 fd4e 	bl	800016c <__adddf3>
 80066d0:	4682      	mov	sl, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4650      	mov	r0, sl
 80066d6:	4621      	mov	r1, r4
 80066d8:	b006      	add	sp, #24
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	2200      	movs	r2, #0
 80066e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <__kernel_sin+0x168>)
 80066e6:	f7f9 fef7 	bl	80004d8 <__aeabi_dmul>
 80066ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	f7f9 feef 	bl	80004d8 <__aeabi_dmul>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006702:	f7f9 fd31 	bl	8000168 <__aeabi_dsub>
 8006706:	4632      	mov	r2, r6
 8006708:	463b      	mov	r3, r7
 800670a:	f7f9 fee5 	bl	80004d8 <__aeabi_dmul>
 800670e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006712:	f7f9 fd29 	bl	8000168 <__aeabi_dsub>
 8006716:	a316      	add	r3, pc, #88	; (adr r3, 8006770 <__kernel_sin+0x160>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	4606      	mov	r6, r0
 800671e:	460f      	mov	r7, r1
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7f9 fed8 	bl	80004d8 <__aeabi_dmul>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	f7f9 fd1c 	bl	800016c <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4650      	mov	r0, sl
 800673a:	4621      	mov	r1, r4
 800673c:	f7f9 fd14 	bl	8000168 <__aeabi_dsub>
 8006740:	e7c6      	b.n	80066d0 <__kernel_sin+0xc0>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
 8006748:	5acfd57c 	.word	0x5acfd57c
 800674c:	3de5d93a 	.word	0x3de5d93a
 8006750:	8a2b9ceb 	.word	0x8a2b9ceb
 8006754:	3e5ae5e6 	.word	0x3e5ae5e6
 8006758:	57b1fe7d 	.word	0x57b1fe7d
 800675c:	3ec71de3 	.word	0x3ec71de3
 8006760:	19c161d5 	.word	0x19c161d5
 8006764:	3f2a01a0 	.word	0x3f2a01a0
 8006768:	1110f8a6 	.word	0x1110f8a6
 800676c:	3f811111 	.word	0x3f811111
 8006770:	55555549 	.word	0x55555549
 8006774:	3fc55555 	.word	0x3fc55555
 8006778:	3fe00000 	.word	0x3fe00000

0800677c <fabs>:
 800677c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006780:	4619      	mov	r1, r3
 8006782:	4770      	bx	lr
 8006784:	0000      	movs	r0, r0
	...

08006788 <floor>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006790:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006794:	2e13      	cmp	r6, #19
 8006796:	4607      	mov	r7, r0
 8006798:	460b      	mov	r3, r1
 800679a:	460c      	mov	r4, r1
 800679c:	4605      	mov	r5, r0
 800679e:	dc35      	bgt.n	800680c <floor+0x84>
 80067a0:	2e00      	cmp	r6, #0
 80067a2:	da16      	bge.n	80067d2 <floor+0x4a>
 80067a4:	a336      	add	r3, pc, #216	; (adr r3, 8006880 <floor+0xf8>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7f9 fcdf 	bl	800016c <__adddf3>
 80067ae:	2200      	movs	r2, #0
 80067b0:	2300      	movs	r3, #0
 80067b2:	f7fa f921 	bl	80009f8 <__aeabi_dcmpgt>
 80067b6:	b148      	cbz	r0, 80067cc <floor+0x44>
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	da5b      	bge.n	8006874 <floor+0xec>
 80067bc:	2500      	movs	r5, #0
 80067be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80067c2:	4a31      	ldr	r2, [pc, #196]	; (8006888 <floor+0x100>)
 80067c4:	433b      	orrs	r3, r7
 80067c6:	42ab      	cmp	r3, r5
 80067c8:	bf18      	it	ne
 80067ca:	4614      	movne	r4, r2
 80067cc:	4623      	mov	r3, r4
 80067ce:	462f      	mov	r7, r5
 80067d0:	e026      	b.n	8006820 <floor+0x98>
 80067d2:	4a2e      	ldr	r2, [pc, #184]	; (800688c <floor+0x104>)
 80067d4:	fa42 f806 	asr.w	r8, r2, r6
 80067d8:	ea01 0208 	and.w	r2, r1, r8
 80067dc:	4302      	orrs	r2, r0
 80067de:	d01f      	beq.n	8006820 <floor+0x98>
 80067e0:	a327      	add	r3, pc, #156	; (adr r3, 8006880 <floor+0xf8>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 fcc1 	bl	800016c <__adddf3>
 80067ea:	2200      	movs	r2, #0
 80067ec:	2300      	movs	r3, #0
 80067ee:	f7fa f903 	bl	80009f8 <__aeabi_dcmpgt>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0ea      	beq.n	80067cc <floor+0x44>
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	bfbe      	ittt	lt
 80067fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80067fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8006802:	19a4      	addlt	r4, r4, r6
 8006804:	ea24 0408 	bic.w	r4, r4, r8
 8006808:	2500      	movs	r5, #0
 800680a:	e7df      	b.n	80067cc <floor+0x44>
 800680c:	2e33      	cmp	r6, #51	; 0x33
 800680e:	dd0b      	ble.n	8006828 <floor+0xa0>
 8006810:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006814:	d104      	bne.n	8006820 <floor+0x98>
 8006816:	4602      	mov	r2, r0
 8006818:	f7f9 fca8 	bl	800016c <__adddf3>
 800681c:	4607      	mov	r7, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4638      	mov	r0, r7
 8006822:	4619      	mov	r1, r3
 8006824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006830:	fa22 f808 	lsr.w	r8, r2, r8
 8006834:	ea18 0f00 	tst.w	r8, r0
 8006838:	d0f2      	beq.n	8006820 <floor+0x98>
 800683a:	a311      	add	r3, pc, #68	; (adr r3, 8006880 <floor+0xf8>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fc94 	bl	800016c <__adddf3>
 8006844:	2200      	movs	r2, #0
 8006846:	2300      	movs	r3, #0
 8006848:	f7fa f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800684c:	2800      	cmp	r0, #0
 800684e:	d0bd      	beq.n	80067cc <floor+0x44>
 8006850:	2c00      	cmp	r4, #0
 8006852:	da02      	bge.n	800685a <floor+0xd2>
 8006854:	2e14      	cmp	r6, #20
 8006856:	d103      	bne.n	8006860 <floor+0xd8>
 8006858:	3401      	adds	r4, #1
 800685a:	ea25 0508 	bic.w	r5, r5, r8
 800685e:	e7b5      	b.n	80067cc <floor+0x44>
 8006860:	2301      	movs	r3, #1
 8006862:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006866:	fa03 f606 	lsl.w	r6, r3, r6
 800686a:	4435      	add	r5, r6
 800686c:	42bd      	cmp	r5, r7
 800686e:	bf38      	it	cc
 8006870:	18e4      	addcc	r4, r4, r3
 8006872:	e7f2      	b.n	800685a <floor+0xd2>
 8006874:	2500      	movs	r5, #0
 8006876:	462c      	mov	r4, r5
 8006878:	e7a8      	b.n	80067cc <floor+0x44>
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w
 8006880:	8800759c 	.word	0x8800759c
 8006884:	7e37e43c 	.word	0x7e37e43c
 8006888:	bff00000 	.word	0xbff00000
 800688c:	000fffff 	.word	0x000fffff

08006890 <scalbn>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	4616      	mov	r6, r2
 8006894:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006898:	4604      	mov	r4, r0
 800689a:	460d      	mov	r5, r1
 800689c:	460b      	mov	r3, r1
 800689e:	b982      	cbnz	r2, 80068c2 <scalbn+0x32>
 80068a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068a4:	4303      	orrs	r3, r0
 80068a6:	d034      	beq.n	8006912 <scalbn+0x82>
 80068a8:	4b2d      	ldr	r3, [pc, #180]	; (8006960 <scalbn+0xd0>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	f7f9 fe14 	bl	80004d8 <__aeabi_dmul>
 80068b0:	4b2c      	ldr	r3, [pc, #176]	; (8006964 <scalbn+0xd4>)
 80068b2:	4604      	mov	r4, r0
 80068b4:	429e      	cmp	r6, r3
 80068b6:	460d      	mov	r5, r1
 80068b8:	da0d      	bge.n	80068d6 <scalbn+0x46>
 80068ba:	a325      	add	r3, pc, #148	; (adr r3, 8006950 <scalbn+0xc0>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	e01c      	b.n	80068fc <scalbn+0x6c>
 80068c2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80068c6:	42ba      	cmp	r2, r7
 80068c8:	d109      	bne.n	80068de <scalbn+0x4e>
 80068ca:	4602      	mov	r2, r0
 80068cc:	f7f9 fc4e 	bl	800016c <__adddf3>
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	e01d      	b.n	8006912 <scalbn+0x82>
 80068d6:	460b      	mov	r3, r1
 80068d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80068dc:	3a36      	subs	r2, #54	; 0x36
 80068de:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80068e2:	4432      	add	r2, r6
 80068e4:	428a      	cmp	r2, r1
 80068e6:	dd0c      	ble.n	8006902 <scalbn+0x72>
 80068e8:	4622      	mov	r2, r4
 80068ea:	462b      	mov	r3, r5
 80068ec:	a11a      	add	r1, pc, #104	; (adr r1, 8006958 <scalbn+0xc8>)
 80068ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068f2:	f000 f83b 	bl	800696c <copysign>
 80068f6:	a318      	add	r3, pc, #96	; (adr r3, 8006958 <scalbn+0xc8>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f7f9 fdec 	bl	80004d8 <__aeabi_dmul>
 8006900:	e7e6      	b.n	80068d0 <scalbn+0x40>
 8006902:	2a00      	cmp	r2, #0
 8006904:	dd08      	ble.n	8006918 <scalbn+0x88>
 8006906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800690a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800690e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006918:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800691c:	da0b      	bge.n	8006936 <scalbn+0xa6>
 800691e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006922:	429e      	cmp	r6, r3
 8006924:	4622      	mov	r2, r4
 8006926:	462b      	mov	r3, r5
 8006928:	dce0      	bgt.n	80068ec <scalbn+0x5c>
 800692a:	a109      	add	r1, pc, #36	; (adr r1, 8006950 <scalbn+0xc0>)
 800692c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006930:	f000 f81c 	bl	800696c <copysign>
 8006934:	e7c1      	b.n	80068ba <scalbn+0x2a>
 8006936:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800693a:	3236      	adds	r2, #54	; 0x36
 800693c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006940:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006944:	4620      	mov	r0, r4
 8006946:	4629      	mov	r1, r5
 8006948:	2200      	movs	r2, #0
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <scalbn+0xd8>)
 800694c:	e7d6      	b.n	80068fc <scalbn+0x6c>
 800694e:	bf00      	nop
 8006950:	c2f8f359 	.word	0xc2f8f359
 8006954:	01a56e1f 	.word	0x01a56e1f
 8006958:	8800759c 	.word	0x8800759c
 800695c:	7e37e43c 	.word	0x7e37e43c
 8006960:	43500000 	.word	0x43500000
 8006964:	ffff3cb0 	.word	0xffff3cb0
 8006968:	3c900000 	.word	0x3c900000

0800696c <copysign>:
 800696c:	b530      	push	{r4, r5, lr}
 800696e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006976:	ea42 0503 	orr.w	r5, r2, r3
 800697a:	4629      	mov	r1, r5
 800697c:	bd30      	pop	{r4, r5, pc}
	...

08006980 <_init>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr

0800698c <_fini>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr
